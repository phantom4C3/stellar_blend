{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/generated/curr_generated.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar XDR = _interopRequireWildcard(require(\"@stellar/js-xdr\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return { \"default\": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n[\"default\"] = e, t && t.set(e, n), n; }\n// Automatically generated by xdrgen on 2024-09-12T11:09:00-08:00\n// DO NOT EDIT or your changes may be overwritten\n\n/* jshint maxstatements:2147483647  */\n/* jshint esnext:true  */\n\nvar types = XDR.config(function (xdr) {\n  // Workaround for https://github.com/stellar/xdrgen/issues/152\n  //\n  // The \"correct\" way would be to replace bare instances of each constant with\n  // xdr.lookup(\"...\"), but that's more error-prone.\n  var SCSYMBOL_LIMIT = 32;\n  var SC_SPEC_DOC_LIMIT = 1024;\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Value<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Value\", xdr.varOpaque());\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPBallot\n  //   {\n  //       uint32 counter; // n\n  //       Value value;    // x\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpBallot\", [[\"counter\", xdr.lookup(\"Uint32\")], [\"value\", xdr.lookup(\"Value\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCPStatementType\n  //   {\n  //       SCP_ST_PREPARE = 0,\n  //       SCP_ST_CONFIRM = 1,\n  //       SCP_ST_EXTERNALIZE = 2,\n  //       SCP_ST_NOMINATE = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScpStatementType\", {\n    scpStPrepare: 0,\n    scpStConfirm: 1,\n    scpStExternalize: 2,\n    scpStNominate: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPNomination\n  //   {\n  //       Hash quorumSetHash; // D\n  //       Value votes<>;      // X\n  //       Value accepted<>;   // Y\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpNomination\", [[\"quorumSetHash\", xdr.lookup(\"Hash\")], [\"votes\", xdr.varArray(xdr.lookup(\"Value\"), 2147483647)], [\"accepted\", xdr.varArray(xdr.lookup(\"Value\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               Hash quorumSetHash;       // D\n  //               SCPBallot ballot;         // b\n  //               SCPBallot* prepared;      // p\n  //               SCPBallot* preparedPrime; // p'\n  //               uint32 nC;                // c.n\n  //               uint32 nH;                // h.n\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatementPrepare\", [[\"quorumSetHash\", xdr.lookup(\"Hash\")], [\"ballot\", xdr.lookup(\"ScpBallot\")], [\"prepared\", xdr.option(xdr.lookup(\"ScpBallot\"))], [\"preparedPrime\", xdr.option(xdr.lookup(\"ScpBallot\"))], [\"nC\", xdr.lookup(\"Uint32\")], [\"nH\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               SCPBallot ballot;   // b\n  //               uint32 nPrepared;   // p.n\n  //               uint32 nCommit;     // c.n\n  //               uint32 nH;          // h.n\n  //               Hash quorumSetHash; // D\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatementConfirm\", [[\"ballot\", xdr.lookup(\"ScpBallot\")], [\"nPrepared\", xdr.lookup(\"Uint32\")], [\"nCommit\", xdr.lookup(\"Uint32\")], [\"nH\", xdr.lookup(\"Uint32\")], [\"quorumSetHash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               SCPBallot commit;         // c\n  //               uint32 nH;                // h.n\n  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatementExternalize\", [[\"commit\", xdr.lookup(\"ScpBallot\")], [\"nH\", xdr.lookup(\"Uint32\")], [\"commitQuorumSetHash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (SCPStatementType type)\n  //       {\n  //       case SCP_ST_PREPARE:\n  //           struct\n  //           {\n  //               Hash quorumSetHash;       // D\n  //               SCPBallot ballot;         // b\n  //               SCPBallot* prepared;      // p\n  //               SCPBallot* preparedPrime; // p'\n  //               uint32 nC;                // c.n\n  //               uint32 nH;                // h.n\n  //           } prepare;\n  //       case SCP_ST_CONFIRM:\n  //           struct\n  //           {\n  //               SCPBallot ballot;   // b\n  //               uint32 nPrepared;   // p.n\n  //               uint32 nCommit;     // c.n\n  //               uint32 nH;          // h.n\n  //               Hash quorumSetHash; // D\n  //           } confirm;\n  //       case SCP_ST_EXTERNALIZE:\n  //           struct\n  //           {\n  //               SCPBallot commit;         // c\n  //               uint32 nH;                // h.n\n  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE\n  //           } externalize;\n  //       case SCP_ST_NOMINATE:\n  //           SCPNomination nominate;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ScpStatementPledges\", {\n    switchOn: xdr.lookup(\"ScpStatementType\"),\n    switchName: \"type\",\n    switches: [[\"scpStPrepare\", \"prepare\"], [\"scpStConfirm\", \"confirm\"], [\"scpStExternalize\", \"externalize\"], [\"scpStNominate\", \"nominate\"]],\n    arms: {\n      prepare: xdr.lookup(\"ScpStatementPrepare\"),\n      confirm: xdr.lookup(\"ScpStatementConfirm\"),\n      externalize: xdr.lookup(\"ScpStatementExternalize\"),\n      nominate: xdr.lookup(\"ScpNomination\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPStatement\n  //   {\n  //       NodeID nodeID;    // v\n  //       uint64 slotIndex; // i\n  //\n  //       union switch (SCPStatementType type)\n  //       {\n  //       case SCP_ST_PREPARE:\n  //           struct\n  //           {\n  //               Hash quorumSetHash;       // D\n  //               SCPBallot ballot;         // b\n  //               SCPBallot* prepared;      // p\n  //               SCPBallot* preparedPrime; // p'\n  //               uint32 nC;                // c.n\n  //               uint32 nH;                // h.n\n  //           } prepare;\n  //       case SCP_ST_CONFIRM:\n  //           struct\n  //           {\n  //               SCPBallot ballot;   // b\n  //               uint32 nPrepared;   // p.n\n  //               uint32 nCommit;     // c.n\n  //               uint32 nH;          // h.n\n  //               Hash quorumSetHash; // D\n  //           } confirm;\n  //       case SCP_ST_EXTERNALIZE:\n  //           struct\n  //           {\n  //               SCPBallot commit;         // c\n  //               uint32 nH;                // h.n\n  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE\n  //           } externalize;\n  //       case SCP_ST_NOMINATE:\n  //           SCPNomination nominate;\n  //       }\n  //       pledges;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpStatement\", [[\"nodeId\", xdr.lookup(\"NodeId\")], [\"slotIndex\", xdr.lookup(\"Uint64\")], [\"pledges\", xdr.lookup(\"ScpStatementPledges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPEnvelope\n  //   {\n  //       SCPStatement statement;\n  //       Signature signature;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpEnvelope\", [[\"statement\", xdr.lookup(\"ScpStatement\")], [\"signature\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPQuorumSet\n  //   {\n  //       uint32 threshold;\n  //       NodeID validators<>;\n  //       SCPQuorumSet innerSets<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpQuorumSet\", [[\"threshold\", xdr.lookup(\"Uint32\")], [\"validators\", xdr.varArray(xdr.lookup(\"NodeId\"), 2147483647)], [\"innerSets\", xdr.varArray(xdr.lookup(\"ScpQuorumSet\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Thresholds[4];\n  //\n  // ===========================================================================\n  xdr.typedef(\"Thresholds\", xdr.opaque(4));\n\n  // === xdr source ============================================================\n  //\n  //   typedef string string32<32>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"String32\", xdr.string(32));\n\n  // === xdr source ============================================================\n  //\n  //   typedef string string64<64>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"String64\", xdr.string(64));\n\n  // === xdr source ============================================================\n  //\n  //   typedef int64 SequenceNumber;\n  //\n  // ===========================================================================\n  xdr.typedef(\"SequenceNumber\", xdr.lookup(\"Int64\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque DataValue<64>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"DataValue\", xdr.varOpaque(64));\n\n  // === xdr source ============================================================\n  //\n  //   typedef Hash PoolID;\n  //\n  // ===========================================================================\n  xdr.typedef(\"PoolId\", xdr.lookup(\"Hash\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque AssetCode4[4];\n  //\n  // ===========================================================================\n  xdr.typedef(\"AssetCode4\", xdr.opaque(4));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque AssetCode12[12];\n  //\n  // ===========================================================================\n  xdr.typedef(\"AssetCode12\", xdr.opaque(12));\n\n  // === xdr source ============================================================\n  //\n  //   enum AssetType\n  //   {\n  //       ASSET_TYPE_NATIVE = 0,\n  //       ASSET_TYPE_CREDIT_ALPHANUM4 = 1,\n  //       ASSET_TYPE_CREDIT_ALPHANUM12 = 2,\n  //       ASSET_TYPE_POOL_SHARE = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"AssetType\", {\n    assetTypeNative: 0,\n    assetTypeCreditAlphanum4: 1,\n    assetTypeCreditAlphanum12: 2,\n    assetTypePoolShare: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union AssetCode switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AssetCode4 assetCode4;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AssetCode12 assetCode12;\n  //\n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AssetCode\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeCreditAlphanum4\", \"assetCode4\"], [\"assetTypeCreditAlphanum12\", \"assetCode12\"]],\n    arms: {\n      assetCode4: xdr.lookup(\"AssetCode4\"),\n      assetCode12: xdr.lookup(\"AssetCode12\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AlphaNum4\n  //   {\n  //       AssetCode4 assetCode;\n  //       AccountID issuer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AlphaNum4\", [[\"assetCode\", xdr.lookup(\"AssetCode4\")], [\"issuer\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct AlphaNum12\n  //   {\n  //       AssetCode12 assetCode;\n  //       AccountID issuer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AlphaNum12\", [[\"assetCode\", xdr.lookup(\"AssetCode12\")], [\"issuer\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union Asset switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_NATIVE: // Not credit\n  //       void;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AlphaNum4 alphaNum4;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AlphaNum12 alphaNum12;\n  //\n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Asset\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeNative\", xdr[\"void\"]()], [\"assetTypeCreditAlphanum4\", \"alphaNum4\"], [\"assetTypeCreditAlphanum12\", \"alphaNum12\"]],\n    arms: {\n      alphaNum4: xdr.lookup(\"AlphaNum4\"),\n      alphaNum12: xdr.lookup(\"AlphaNum12\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Price\n  //   {\n  //       int32 n; // numerator\n  //       int32 d; // denominator\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Price\", [[\"n\", xdr.lookup(\"Int32\")], [\"d\", xdr.lookup(\"Int32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Liabilities\n  //   {\n  //       int64 buying;\n  //       int64 selling;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Liabilities\", [[\"buying\", xdr.lookup(\"Int64\")], [\"selling\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ThresholdIndexes\n  //   {\n  //       THRESHOLD_MASTER_WEIGHT = 0,\n  //       THRESHOLD_LOW = 1,\n  //       THRESHOLD_MED = 2,\n  //       THRESHOLD_HIGH = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ThresholdIndices\", {\n    thresholdMasterWeight: 0,\n    thresholdLow: 1,\n    thresholdMed: 2,\n    thresholdHigh: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerEntryType\n  //   {\n  //       ACCOUNT = 0,\n  //       TRUSTLINE = 1,\n  //       OFFER = 2,\n  //       DATA = 3,\n  //       CLAIMABLE_BALANCE = 4,\n  //       LIQUIDITY_POOL = 5,\n  //       CONTRACT_DATA = 6,\n  //       CONTRACT_CODE = 7,\n  //       CONFIG_SETTING = 8,\n  //       TTL = 9\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LedgerEntryType\", {\n    account: 0,\n    trustline: 1,\n    offer: 2,\n    data: 3,\n    claimableBalance: 4,\n    liquidityPool: 5,\n    contractData: 6,\n    contractCode: 7,\n    configSetting: 8,\n    ttl: 9\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Signer\n  //   {\n  //       SignerKey key;\n  //       uint32 weight; // really only need 1 byte\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Signer\", [[\"key\", xdr.lookup(\"SignerKey\")], [\"weight\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum AccountFlags\n  //   { // masks for each flag\n  //\n  //       // Flags set on issuer accounts\n  //       // TrustLines are created with authorized set to \"false\" requiring\n  //       // the issuer to set it for each TrustLine\n  //       AUTH_REQUIRED_FLAG = 0x1,\n  //       // If set, the authorized flag in TrustLines can be cleared\n  //       // otherwise, authorization cannot be revoked\n  //       AUTH_REVOCABLE_FLAG = 0x2,\n  //       // Once set, causes all AUTH_* flags to be read-only\n  //       AUTH_IMMUTABLE_FLAG = 0x4,\n  //       // Trustlines are created with clawback enabled set to \"true\",\n  //       // and claimable balances created from those trustlines are created\n  //       // with clawback enabled set to \"true\"\n  //       AUTH_CLAWBACK_ENABLED_FLAG = 0x8\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"AccountFlags\", {\n    authRequiredFlag: 1,\n    authRevocableFlag: 2,\n    authImmutableFlag: 4,\n    authClawbackEnabledFlag: 8\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_ACCOUNT_FLAGS = 0x7;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_ACCOUNT_FLAGS\", 0x7);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_ACCOUNT_FLAGS_V17 = 0xF;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_ACCOUNT_FLAGS_V17\", 0xF);\n\n  // === xdr source ============================================================\n  //\n  //   const MAX_SIGNERS = 20;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MAX_SIGNERS\", 20);\n\n  // === xdr source ============================================================\n  //\n  //   typedef AccountID* SponsorshipDescriptor;\n  //\n  // ===========================================================================\n  xdr.typedef(\"SponsorshipDescriptor\", xdr.option(xdr.lookup(\"AccountId\")));\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntryExtensionV3\n  //   {\n  //       // We can use this to add more fields, or because it is first, to\n  //       // change AccountEntryExtensionV3 into a union.\n  //       ExtensionPoint ext;\n  //\n  //       // Ledger number at which `seqNum` took on its present value.\n  //       uint32 seqLedger;\n  //\n  //       // Time at which `seqNum` took on its present value.\n  //       TimePoint seqTime;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntryExtensionV3\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"seqLedger\", xdr.lookup(\"Uint32\")], [\"seqTime\", xdr.lookup(\"TimePoint\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 3:\n  //           AccountEntryExtensionV3 v3;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"AccountEntryExtensionV2Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [3, \"v3\"]],\n    arms: {\n      v3: xdr.lookup(\"AccountEntryExtensionV3\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntryExtensionV2\n  //   {\n  //       uint32 numSponsored;\n  //       uint32 numSponsoring;\n  //       SponsorshipDescriptor signerSponsoringIDs<MAX_SIGNERS>;\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 3:\n  //           AccountEntryExtensionV3 v3;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntryExtensionV2\", [[\"numSponsored\", xdr.lookup(\"Uint32\")], [\"numSponsoring\", xdr.lookup(\"Uint32\")], [\"signerSponsoringIDs\", xdr.varArray(xdr.lookup(\"SponsorshipDescriptor\"), xdr.lookup(\"MAX_SIGNERS\"))], [\"ext\", xdr.lookup(\"AccountEntryExtensionV2Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 2:\n  //           AccountEntryExtensionV2 v2;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"AccountEntryExtensionV1Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [2, \"v2\"]],\n    arms: {\n      v2: xdr.lookup(\"AccountEntryExtensionV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntryExtensionV1\n  //   {\n  //       Liabilities liabilities;\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 2:\n  //           AccountEntryExtensionV2 v2;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntryExtensionV1\", [[\"liabilities\", xdr.lookup(\"Liabilities\")], [\"ext\", xdr.lookup(\"AccountEntryExtensionV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           AccountEntryExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"AccountEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"AccountEntryExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct AccountEntry\n  //   {\n  //       AccountID accountID;      // master public key for this account\n  //       int64 balance;            // in stroops\n  //       SequenceNumber seqNum;    // last sequence number used for this account\n  //       uint32 numSubEntries;     // number of sub-entries this account has\n  //                                 // drives the reserve\n  //       AccountID* inflationDest; // Account to vote for during inflation\n  //       uint32 flags;             // see AccountFlags\n  //\n  //       string32 homeDomain; // can be used for reverse federation and memo lookup\n  //\n  //       // fields used for signatures\n  //       // thresholds stores unsigned bytes: [weight of master|low|medium|high]\n  //       Thresholds thresholds;\n  //\n  //       Signer signers<MAX_SIGNERS>; // possible signers for this account\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           AccountEntryExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AccountEntry\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"balance\", xdr.lookup(\"Int64\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"numSubEntries\", xdr.lookup(\"Uint32\")], [\"inflationDest\", xdr.option(xdr.lookup(\"AccountId\"))], [\"flags\", xdr.lookup(\"Uint32\")], [\"homeDomain\", xdr.lookup(\"String32\")], [\"thresholds\", xdr.lookup(\"Thresholds\")], [\"signers\", xdr.varArray(xdr.lookup(\"Signer\"), xdr.lookup(\"MAX_SIGNERS\"))], [\"ext\", xdr.lookup(\"AccountEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum TrustLineFlags\n  //   {\n  //       // issuer has authorized account to perform transactions with its credit\n  //       AUTHORIZED_FLAG = 1,\n  //       // issuer has authorized account to maintain and reduce liabilities for its\n  //       // credit\n  //       AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG = 2,\n  //       // issuer has specified that it may clawback its credit, and that claimable\n  //       // balances created with its credit may also be clawed back\n  //       TRUSTLINE_CLAWBACK_ENABLED_FLAG = 4\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"TrustLineFlags\", {\n    authorizedFlag: 1,\n    authorizedToMaintainLiabilitiesFlag: 2,\n    trustlineClawbackEnabledFlag: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_TRUSTLINE_FLAGS = 1;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_TRUSTLINE_FLAGS\", 1);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_TRUSTLINE_FLAGS_V13 = 3;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_TRUSTLINE_FLAGS_V13\", 3);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_TRUSTLINE_FLAGS_V17 = 7;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_TRUSTLINE_FLAGS_V17\", 7);\n\n  // === xdr source ============================================================\n  //\n  //   enum LiquidityPoolType\n  //   {\n  //       LIQUIDITY_POOL_CONSTANT_PRODUCT = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LiquidityPoolType\", {\n    liquidityPoolConstantProduct: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union TrustLineAsset switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_NATIVE: // Not credit\n  //       void;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AlphaNum4 alphaNum4;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AlphaNum12 alphaNum12;\n  //\n  //   case ASSET_TYPE_POOL_SHARE:\n  //       PoolID liquidityPoolID;\n  //\n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineAsset\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeNative\", xdr[\"void\"]()], [\"assetTypeCreditAlphanum4\", \"alphaNum4\"], [\"assetTypeCreditAlphanum12\", \"alphaNum12\"], [\"assetTypePoolShare\", \"liquidityPoolId\"]],\n    arms: {\n      alphaNum4: xdr.lookup(\"AlphaNum4\"),\n      alphaNum12: xdr.lookup(\"AlphaNum12\"),\n      liquidityPoolId: xdr.lookup(\"PoolId\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineEntryExtensionV2Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TrustLineEntryExtensionV2\n  //   {\n  //       int32 liquidityPoolUseCount;\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TrustLineEntryExtensionV2\", [[\"liquidityPoolUseCount\", xdr.lookup(\"Int32\")], [\"ext\", xdr.lookup(\"TrustLineEntryExtensionV2Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineEntryV1Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [2, \"v2\"]],\n    arms: {\n      v2: xdr.lookup(\"TrustLineEntryExtensionV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               Liabilities liabilities;\n  //\n  //               union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //               ext;\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"TrustLineEntryV1\", [[\"liabilities\", xdr.lookup(\"Liabilities\")], [\"ext\", xdr.lookup(\"TrustLineEntryV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           struct\n  //           {\n  //               Liabilities liabilities;\n  //\n  //               union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //               ext;\n  //           } v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TrustLineEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"TrustLineEntryV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TrustLineEntry\n  //   {\n  //       AccountID accountID;  // account this trustline belongs to\n  //       TrustLineAsset asset; // type of asset (with issuer)\n  //       int64 balance;        // how much of this asset the user has.\n  //                             // Asset defines the unit for this;\n  //\n  //       int64 limit;  // balance cannot be above this\n  //       uint32 flags; // see TrustLineFlags\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           struct\n  //           {\n  //               Liabilities liabilities;\n  //\n  //               union switch (int v)\n  //               {\n  //               case 0:\n  //                   void;\n  //               case 2:\n  //                   TrustLineEntryExtensionV2 v2;\n  //               }\n  //               ext;\n  //           } v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TrustLineEntry\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"TrustLineAsset\")], [\"balance\", xdr.lookup(\"Int64\")], [\"limit\", xdr.lookup(\"Int64\")], [\"flags\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"TrustLineEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum OfferEntryFlags\n  //   {\n  //       // an offer with this flag will not act on and take a reverse offer of equal\n  //       // price\n  //       PASSIVE_FLAG = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"OfferEntryFlags\", {\n    passiveFlag: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_OFFERENTRY_FLAGS = 1;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_OFFERENTRY_FLAGS\", 1);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"OfferEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct OfferEntry\n  //   {\n  //       AccountID sellerID;\n  //       int64 offerID;\n  //       Asset selling; // A\n  //       Asset buying;  // B\n  //       int64 amount;  // amount of A\n  //\n  //       /* price for this offer:\n  //           price of A in terms of B\n  //           price=AmountB/AmountA=priceNumerator/priceDenominator\n  //           price is after fees\n  //       */\n  //       Price price;\n  //       uint32 flags; // see OfferEntryFlags\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"OfferEntry\", [[\"sellerId\", xdr.lookup(\"AccountId\")], [\"offerId\", xdr.lookup(\"Int64\")], [\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")], [\"flags\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"OfferEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"DataEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct DataEntry\n  //   {\n  //       AccountID accountID; // account this data belongs to\n  //       string64 dataName;\n  //       DataValue dataValue;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DataEntry\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"dataName\", xdr.lookup(\"String64\")], [\"dataValue\", xdr.lookup(\"DataValue\")], [\"ext\", xdr.lookup(\"DataEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimPredicateType\n  //   {\n  //       CLAIM_PREDICATE_UNCONDITIONAL = 0,\n  //       CLAIM_PREDICATE_AND = 1,\n  //       CLAIM_PREDICATE_OR = 2,\n  //       CLAIM_PREDICATE_NOT = 3,\n  //       CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME = 4,\n  //       CLAIM_PREDICATE_BEFORE_RELATIVE_TIME = 5\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimPredicateType\", {\n    claimPredicateUnconditional: 0,\n    claimPredicateAnd: 1,\n    claimPredicateOr: 2,\n    claimPredicateNot: 3,\n    claimPredicateBeforeAbsoluteTime: 4,\n    claimPredicateBeforeRelativeTime: 5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimPredicate switch (ClaimPredicateType type)\n  //   {\n  //   case CLAIM_PREDICATE_UNCONDITIONAL:\n  //       void;\n  //   case CLAIM_PREDICATE_AND:\n  //       ClaimPredicate andPredicates<2>;\n  //   case CLAIM_PREDICATE_OR:\n  //       ClaimPredicate orPredicates<2>;\n  //   case CLAIM_PREDICATE_NOT:\n  //       ClaimPredicate* notPredicate;\n  //   case CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME:\n  //       int64 absBefore; // Predicate will be true if closeTime < absBefore\n  //   case CLAIM_PREDICATE_BEFORE_RELATIVE_TIME:\n  //       int64 relBefore; // Seconds since closeTime of the ledger in which the\n  //                        // ClaimableBalanceEntry was created\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimPredicate\", {\n    switchOn: xdr.lookup(\"ClaimPredicateType\"),\n    switchName: \"type\",\n    switches: [[\"claimPredicateUnconditional\", xdr[\"void\"]()], [\"claimPredicateAnd\", \"andPredicates\"], [\"claimPredicateOr\", \"orPredicates\"], [\"claimPredicateNot\", \"notPredicate\"], [\"claimPredicateBeforeAbsoluteTime\", \"absBefore\"], [\"claimPredicateBeforeRelativeTime\", \"relBefore\"]],\n    arms: {\n      andPredicates: xdr.varArray(xdr.lookup(\"ClaimPredicate\"), 2),\n      orPredicates: xdr.varArray(xdr.lookup(\"ClaimPredicate\"), 2),\n      notPredicate: xdr.option(xdr.lookup(\"ClaimPredicate\")),\n      absBefore: xdr.lookup(\"Int64\"),\n      relBefore: xdr.lookup(\"Int64\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimantType\n  //   {\n  //       CLAIMANT_TYPE_V0 = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimantType\", {\n    claimantTypeV0: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID destination;    // The account that can use this condition\n  //           ClaimPredicate predicate; // Claimable if predicate is true\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimantV0\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"predicate\", xdr.lookup(\"ClaimPredicate\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union Claimant switch (ClaimantType type)\n  //   {\n  //   case CLAIMANT_TYPE_V0:\n  //       struct\n  //       {\n  //           AccountID destination;    // The account that can use this condition\n  //           ClaimPredicate predicate; // Claimable if predicate is true\n  //       } v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Claimant\", {\n    switchOn: xdr.lookup(\"ClaimantType\"),\n    switchName: \"type\",\n    switches: [[\"claimantTypeV0\", \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"ClaimantV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimableBalanceIDType\n  //   {\n  //       CLAIMABLE_BALANCE_ID_TYPE_V0 = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimableBalanceIdType\", {\n    claimableBalanceIdTypeV0: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimableBalanceID switch (ClaimableBalanceIDType type)\n  //   {\n  //   case CLAIMABLE_BALANCE_ID_TYPE_V0:\n  //       Hash v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimableBalanceId\", {\n    switchOn: xdr.lookup(\"ClaimableBalanceIdType\"),\n    switchName: \"type\",\n    switches: [[\"claimableBalanceIdTypeV0\", \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimableBalanceFlags\n  //   {\n  //       // If set, the issuer account of the asset held by the claimable balance may\n  //       // clawback the claimable balance\n  //       CLAIMABLE_BALANCE_CLAWBACK_ENABLED_FLAG = 0x1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimableBalanceFlags\", {\n    claimableBalanceClawbackEnabledFlag: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_CLAIMABLE_BALANCE_FLAGS = 0x1;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_CLAIMABLE_BALANCE_FLAGS\", 0x1);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimableBalanceEntryExtensionV1Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimableBalanceEntryExtensionV1\n  //   {\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //\n  //       uint32 flags; // see ClaimableBalanceFlags\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimableBalanceEntryExtensionV1\", [[\"ext\", xdr.lookup(\"ClaimableBalanceEntryExtensionV1Ext\")], [\"flags\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           ClaimableBalanceEntryExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimableBalanceEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"ClaimableBalanceEntryExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimableBalanceEntry\n  //   {\n  //       // Unique identifier for this ClaimableBalanceEntry\n  //       ClaimableBalanceID balanceID;\n  //\n  //       // List of claimants with associated predicate\n  //       Claimant claimants<10>;\n  //\n  //       // Any asset including native\n  //       Asset asset;\n  //\n  //       // Amount of asset\n  //       int64 amount;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           ClaimableBalanceEntryExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimableBalanceEntry\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")], [\"claimants\", xdr.varArray(xdr.lookup(\"Claimant\"), 10)], [\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"ext\", xdr.lookup(\"ClaimableBalanceEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolConstantProductParameters\n  //   {\n  //       Asset assetA; // assetA < assetB\n  //       Asset assetB;\n  //       int32 fee; // Fee is in basis points, so the actual rate is (fee/100)%\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolConstantProductParameters\", [[\"assetA\", xdr.lookup(\"Asset\")], [\"assetB\", xdr.lookup(\"Asset\")], [\"fee\", xdr.lookup(\"Int32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               LiquidityPoolConstantProductParameters params;\n  //\n  //               int64 reserveA;        // amount of A in the pool\n  //               int64 reserveB;        // amount of B in the pool\n  //               int64 totalPoolShares; // total number of pool shares issued\n  //               int64 poolSharesTrustLineCount; // number of trust lines for the\n  //                                               // associated pool shares\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolEntryConstantProduct\", [[\"params\", xdr.lookup(\"LiquidityPoolConstantProductParameters\")], [\"reserveA\", xdr.lookup(\"Int64\")], [\"reserveB\", xdr.lookup(\"Int64\")], [\"totalPoolShares\", xdr.lookup(\"Int64\")], [\"poolSharesTrustLineCount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (LiquidityPoolType type)\n  //       {\n  //       case LIQUIDITY_POOL_CONSTANT_PRODUCT:\n  //           struct\n  //           {\n  //               LiquidityPoolConstantProductParameters params;\n  //\n  //               int64 reserveA;        // amount of A in the pool\n  //               int64 reserveB;        // amount of B in the pool\n  //               int64 totalPoolShares; // total number of pool shares issued\n  //               int64 poolSharesTrustLineCount; // number of trust lines for the\n  //                                               // associated pool shares\n  //           } constantProduct;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolEntryBody\", {\n    switchOn: xdr.lookup(\"LiquidityPoolType\"),\n    switchName: \"type\",\n    switches: [[\"liquidityPoolConstantProduct\", \"constantProduct\"]],\n    arms: {\n      constantProduct: xdr.lookup(\"LiquidityPoolEntryConstantProduct\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolEntry\n  //   {\n  //       PoolID liquidityPoolID;\n  //\n  //       union switch (LiquidityPoolType type)\n  //       {\n  //       case LIQUIDITY_POOL_CONSTANT_PRODUCT:\n  //           struct\n  //           {\n  //               LiquidityPoolConstantProductParameters params;\n  //\n  //               int64 reserveA;        // amount of A in the pool\n  //               int64 reserveB;        // amount of B in the pool\n  //               int64 totalPoolShares; // total number of pool shares issued\n  //               int64 poolSharesTrustLineCount; // number of trust lines for the\n  //                                               // associated pool shares\n  //           } constantProduct;\n  //       }\n  //       body;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolEntry\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"body\", xdr.lookup(\"LiquidityPoolEntryBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ContractDataDurability {\n  //       TEMPORARY = 0,\n  //       PERSISTENT = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ContractDataDurability\", {\n    temporary: 0,\n    persistent: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ContractDataEntry {\n  //       ExtensionPoint ext;\n  //\n  //       SCAddress contract;\n  //       SCVal key;\n  //       ContractDataDurability durability;\n  //       SCVal val;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractDataEntry\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"contract\", xdr.lookup(\"ScAddress\")], [\"key\", xdr.lookup(\"ScVal\")], [\"durability\", xdr.lookup(\"ContractDataDurability\")], [\"val\", xdr.lookup(\"ScVal\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ContractCodeCostInputs {\n  //       ExtensionPoint ext;\n  //       uint32 nInstructions;\n  //       uint32 nFunctions;\n  //       uint32 nGlobals;\n  //       uint32 nTableEntries;\n  //       uint32 nTypes;\n  //       uint32 nDataSegments;\n  //       uint32 nElemSegments;\n  //       uint32 nImports;\n  //       uint32 nExports;\n  //       uint32 nDataSegmentBytes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractCodeCostInputs\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"nInstructions\", xdr.lookup(\"Uint32\")], [\"nFunctions\", xdr.lookup(\"Uint32\")], [\"nGlobals\", xdr.lookup(\"Uint32\")], [\"nTableEntries\", xdr.lookup(\"Uint32\")], [\"nTypes\", xdr.lookup(\"Uint32\")], [\"nDataSegments\", xdr.lookup(\"Uint32\")], [\"nElemSegments\", xdr.lookup(\"Uint32\")], [\"nImports\", xdr.lookup(\"Uint32\")], [\"nExports\", xdr.lookup(\"Uint32\")], [\"nDataSegmentBytes\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //               {\n  //                   ExtensionPoint ext;\n  //                   ContractCodeCostInputs costInputs;\n  //               }\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractCodeEntryV1\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"costInputs\", xdr.lookup(\"ContractCodeCostInputs\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //           case 0:\n  //               void;\n  //           case 1:\n  //               struct\n  //               {\n  //                   ExtensionPoint ext;\n  //                   ContractCodeCostInputs costInputs;\n  //               } v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ContractCodeEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"ContractCodeEntryV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ContractCodeEntry {\n  //       union switch (int v)\n  //       {\n  //           case 0:\n  //               void;\n  //           case 1:\n  //               struct\n  //               {\n  //                   ExtensionPoint ext;\n  //                   ContractCodeCostInputs costInputs;\n  //               } v1;\n  //       } ext;\n  //\n  //       Hash hash;\n  //       opaque code<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractCodeEntry\", [[\"ext\", xdr.lookup(\"ContractCodeEntryExt\")], [\"hash\", xdr.lookup(\"Hash\")], [\"code\", xdr.varOpaque()]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TTLEntry {\n  //       // Hash of the LedgerKey that is associated with this TTLEntry\n  //       Hash keyHash;\n  //       uint32 liveUntilLedgerSeq;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TtlEntry\", [[\"keyHash\", xdr.lookup(\"Hash\")], [\"liveUntilLedgerSeq\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryExtensionV1Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerEntryExtensionV1\n  //   {\n  //       SponsorshipDescriptor sponsoringID;\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerEntryExtensionV1\", [[\"sponsoringId\", xdr.lookup(\"SponsorshipDescriptor\")], [\"ext\", xdr.lookup(\"LedgerEntryExtensionV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (LedgerEntryType type)\n  //       {\n  //       case ACCOUNT:\n  //           AccountEntry account;\n  //       case TRUSTLINE:\n  //           TrustLineEntry trustLine;\n  //       case OFFER:\n  //           OfferEntry offer;\n  //       case DATA:\n  //           DataEntry data;\n  //       case CLAIMABLE_BALANCE:\n  //           ClaimableBalanceEntry claimableBalance;\n  //       case LIQUIDITY_POOL:\n  //           LiquidityPoolEntry liquidityPool;\n  //       case CONTRACT_DATA:\n  //           ContractDataEntry contractData;\n  //       case CONTRACT_CODE:\n  //           ContractCodeEntry contractCode;\n  //       case CONFIG_SETTING:\n  //           ConfigSettingEntry configSetting;\n  //       case TTL:\n  //           TTLEntry ttl;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryData\", {\n    switchOn: xdr.lookup(\"LedgerEntryType\"),\n    switchName: \"type\",\n    switches: [[\"account\", \"account\"], [\"trustline\", \"trustLine\"], [\"offer\", \"offer\"], [\"data\", \"data\"], [\"claimableBalance\", \"claimableBalance\"], [\"liquidityPool\", \"liquidityPool\"], [\"contractData\", \"contractData\"], [\"contractCode\", \"contractCode\"], [\"configSetting\", \"configSetting\"], [\"ttl\", \"ttl\"]],\n    arms: {\n      account: xdr.lookup(\"AccountEntry\"),\n      trustLine: xdr.lookup(\"TrustLineEntry\"),\n      offer: xdr.lookup(\"OfferEntry\"),\n      data: xdr.lookup(\"DataEntry\"),\n      claimableBalance: xdr.lookup(\"ClaimableBalanceEntry\"),\n      liquidityPool: xdr.lookup(\"LiquidityPoolEntry\"),\n      contractData: xdr.lookup(\"ContractDataEntry\"),\n      contractCode: xdr.lookup(\"ContractCodeEntry\"),\n      configSetting: xdr.lookup(\"ConfigSettingEntry\"),\n      ttl: xdr.lookup(\"TtlEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerEntryExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"LedgerEntryExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerEntry\n  //   {\n  //       uint32 lastModifiedLedgerSeq; // ledger the LedgerEntry was last changed\n  //\n  //       union switch (LedgerEntryType type)\n  //       {\n  //       case ACCOUNT:\n  //           AccountEntry account;\n  //       case TRUSTLINE:\n  //           TrustLineEntry trustLine;\n  //       case OFFER:\n  //           OfferEntry offer;\n  //       case DATA:\n  //           DataEntry data;\n  //       case CLAIMABLE_BALANCE:\n  //           ClaimableBalanceEntry claimableBalance;\n  //       case LIQUIDITY_POOL:\n  //           LiquidityPoolEntry liquidityPool;\n  //       case CONTRACT_DATA:\n  //           ContractDataEntry contractData;\n  //       case CONTRACT_CODE:\n  //           ContractCodeEntry contractCode;\n  //       case CONFIG_SETTING:\n  //           ConfigSettingEntry configSetting;\n  //       case TTL:\n  //           TTLEntry ttl;\n  //       }\n  //       data;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerEntryExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerEntry\", [[\"lastModifiedLedgerSeq\", xdr.lookup(\"Uint32\")], [\"data\", xdr.lookup(\"LedgerEntryData\")], [\"ext\", xdr.lookup(\"LedgerEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyAccount\", [[\"accountId\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //           TrustLineAsset asset;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyTrustLine\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"TrustLineAsset\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID sellerID;\n  //           int64 offerID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyOffer\", [[\"sellerId\", xdr.lookup(\"AccountId\")], [\"offerId\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //           string64 dataName;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyData\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"dataName\", xdr.lookup(\"String64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ClaimableBalanceID balanceID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyClaimableBalance\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           PoolID liquidityPoolID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyLiquidityPool\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           SCAddress contract;\n  //           SCVal key;\n  //           ContractDataDurability durability;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyContractData\", [[\"contract\", xdr.lookup(\"ScAddress\")], [\"key\", xdr.lookup(\"ScVal\")], [\"durability\", xdr.lookup(\"ContractDataDurability\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           Hash hash;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyContractCode\", [[\"hash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ConfigSettingID configSettingID;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyConfigSetting\", [[\"configSettingId\", xdr.lookup(\"ConfigSettingId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           // Hash of the LedgerKey that is associated with this TTLEntry\n  //           Hash keyHash;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerKeyTtl\", [[\"keyHash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerKey switch (LedgerEntryType type)\n  //   {\n  //   case ACCOUNT:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //       } account;\n  //\n  //   case TRUSTLINE:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //           TrustLineAsset asset;\n  //       } trustLine;\n  //\n  //   case OFFER:\n  //       struct\n  //       {\n  //           AccountID sellerID;\n  //           int64 offerID;\n  //       } offer;\n  //\n  //   case DATA:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //           string64 dataName;\n  //       } data;\n  //\n  //   case CLAIMABLE_BALANCE:\n  //       struct\n  //       {\n  //           ClaimableBalanceID balanceID;\n  //       } claimableBalance;\n  //\n  //   case LIQUIDITY_POOL:\n  //       struct\n  //       {\n  //           PoolID liquidityPoolID;\n  //       } liquidityPool;\n  //   case CONTRACT_DATA:\n  //       struct\n  //       {\n  //           SCAddress contract;\n  //           SCVal key;\n  //           ContractDataDurability durability;\n  //       } contractData;\n  //   case CONTRACT_CODE:\n  //       struct\n  //       {\n  //           Hash hash;\n  //       } contractCode;\n  //   case CONFIG_SETTING:\n  //       struct\n  //       {\n  //           ConfigSettingID configSettingID;\n  //       } configSetting;\n  //   case TTL:\n  //       struct\n  //       {\n  //           // Hash of the LedgerKey that is associated with this TTLEntry\n  //           Hash keyHash;\n  //       } ttl;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerKey\", {\n    switchOn: xdr.lookup(\"LedgerEntryType\"),\n    switchName: \"type\",\n    switches: [[\"account\", \"account\"], [\"trustline\", \"trustLine\"], [\"offer\", \"offer\"], [\"data\", \"data\"], [\"claimableBalance\", \"claimableBalance\"], [\"liquidityPool\", \"liquidityPool\"], [\"contractData\", \"contractData\"], [\"contractCode\", \"contractCode\"], [\"configSetting\", \"configSetting\"], [\"ttl\", \"ttl\"]],\n    arms: {\n      account: xdr.lookup(\"LedgerKeyAccount\"),\n      trustLine: xdr.lookup(\"LedgerKeyTrustLine\"),\n      offer: xdr.lookup(\"LedgerKeyOffer\"),\n      data: xdr.lookup(\"LedgerKeyData\"),\n      claimableBalance: xdr.lookup(\"LedgerKeyClaimableBalance\"),\n      liquidityPool: xdr.lookup(\"LedgerKeyLiquidityPool\"),\n      contractData: xdr.lookup(\"LedgerKeyContractData\"),\n      contractCode: xdr.lookup(\"LedgerKeyContractCode\"),\n      configSetting: xdr.lookup(\"LedgerKeyConfigSetting\"),\n      ttl: xdr.lookup(\"LedgerKeyTtl\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum EnvelopeType\n  //   {\n  //       ENVELOPE_TYPE_TX_V0 = 0,\n  //       ENVELOPE_TYPE_SCP = 1,\n  //       ENVELOPE_TYPE_TX = 2,\n  //       ENVELOPE_TYPE_AUTH = 3,\n  //       ENVELOPE_TYPE_SCPVALUE = 4,\n  //       ENVELOPE_TYPE_TX_FEE_BUMP = 5,\n  //       ENVELOPE_TYPE_OP_ID = 6,\n  //       ENVELOPE_TYPE_POOL_REVOKE_OP_ID = 7,\n  //       ENVELOPE_TYPE_CONTRACT_ID = 8,\n  //       ENVELOPE_TYPE_SOROBAN_AUTHORIZATION = 9\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"EnvelopeType\", {\n    envelopeTypeTxV0: 0,\n    envelopeTypeScp: 1,\n    envelopeTypeTx: 2,\n    envelopeTypeAuth: 3,\n    envelopeTypeScpvalue: 4,\n    envelopeTypeTxFeeBump: 5,\n    envelopeTypeOpId: 6,\n    envelopeTypePoolRevokeOpId: 7,\n    envelopeTypeContractId: 8,\n    envelopeTypeSorobanAuthorization: 9\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BucketListType\n  //   {\n  //       LIVE = 0,\n  //       HOT_ARCHIVE = 1,\n  //       COLD_ARCHIVE = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"BucketListType\", {\n    live: 0,\n    hotArchive: 1,\n    coldArchive: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BucketEntryType\n  //   {\n  //       METAENTRY =\n  //           -1, // At-and-after protocol 11: bucket metadata, should come first.\n  //       LIVEENTRY = 0, // Before protocol 11: created-or-updated;\n  //                      // At-and-after protocol 11: only updated.\n  //       DEADENTRY = 1,\n  //       INITENTRY = 2 // At-and-after protocol 11: only created.\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"BucketEntryType\", {\n    metaentry: -1,\n    liveentry: 0,\n    deadentry: 1,\n    initentry: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum HotArchiveBucketEntryType\n  //   {\n  //       HOT_ARCHIVE_METAENTRY = -1, // Bucket metadata, should come first.\n  //       HOT_ARCHIVE_ARCHIVED = 0,   // Entry is Archived\n  //       HOT_ARCHIVE_LIVE = 1,       // Entry was previously HOT_ARCHIVE_ARCHIVED, or HOT_ARCHIVE_DELETED, but\n  //                                   // has been added back to the live BucketList.\n  //                                   // Does not need to be persisted.\n  //       HOT_ARCHIVE_DELETED = 2     // Entry deleted (Note: must be persisted in archive)\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"HotArchiveBucketEntryType\", {\n    hotArchiveMetaentry: -1,\n    hotArchiveArchived: 0,\n    hotArchiveLive: 1,\n    hotArchiveDeleted: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ColdArchiveBucketEntryType\n  //   {\n  //       COLD_ARCHIVE_METAENTRY     = -1,  // Bucket metadata, should come first.\n  //       COLD_ARCHIVE_ARCHIVED_LEAF = 0,   // Full LedgerEntry that was archived during the epoch\n  //       COLD_ARCHIVE_DELETED_LEAF  = 1,   // LedgerKey that was deleted during the epoch\n  //       COLD_ARCHIVE_BOUNDARY_LEAF = 2,   // Dummy leaf representing low/high bound\n  //       COLD_ARCHIVE_HASH          = 3    // Intermediary Merkle hash entry\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ColdArchiveBucketEntryType\", {\n    coldArchiveMetaentry: -1,\n    coldArchiveArchivedLeaf: 0,\n    coldArchiveDeletedLeaf: 1,\n    coldArchiveBoundaryLeaf: 2,\n    coldArchiveHash: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           BucketListType bucketListType;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"BucketMetadataExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"bucketListType\"]],\n    arms: {\n      bucketListType: xdr.lookup(\"BucketListType\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct BucketMetadata\n  //   {\n  //       // Indicates the protocol version used to create / merge this bucket.\n  //       uint32 ledgerVersion;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           BucketListType bucketListType;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"BucketMetadata\", [[\"ledgerVersion\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"BucketMetadataExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union BucketEntry switch (BucketEntryType type)\n  //   {\n  //   case LIVEENTRY:\n  //   case INITENTRY:\n  //       LedgerEntry liveEntry;\n  //\n  //   case DEADENTRY:\n  //       LedgerKey deadEntry;\n  //   case METAENTRY:\n  //       BucketMetadata metaEntry;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"BucketEntry\", {\n    switchOn: xdr.lookup(\"BucketEntryType\"),\n    switchName: \"type\",\n    switches: [[\"liveentry\", \"liveEntry\"], [\"initentry\", \"liveEntry\"], [\"deadentry\", \"deadEntry\"], [\"metaentry\", \"metaEntry\"]],\n    arms: {\n      liveEntry: xdr.lookup(\"LedgerEntry\"),\n      deadEntry: xdr.lookup(\"LedgerKey\"),\n      metaEntry: xdr.lookup(\"BucketMetadata\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union HotArchiveBucketEntry switch (HotArchiveBucketEntryType type)\n  //   {\n  //   case HOT_ARCHIVE_ARCHIVED:\n  //       LedgerEntry archivedEntry;\n  //\n  //   case HOT_ARCHIVE_LIVE:\n  //   case HOT_ARCHIVE_DELETED:\n  //       LedgerKey key;\n  //   case HOT_ARCHIVE_METAENTRY:\n  //       BucketMetadata metaEntry;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"HotArchiveBucketEntry\", {\n    switchOn: xdr.lookup(\"HotArchiveBucketEntryType\"),\n    switchName: \"type\",\n    switches: [[\"hotArchiveArchived\", \"archivedEntry\"], [\"hotArchiveLive\", \"key\"], [\"hotArchiveDeleted\", \"key\"], [\"hotArchiveMetaentry\", \"metaEntry\"]],\n    arms: {\n      archivedEntry: xdr.lookup(\"LedgerEntry\"),\n      key: xdr.lookup(\"LedgerKey\"),\n      metaEntry: xdr.lookup(\"BucketMetadata\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ColdArchiveArchivedLeaf\n  //   {\n  //       uint32 index;\n  //       LedgerEntry archivedEntry;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ColdArchiveArchivedLeaf\", [[\"index\", xdr.lookup(\"Uint32\")], [\"archivedEntry\", xdr.lookup(\"LedgerEntry\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ColdArchiveDeletedLeaf\n  //   {\n  //       uint32 index;\n  //       LedgerKey deletedKey;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ColdArchiveDeletedLeaf\", [[\"index\", xdr.lookup(\"Uint32\")], [\"deletedKey\", xdr.lookup(\"LedgerKey\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ColdArchiveBoundaryLeaf\n  //   {\n  //       uint32 index;\n  //       bool isLowerBound;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ColdArchiveBoundaryLeaf\", [[\"index\", xdr.lookup(\"Uint32\")], [\"isLowerBound\", xdr.bool()]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ColdArchiveHashEntry\n  //   {\n  //       uint32 index;\n  //       uint32 level;\n  //       Hash hash;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ColdArchiveHashEntry\", [[\"index\", xdr.lookup(\"Uint32\")], [\"level\", xdr.lookup(\"Uint32\")], [\"hash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ColdArchiveBucketEntry switch (ColdArchiveBucketEntryType type)\n  //   {\n  //   case COLD_ARCHIVE_METAENTRY:\n  //       BucketMetadata metaEntry;\n  //   case COLD_ARCHIVE_ARCHIVED_LEAF:\n  //       ColdArchiveArchivedLeaf archivedLeaf;\n  //   case COLD_ARCHIVE_DELETED_LEAF:\n  //       ColdArchiveDeletedLeaf deletedLeaf;\n  //   case COLD_ARCHIVE_BOUNDARY_LEAF:\n  //       ColdArchiveBoundaryLeaf boundaryLeaf;\n  //   case COLD_ARCHIVE_HASH:\n  //       ColdArchiveHashEntry hashEntry;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ColdArchiveBucketEntry\", {\n    switchOn: xdr.lookup(\"ColdArchiveBucketEntryType\"),\n    switchName: \"type\",\n    switches: [[\"coldArchiveMetaentry\", \"metaEntry\"], [\"coldArchiveArchivedLeaf\", \"archivedLeaf\"], [\"coldArchiveDeletedLeaf\", \"deletedLeaf\"], [\"coldArchiveBoundaryLeaf\", \"boundaryLeaf\"], [\"coldArchiveHash\", \"hashEntry\"]],\n    arms: {\n      metaEntry: xdr.lookup(\"BucketMetadata\"),\n      archivedLeaf: xdr.lookup(\"ColdArchiveArchivedLeaf\"),\n      deletedLeaf: xdr.lookup(\"ColdArchiveDeletedLeaf\"),\n      boundaryLeaf: xdr.lookup(\"ColdArchiveBoundaryLeaf\"),\n      hashEntry: xdr.lookup(\"ColdArchiveHashEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque UpgradeType<128>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"UpgradeType\", xdr.varOpaque(128));\n\n  // === xdr source ============================================================\n  //\n  //   enum StellarValueType\n  //   {\n  //       STELLAR_VALUE_BASIC = 0,\n  //       STELLAR_VALUE_SIGNED = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"StellarValueType\", {\n    stellarValueBasic: 0,\n    stellarValueSigned: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseValueSignature\n  //   {\n  //       NodeID nodeID;       // which node introduced the value\n  //       Signature signature; // nodeID's signature\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseValueSignature\", [[\"nodeId\", xdr.lookup(\"NodeId\")], [\"signature\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (StellarValueType v)\n  //       {\n  //       case STELLAR_VALUE_BASIC:\n  //           void;\n  //       case STELLAR_VALUE_SIGNED:\n  //           LedgerCloseValueSignature lcValueSignature;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"StellarValueExt\", {\n    switchOn: xdr.lookup(\"StellarValueType\"),\n    switchName: \"v\",\n    switches: [[\"stellarValueBasic\", xdr[\"void\"]()], [\"stellarValueSigned\", \"lcValueSignature\"]],\n    arms: {\n      lcValueSignature: xdr.lookup(\"LedgerCloseValueSignature\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct StellarValue\n  //   {\n  //       Hash txSetHash;      // transaction set to apply to previous ledger\n  //       TimePoint closeTime; // network close time\n  //\n  //       // upgrades to apply to the previous ledger (usually empty)\n  //       // this is a vector of encoded 'LedgerUpgrade' so that nodes can drop\n  //       // unknown steps during consensus if needed.\n  //       // see notes below on 'LedgerUpgrade' for more detail\n  //       // max size is dictated by number of upgrade types (+ room for future)\n  //       UpgradeType upgrades<6>;\n  //\n  //       // reserved for future use\n  //       union switch (StellarValueType v)\n  //       {\n  //       case STELLAR_VALUE_BASIC:\n  //           void;\n  //       case STELLAR_VALUE_SIGNED:\n  //           LedgerCloseValueSignature lcValueSignature;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"StellarValue\", [[\"txSetHash\", xdr.lookup(\"Hash\")], [\"closeTime\", xdr.lookup(\"TimePoint\")], [\"upgrades\", xdr.varArray(xdr.lookup(\"UpgradeType\"), 6)], [\"ext\", xdr.lookup(\"StellarValueExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const MASK_LEDGER_HEADER_FLAGS = 0x7;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MASK_LEDGER_HEADER_FLAGS\", 0x7);\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerHeaderFlags\n  //   {\n  //       DISABLE_LIQUIDITY_POOL_TRADING_FLAG = 0x1,\n  //       DISABLE_LIQUIDITY_POOL_DEPOSIT_FLAG = 0x2,\n  //       DISABLE_LIQUIDITY_POOL_WITHDRAWAL_FLAG = 0x4\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LedgerHeaderFlags\", {\n    disableLiquidityPoolTradingFlag: 1,\n    disableLiquidityPoolDepositFlag: 2,\n    disableLiquidityPoolWithdrawalFlag: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerHeaderExtensionV1Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerHeaderExtensionV1\n  //   {\n  //       uint32 flags; // LedgerHeaderFlags\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerHeaderExtensionV1\", [[\"flags\", xdr.lookup(\"Uint32\")], [\"ext\", xdr.lookup(\"LedgerHeaderExtensionV1Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerHeaderExtensionV1 v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerHeaderExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"LedgerHeaderExtensionV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerHeader\n  //   {\n  //       uint32 ledgerVersion;    // the protocol version of the ledger\n  //       Hash previousLedgerHash; // hash of the previous ledger header\n  //       StellarValue scpValue;   // what consensus agreed to\n  //       Hash txSetResultHash;    // the TransactionResultSet that led to this ledger\n  //       Hash bucketListHash;     // hash of the ledger state\n  //\n  //       uint32 ledgerSeq; // sequence number of this ledger\n  //\n  //       int64 totalCoins; // total number of stroops in existence.\n  //                         // 10,000,000 stroops in 1 XLM\n  //\n  //       int64 feePool;       // fees burned since last inflation run\n  //       uint32 inflationSeq; // inflation sequence number\n  //\n  //       uint64 idPool; // last used global ID, used for generating objects\n  //\n  //       uint32 baseFee;     // base fee per operation in stroops\n  //       uint32 baseReserve; // account base reserve in stroops\n  //\n  //       uint32 maxTxSetSize; // maximum size a transaction set can be\n  //\n  //       Hash skipList[4]; // hashes of ledgers in the past. allows you to jump back\n  //                         // in time without walking the chain back ledger by ledger\n  //                         // each slot contains the oldest ledger that is mod of\n  //                         // either 50  5000  50000 or 500000 depending on index\n  //                         // skipList[0] mod(50), skipList[1] mod(5000), etc\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           LedgerHeaderExtensionV1 v1;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerHeader\", [[\"ledgerVersion\", xdr.lookup(\"Uint32\")], [\"previousLedgerHash\", xdr.lookup(\"Hash\")], [\"scpValue\", xdr.lookup(\"StellarValue\")], [\"txSetResultHash\", xdr.lookup(\"Hash\")], [\"bucketListHash\", xdr.lookup(\"Hash\")], [\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"totalCoins\", xdr.lookup(\"Int64\")], [\"feePool\", xdr.lookup(\"Int64\")], [\"inflationSeq\", xdr.lookup(\"Uint32\")], [\"idPool\", xdr.lookup(\"Uint64\")], [\"baseFee\", xdr.lookup(\"Uint32\")], [\"baseReserve\", xdr.lookup(\"Uint32\")], [\"maxTxSetSize\", xdr.lookup(\"Uint32\")], [\"skipList\", xdr.array(xdr.lookup(\"Hash\"), 4)], [\"ext\", xdr.lookup(\"LedgerHeaderExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerUpgradeType\n  //   {\n  //       LEDGER_UPGRADE_VERSION = 1,\n  //       LEDGER_UPGRADE_BASE_FEE = 2,\n  //       LEDGER_UPGRADE_MAX_TX_SET_SIZE = 3,\n  //       LEDGER_UPGRADE_BASE_RESERVE = 4,\n  //       LEDGER_UPGRADE_FLAGS = 5,\n  //       LEDGER_UPGRADE_CONFIG = 6,\n  //       LEDGER_UPGRADE_MAX_SOROBAN_TX_SET_SIZE = 7\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LedgerUpgradeType\", {\n    ledgerUpgradeVersion: 1,\n    ledgerUpgradeBaseFee: 2,\n    ledgerUpgradeMaxTxSetSize: 3,\n    ledgerUpgradeBaseReserve: 4,\n    ledgerUpgradeFlags: 5,\n    ledgerUpgradeConfig: 6,\n    ledgerUpgradeMaxSorobanTxSetSize: 7\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigUpgradeSetKey {\n  //       Hash contractID;\n  //       Hash contentHash;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigUpgradeSetKey\", [[\"contractId\", xdr.lookup(\"Hash\")], [\"contentHash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerUpgrade switch (LedgerUpgradeType type)\n  //   {\n  //   case LEDGER_UPGRADE_VERSION:\n  //       uint32 newLedgerVersion; // update ledgerVersion\n  //   case LEDGER_UPGRADE_BASE_FEE:\n  //       uint32 newBaseFee; // update baseFee\n  //   case LEDGER_UPGRADE_MAX_TX_SET_SIZE:\n  //       uint32 newMaxTxSetSize; // update maxTxSetSize\n  //   case LEDGER_UPGRADE_BASE_RESERVE:\n  //       uint32 newBaseReserve; // update baseReserve\n  //   case LEDGER_UPGRADE_FLAGS:\n  //       uint32 newFlags; // update flags\n  //   case LEDGER_UPGRADE_CONFIG:\n  //       // Update arbitrary `ConfigSetting` entries identified by the key.\n  //       ConfigUpgradeSetKey newConfig;\n  //   case LEDGER_UPGRADE_MAX_SOROBAN_TX_SET_SIZE:\n  //       // Update ConfigSettingContractExecutionLanesV0.ledgerMaxTxCount without\n  //       // using `LEDGER_UPGRADE_CONFIG`.\n  //       uint32 newMaxSorobanTxSetSize;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerUpgrade\", {\n    switchOn: xdr.lookup(\"LedgerUpgradeType\"),\n    switchName: \"type\",\n    switches: [[\"ledgerUpgradeVersion\", \"newLedgerVersion\"], [\"ledgerUpgradeBaseFee\", \"newBaseFee\"], [\"ledgerUpgradeMaxTxSetSize\", \"newMaxTxSetSize\"], [\"ledgerUpgradeBaseReserve\", \"newBaseReserve\"], [\"ledgerUpgradeFlags\", \"newFlags\"], [\"ledgerUpgradeConfig\", \"newConfig\"], [\"ledgerUpgradeMaxSorobanTxSetSize\", \"newMaxSorobanTxSetSize\"]],\n    arms: {\n      newLedgerVersion: xdr.lookup(\"Uint32\"),\n      newBaseFee: xdr.lookup(\"Uint32\"),\n      newMaxTxSetSize: xdr.lookup(\"Uint32\"),\n      newBaseReserve: xdr.lookup(\"Uint32\"),\n      newFlags: xdr.lookup(\"Uint32\"),\n      newConfig: xdr.lookup(\"ConfigUpgradeSetKey\"),\n      newMaxSorobanTxSetSize: xdr.lookup(\"Uint32\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigUpgradeSet {\n  //       ConfigSettingEntry updatedEntry<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigUpgradeSet\", [[\"updatedEntry\", xdr.varArray(xdr.lookup(\"ConfigSettingEntry\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum TxSetComponentType\n  //   {\n  //     // txs with effective fee <= bid derived from a base fee (if any).\n  //     // If base fee is not specified, no discount is applied.\n  //     TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"TxSetComponentType\", {\n    txsetCompTxsMaybeDiscountedFee: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //     {\n  //       int64* baseFee;\n  //       TransactionEnvelope txs<>;\n  //     }\n  //\n  // ===========================================================================\n  xdr.struct(\"TxSetComponentTxsMaybeDiscountedFee\", [[\"baseFee\", xdr.option(xdr.lookup(\"Int64\"))], [\"txes\", xdr.varArray(xdr.lookup(\"TransactionEnvelope\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union TxSetComponent switch (TxSetComponentType type)\n  //   {\n  //   case TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE:\n  //     struct\n  //     {\n  //       int64* baseFee;\n  //       TransactionEnvelope txs<>;\n  //     } txsMaybeDiscountedFee;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TxSetComponent\", {\n    switchOn: xdr.lookup(\"TxSetComponentType\"),\n    switchName: \"type\",\n    switches: [[\"txsetCompTxsMaybeDiscountedFee\", \"txsMaybeDiscountedFee\"]],\n    arms: {\n      txsMaybeDiscountedFee: xdr.lookup(\"TxSetComponentTxsMaybeDiscountedFee\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union TransactionPhase switch (int v)\n  //   {\n  //   case 0:\n  //       TxSetComponent v0Components<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionPhase\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, \"v0Components\"]],\n    arms: {\n      v0Components: xdr.varArray(xdr.lookup(\"TxSetComponent\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionSet\n  //   {\n  //       Hash previousLedgerHash;\n  //       TransactionEnvelope txs<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionSet\", [[\"previousLedgerHash\", xdr.lookup(\"Hash\")], [\"txes\", xdr.varArray(xdr.lookup(\"TransactionEnvelope\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionSetV1\n  //   {\n  //       Hash previousLedgerHash;\n  //       TransactionPhase phases<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionSetV1\", [[\"previousLedgerHash\", xdr.lookup(\"Hash\")], [\"phases\", xdr.varArray(xdr.lookup(\"TransactionPhase\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union GeneralizedTransactionSet switch (int v)\n  //   {\n  //   // We consider the legacy TransactionSet to be v0.\n  //   case 1:\n  //       TransactionSetV1 v1TxSet;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"GeneralizedTransactionSet\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[1, \"v1TxSet\"]],\n    arms: {\n      v1TxSet: xdr.lookup(\"TransactionSetV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResultPair\n  //   {\n  //       Hash transactionHash;\n  //       TransactionResult result; // result for the transaction\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResultPair\", [[\"transactionHash\", xdr.lookup(\"Hash\")], [\"result\", xdr.lookup(\"TransactionResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResultSet\n  //   {\n  //       TransactionResultPair results<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResultSet\", [[\"results\", xdr.varArray(xdr.lookup(\"TransactionResultPair\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           GeneralizedTransactionSet generalizedTxSet;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionHistoryEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"generalizedTxSet\"]],\n    arms: {\n      generalizedTxSet: xdr.lookup(\"GeneralizedTransactionSet\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionHistoryEntry\n  //   {\n  //       uint32 ledgerSeq;\n  //       TransactionSet txSet;\n  //\n  //       // when v != 0, txSet must be empty\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           GeneralizedTransactionSet generalizedTxSet;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionHistoryEntry\", [[\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"txSet\", xdr.lookup(\"TransactionSet\")], [\"ext\", xdr.lookup(\"TransactionHistoryEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionHistoryResultEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionHistoryResultEntry\n  //   {\n  //       uint32 ledgerSeq;\n  //       TransactionResultSet txResultSet;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionHistoryResultEntry\", [[\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"txResultSet\", xdr.lookup(\"TransactionResultSet\")], [\"ext\", xdr.lookup(\"TransactionHistoryResultEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerHeaderHistoryEntryExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerHeaderHistoryEntry\n  //   {\n  //       Hash hash;\n  //       LedgerHeader header;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerHeaderHistoryEntry\", [[\"hash\", xdr.lookup(\"Hash\")], [\"header\", xdr.lookup(\"LedgerHeader\")], [\"ext\", xdr.lookup(\"LedgerHeaderHistoryEntryExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerSCPMessages\n  //   {\n  //       uint32 ledgerSeq;\n  //       SCPEnvelope messages<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerScpMessages\", [[\"ledgerSeq\", xdr.lookup(\"Uint32\")], [\"messages\", xdr.varArray(xdr.lookup(\"ScpEnvelope\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCPHistoryEntryV0\n  //   {\n  //       SCPQuorumSet quorumSets<>; // additional quorum sets used by ledgerMessages\n  //       LedgerSCPMessages ledgerMessages;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScpHistoryEntryV0\", [[\"quorumSets\", xdr.varArray(xdr.lookup(\"ScpQuorumSet\"), 2147483647)], [\"ledgerMessages\", xdr.lookup(\"LedgerScpMessages\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SCPHistoryEntry switch (int v)\n  //   {\n  //   case 0:\n  //       SCPHistoryEntryV0 v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScpHistoryEntry\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"ScpHistoryEntryV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LedgerEntryChangeType\n  //   {\n  //       LEDGER_ENTRY_CREATED = 0, // entry was added to the ledger\n  //       LEDGER_ENTRY_UPDATED = 1, // entry was modified in the ledger\n  //       LEDGER_ENTRY_REMOVED = 2, // entry was removed from the ledger\n  //       LEDGER_ENTRY_STATE = 3    // value of the entry\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LedgerEntryChangeType\", {\n    ledgerEntryCreated: 0,\n    ledgerEntryUpdated: 1,\n    ledgerEntryRemoved: 2,\n    ledgerEntryState: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerEntryChange switch (LedgerEntryChangeType type)\n  //   {\n  //   case LEDGER_ENTRY_CREATED:\n  //       LedgerEntry created;\n  //   case LEDGER_ENTRY_UPDATED:\n  //       LedgerEntry updated;\n  //   case LEDGER_ENTRY_REMOVED:\n  //       LedgerKey removed;\n  //   case LEDGER_ENTRY_STATE:\n  //       LedgerEntry state;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerEntryChange\", {\n    switchOn: xdr.lookup(\"LedgerEntryChangeType\"),\n    switchName: \"type\",\n    switches: [[\"ledgerEntryCreated\", \"created\"], [\"ledgerEntryUpdated\", \"updated\"], [\"ledgerEntryRemoved\", \"removed\"], [\"ledgerEntryState\", \"state\"]],\n    arms: {\n      created: xdr.lookup(\"LedgerEntry\"),\n      updated: xdr.lookup(\"LedgerEntry\"),\n      removed: xdr.lookup(\"LedgerKey\"),\n      state: xdr.lookup(\"LedgerEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   typedef LedgerEntryChange LedgerEntryChanges<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"LedgerEntryChanges\", xdr.varArray(xdr.lookup(\"LedgerEntryChange\"), 2147483647));\n\n  // === xdr source ============================================================\n  //\n  //   struct OperationMeta\n  //   {\n  //       LedgerEntryChanges changes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"OperationMeta\", [[\"changes\", xdr.lookup(\"LedgerEntryChanges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionMetaV1\n  //   {\n  //       LedgerEntryChanges txChanges; // tx level changes if any\n  //       OperationMeta operations<>;   // meta for each operation\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionMetaV1\", [[\"txChanges\", xdr.lookup(\"LedgerEntryChanges\")], [\"operations\", xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionMetaV2\n  //   {\n  //       LedgerEntryChanges txChangesBefore; // tx level changes before operations\n  //                                           // are applied if any\n  //       OperationMeta operations<>;         // meta for each operation\n  //       LedgerEntryChanges txChangesAfter;  // tx level changes after operations are\n  //                                           // applied if any\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionMetaV2\", [[\"txChangesBefore\", xdr.lookup(\"LedgerEntryChanges\")], [\"operations\", xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647)], [\"txChangesAfter\", xdr.lookup(\"LedgerEntryChanges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ContractEventType\n  //   {\n  //       SYSTEM = 0,\n  //       CONTRACT = 1,\n  //       DIAGNOSTIC = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ContractEventType\", {\n    system: 0,\n    contract: 1,\n    diagnostic: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //           {\n  //               SCVal topics<>;\n  //               SCVal data;\n  //           }\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractEventV0\", [[\"topics\", xdr.varArray(xdr.lookup(\"ScVal\"), 2147483647)], [\"data\", xdr.lookup(\"ScVal\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           struct\n  //           {\n  //               SCVal topics<>;\n  //               SCVal data;\n  //           } v0;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ContractEventBody\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"ContractEventV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ContractEvent\n  //   {\n  //       // We can use this to add more fields, or because it\n  //       // is first, to change ContractEvent into a union.\n  //       ExtensionPoint ext;\n  //\n  //       Hash* contractID;\n  //       ContractEventType type;\n  //\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           struct\n  //           {\n  //               SCVal topics<>;\n  //               SCVal data;\n  //           } v0;\n  //       }\n  //       body;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractEvent\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"contractId\", xdr.option(xdr.lookup(\"Hash\"))], [\"type\", xdr.lookup(\"ContractEventType\")], [\"body\", xdr.lookup(\"ContractEventBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct DiagnosticEvent\n  //   {\n  //       bool inSuccessfulContractCall;\n  //       ContractEvent event;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DiagnosticEvent\", [[\"inSuccessfulContractCall\", xdr.bool()], [\"event\", xdr.lookup(\"ContractEvent\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef DiagnosticEvent DiagnosticEvents<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"DiagnosticEvents\", xdr.varArray(xdr.lookup(\"DiagnosticEvent\"), 2147483647));\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanTransactionMetaExtV1\n  //   {\n  //       ExtensionPoint ext;\n  //\n  //       // The following are the components of the overall Soroban resource fee\n  //       // charged for the transaction.\n  //       // The following relation holds:\n  //       // `resourceFeeCharged = totalNonRefundableResourceFeeCharged + totalRefundableResourceFeeCharged`\n  //       // where `resourceFeeCharged` is the overall fee charged for the\n  //       // transaction. Also, `resourceFeeCharged` <= `sorobanData.resourceFee`\n  //       // i.e.we never charge more than the declared resource fee.\n  //       // The inclusion fee for charged the Soroban transaction can be found using\n  //       // the following equation:\n  //       // `result.feeCharged = resourceFeeCharged + inclusionFeeCharged`.\n  //\n  //       // Total amount (in stroops) that has been charged for non-refundable\n  //       // Soroban resources.\n  //       // Non-refundable resources are charged based on the usage declared in\n  //       // the transaction envelope (such as `instructions`, `readBytes` etc.) and\n  //       // is charged regardless of the success of the transaction.\n  //       int64 totalNonRefundableResourceFeeCharged;\n  //       // Total amount (in stroops) that has been charged for refundable\n  //       // Soroban resource fees.\n  //       // Currently this comprises the rent fee (`rentFeeCharged`) and the\n  //       // fee for the events and return value.\n  //       // Refundable resources are charged based on the actual resources usage.\n  //       // Since currently refundable resources are only used for the successful\n  //       // transactions, this will be `0` for failed transactions.\n  //       int64 totalRefundableResourceFeeCharged;\n  //       // Amount (in stroops) that has been charged for rent.\n  //       // This is a part of `totalNonRefundableResourceFeeCharged`.\n  //       int64 rentFeeCharged;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanTransactionMetaExtV1\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"totalNonRefundableResourceFeeCharged\", xdr.lookup(\"Int64\")], [\"totalRefundableResourceFeeCharged\", xdr.lookup(\"Int64\")], [\"rentFeeCharged\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SorobanTransactionMetaExt switch (int v)\n  //   {\n  //   case 0:\n  //       void;\n  //   case 1:\n  //       SorobanTransactionMetaExtV1 v1;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SorobanTransactionMetaExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"SorobanTransactionMetaExtV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanTransactionMeta\n  //   {\n  //       SorobanTransactionMetaExt ext;\n  //\n  //       ContractEvent events<>;             // custom events populated by the\n  //                                           // contracts themselves.\n  //       SCVal returnValue;                  // return value of the host fn invocation\n  //\n  //       // Diagnostics events that are not hashed.\n  //       // This will contain all contract and diagnostic events. Even ones\n  //       // that were emitted in a failed contract call.\n  //       DiagnosticEvent diagnosticEvents<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanTransactionMeta\", [[\"ext\", xdr.lookup(\"SorobanTransactionMetaExt\")], [\"events\", xdr.varArray(xdr.lookup(\"ContractEvent\"), 2147483647)], [\"returnValue\", xdr.lookup(\"ScVal\")], [\"diagnosticEvents\", xdr.varArray(xdr.lookup(\"DiagnosticEvent\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionMetaV3\n  //   {\n  //       ExtensionPoint ext;\n  //\n  //       LedgerEntryChanges txChangesBefore;  // tx level changes before operations\n  //                                            // are applied if any\n  //       OperationMeta operations<>;          // meta for each operation\n  //       LedgerEntryChanges txChangesAfter;   // tx level changes after operations are\n  //                                            // applied if any\n  //       SorobanTransactionMeta* sorobanMeta; // Soroban-specific meta (only for\n  //                                            // Soroban transactions).\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionMetaV3\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"txChangesBefore\", xdr.lookup(\"LedgerEntryChanges\")], [\"operations\", xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647)], [\"txChangesAfter\", xdr.lookup(\"LedgerEntryChanges\")], [\"sorobanMeta\", xdr.option(xdr.lookup(\"SorobanTransactionMeta\"))]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct InvokeHostFunctionSuccessPreImage\n  //   {\n  //       SCVal returnValue;\n  //       ContractEvent events<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InvokeHostFunctionSuccessPreImage\", [[\"returnValue\", xdr.lookup(\"ScVal\")], [\"events\", xdr.varArray(xdr.lookup(\"ContractEvent\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union TransactionMeta switch (int v)\n  //   {\n  //   case 0:\n  //       OperationMeta operations<>;\n  //   case 1:\n  //       TransactionMetaV1 v1;\n  //   case 2:\n  //       TransactionMetaV2 v2;\n  //   case 3:\n  //       TransactionMetaV3 v3;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionMeta\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, \"operations\"], [1, \"v1\"], [2, \"v2\"], [3, \"v3\"]],\n    arms: {\n      operations: xdr.varArray(xdr.lookup(\"OperationMeta\"), 2147483647),\n      v1: xdr.lookup(\"TransactionMetaV1\"),\n      v2: xdr.lookup(\"TransactionMetaV2\"),\n      v3: xdr.lookup(\"TransactionMetaV3\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResultMeta\n  //   {\n  //       TransactionResultPair result;\n  //       LedgerEntryChanges feeProcessing;\n  //       TransactionMeta txApplyProcessing;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResultMeta\", [[\"result\", xdr.lookup(\"TransactionResultPair\")], [\"feeProcessing\", xdr.lookup(\"LedgerEntryChanges\")], [\"txApplyProcessing\", xdr.lookup(\"TransactionMeta\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct UpgradeEntryMeta\n  //   {\n  //       LedgerUpgrade upgrade;\n  //       LedgerEntryChanges changes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"UpgradeEntryMeta\", [[\"upgrade\", xdr.lookup(\"LedgerUpgrade\")], [\"changes\", xdr.lookup(\"LedgerEntryChanges\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseMetaV0\n  //   {\n  //       LedgerHeaderHistoryEntry ledgerHeader;\n  //       // NB: txSet is sorted in \"Hash order\"\n  //       TransactionSet txSet;\n  //\n  //       // NB: transactions are sorted in apply order here\n  //       // fees for all transactions are processed first\n  //       // followed by applying transactions\n  //       TransactionResultMeta txProcessing<>;\n  //\n  //       // upgrades are applied last\n  //       UpgradeEntryMeta upgradesProcessing<>;\n  //\n  //       // other misc information attached to the ledger close\n  //       SCPHistoryEntry scpInfo<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseMetaV0\", [[\"ledgerHeader\", xdr.lookup(\"LedgerHeaderHistoryEntry\")], [\"txSet\", xdr.lookup(\"TransactionSet\")], [\"txProcessing\", xdr.varArray(xdr.lookup(\"TransactionResultMeta\"), 2147483647)], [\"upgradesProcessing\", xdr.varArray(xdr.lookup(\"UpgradeEntryMeta\"), 2147483647)], [\"scpInfo\", xdr.varArray(xdr.lookup(\"ScpHistoryEntry\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseMetaExtV1\n  //   {\n  //       ExtensionPoint ext;\n  //       int64 sorobanFeeWrite1KB;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseMetaExtV1\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"sorobanFeeWrite1Kb\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerCloseMetaExt switch (int v)\n  //   {\n  //   case 0:\n  //       void;\n  //   case 1:\n  //       LedgerCloseMetaExtV1 v1;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerCloseMetaExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"LedgerCloseMetaExtV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerCloseMetaV1\n  //   {\n  //       LedgerCloseMetaExt ext;\n  //\n  //       LedgerHeaderHistoryEntry ledgerHeader;\n  //\n  //       GeneralizedTransactionSet txSet;\n  //\n  //       // NB: transactions are sorted in apply order here\n  //       // fees for all transactions are processed first\n  //       // followed by applying transactions\n  //       TransactionResultMeta txProcessing<>;\n  //\n  //       // upgrades are applied last\n  //       UpgradeEntryMeta upgradesProcessing<>;\n  //\n  //       // other misc information attached to the ledger close\n  //       SCPHistoryEntry scpInfo<>;\n  //\n  //       // Size in bytes of BucketList, to support downstream\n  //       // systems calculating storage fees correctly.\n  //       uint64 totalByteSizeOfBucketList;\n  //\n  //       // Temp keys that are being evicted at this ledger.\n  //       LedgerKey evictedTemporaryLedgerKeys<>;\n  //\n  //       // Archived restorable ledger entries that are being\n  //       // evicted at this ledger.\n  //       LedgerEntry evictedPersistentLedgerEntries<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerCloseMetaV1\", [[\"ext\", xdr.lookup(\"LedgerCloseMetaExt\")], [\"ledgerHeader\", xdr.lookup(\"LedgerHeaderHistoryEntry\")], [\"txSet\", xdr.lookup(\"GeneralizedTransactionSet\")], [\"txProcessing\", xdr.varArray(xdr.lookup(\"TransactionResultMeta\"), 2147483647)], [\"upgradesProcessing\", xdr.varArray(xdr.lookup(\"UpgradeEntryMeta\"), 2147483647)], [\"scpInfo\", xdr.varArray(xdr.lookup(\"ScpHistoryEntry\"), 2147483647)], [\"totalByteSizeOfBucketList\", xdr.lookup(\"Uint64\")], [\"evictedTemporaryLedgerKeys\", xdr.varArray(xdr.lookup(\"LedgerKey\"), 2147483647)], [\"evictedPersistentLedgerEntries\", xdr.varArray(xdr.lookup(\"LedgerEntry\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union LedgerCloseMeta switch (int v)\n  //   {\n  //   case 0:\n  //       LedgerCloseMetaV0 v0;\n  //   case 1:\n  //       LedgerCloseMetaV1 v1;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LedgerCloseMeta\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, \"v0\"], [1, \"v1\"]],\n    arms: {\n      v0: xdr.lookup(\"LedgerCloseMetaV0\"),\n      v1: xdr.lookup(\"LedgerCloseMetaV1\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ErrorCode\n  //   {\n  //       ERR_MISC = 0, // Unspecific error\n  //       ERR_DATA = 1, // Malformed data\n  //       ERR_CONF = 2, // Misconfiguration error\n  //       ERR_AUTH = 3, // Authentication failure\n  //       ERR_LOAD = 4  // System overloaded\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ErrorCode\", {\n    errMisc: 0,\n    errData: 1,\n    errConf: 2,\n    errAuth: 3,\n    errLoad: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Error\n  //   {\n  //       ErrorCode code;\n  //       string msg<100>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Error\", [[\"code\", xdr.lookup(\"ErrorCode\")], [\"msg\", xdr.string(100)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SendMore\n  //   {\n  //       uint32 numMessages;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SendMore\", [[\"numMessages\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SendMoreExtended\n  //   {\n  //       uint32 numMessages;\n  //       uint32 numBytes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SendMoreExtended\", [[\"numMessages\", xdr.lookup(\"Uint32\")], [\"numBytes\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct AuthCert\n  //   {\n  //       Curve25519Public pubkey;\n  //       uint64 expiration;\n  //       Signature sig;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AuthCert\", [[\"pubkey\", xdr.lookup(\"Curve25519Public\")], [\"expiration\", xdr.lookup(\"Uint64\")], [\"sig\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Hello\n  //   {\n  //       uint32 ledgerVersion;\n  //       uint32 overlayVersion;\n  //       uint32 overlayMinVersion;\n  //       Hash networkID;\n  //       string versionStr<100>;\n  //       int listeningPort;\n  //       NodeID peerID;\n  //       AuthCert cert;\n  //       uint256 nonce;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Hello\", [[\"ledgerVersion\", xdr.lookup(\"Uint32\")], [\"overlayVersion\", xdr.lookup(\"Uint32\")], [\"overlayMinVersion\", xdr.lookup(\"Uint32\")], [\"networkId\", xdr.lookup(\"Hash\")], [\"versionStr\", xdr.string(100)], [\"listeningPort\", xdr[\"int\"]()], [\"peerId\", xdr.lookup(\"NodeId\")], [\"cert\", xdr.lookup(\"AuthCert\")], [\"nonce\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const AUTH_MSG_FLAG_FLOW_CONTROL_BYTES_REQUESTED = 200;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"AUTH_MSG_FLAG_FLOW_CONTROL_BYTES_REQUESTED\", 200);\n\n  // === xdr source ============================================================\n  //\n  //   struct Auth\n  //   {\n  //       int flags;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Auth\", [[\"flags\", xdr[\"int\"]()]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum IPAddrType\n  //   {\n  //       IPv4 = 0,\n  //       IPv6 = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"IpAddrType\", {\n    iPv4: 0,\n    iPv6: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (IPAddrType type)\n  //       {\n  //       case IPv4:\n  //           opaque ipv4[4];\n  //       case IPv6:\n  //           opaque ipv6[16];\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"PeerAddressIp\", {\n    switchOn: xdr.lookup(\"IpAddrType\"),\n    switchName: \"type\",\n    switches: [[\"iPv4\", \"ipv4\"], [\"iPv6\", \"ipv6\"]],\n    arms: {\n      ipv4: xdr.opaque(4),\n      ipv6: xdr.opaque(16)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct PeerAddress\n  //   {\n  //       union switch (IPAddrType type)\n  //       {\n  //       case IPv4:\n  //           opaque ipv4[4];\n  //       case IPv6:\n  //           opaque ipv6[16];\n  //       }\n  //       ip;\n  //       uint32 port;\n  //       uint32 numFailures;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PeerAddress\", [[\"ip\", xdr.lookup(\"PeerAddressIp\")], [\"port\", xdr.lookup(\"Uint32\")], [\"numFailures\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum MessageType\n  //   {\n  //       ERROR_MSG = 0,\n  //       AUTH = 2,\n  //       DONT_HAVE = 3,\n  //\n  //       GET_PEERS = 4, // gets a list of peers this guy knows about\n  //       PEERS = 5,\n  //\n  //       GET_TX_SET = 6, // gets a particular txset by hash\n  //       TX_SET = 7,\n  //       GENERALIZED_TX_SET = 17,\n  //\n  //       TRANSACTION = 8, // pass on a tx you have heard about\n  //\n  //       // SCP\n  //       GET_SCP_QUORUMSET = 9,\n  //       SCP_QUORUMSET = 10,\n  //       SCP_MESSAGE = 11,\n  //       GET_SCP_STATE = 12,\n  //\n  //       // new messages\n  //       HELLO = 13,\n  //\n  //       SURVEY_REQUEST = 14,\n  //       SURVEY_RESPONSE = 15,\n  //\n  //       SEND_MORE = 16,\n  //       SEND_MORE_EXTENDED = 20,\n  //\n  //       FLOOD_ADVERT = 18,\n  //       FLOOD_DEMAND = 19,\n  //\n  //       TIME_SLICED_SURVEY_REQUEST = 21,\n  //       TIME_SLICED_SURVEY_RESPONSE = 22,\n  //       TIME_SLICED_SURVEY_START_COLLECTING = 23,\n  //       TIME_SLICED_SURVEY_STOP_COLLECTING = 24\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"MessageType\", {\n    errorMsg: 0,\n    auth: 2,\n    dontHave: 3,\n    getPeers: 4,\n    peers: 5,\n    getTxSet: 6,\n    txSet: 7,\n    generalizedTxSet: 17,\n    transaction: 8,\n    getScpQuorumset: 9,\n    scpQuorumset: 10,\n    scpMessage: 11,\n    getScpState: 12,\n    hello: 13,\n    surveyRequest: 14,\n    surveyResponse: 15,\n    sendMore: 16,\n    sendMoreExtended: 20,\n    floodAdvert: 18,\n    floodDemand: 19,\n    timeSlicedSurveyRequest: 21,\n    timeSlicedSurveyResponse: 22,\n    timeSlicedSurveyStartCollecting: 23,\n    timeSlicedSurveyStopCollecting: 24\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct DontHave\n  //   {\n  //       MessageType type;\n  //       uint256 reqHash;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DontHave\", [[\"type\", xdr.lookup(\"MessageType\")], [\"reqHash\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SurveyMessageCommandType\n  //   {\n  //       SURVEY_TOPOLOGY = 0,\n  //       TIME_SLICED_SURVEY_TOPOLOGY = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SurveyMessageCommandType\", {\n    surveyTopology: 0,\n    timeSlicedSurveyTopology: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SurveyMessageResponseType\n  //   {\n  //       SURVEY_TOPOLOGY_RESPONSE_V0 = 0,\n  //       SURVEY_TOPOLOGY_RESPONSE_V1 = 1,\n  //       SURVEY_TOPOLOGY_RESPONSE_V2 = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SurveyMessageResponseType\", {\n    surveyTopologyResponseV0: 0,\n    surveyTopologyResponseV1: 1,\n    surveyTopologyResponseV2: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedSurveyStartCollectingMessage\n  //   {\n  //       NodeID surveyorID;\n  //       uint32 nonce;\n  //       uint32 ledgerNum;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedSurveyStartCollectingMessage\", [[\"surveyorId\", xdr.lookup(\"NodeId\")], [\"nonce\", xdr.lookup(\"Uint32\")], [\"ledgerNum\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedTimeSlicedSurveyStartCollectingMessage\n  //   {\n  //       Signature signature;\n  //       TimeSlicedSurveyStartCollectingMessage startCollecting;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedTimeSlicedSurveyStartCollectingMessage\", [[\"signature\", xdr.lookup(\"Signature\")], [\"startCollecting\", xdr.lookup(\"TimeSlicedSurveyStartCollectingMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedSurveyStopCollectingMessage\n  //   {\n  //       NodeID surveyorID;\n  //       uint32 nonce;\n  //       uint32 ledgerNum;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedSurveyStopCollectingMessage\", [[\"surveyorId\", xdr.lookup(\"NodeId\")], [\"nonce\", xdr.lookup(\"Uint32\")], [\"ledgerNum\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedTimeSlicedSurveyStopCollectingMessage\n  //   {\n  //       Signature signature;\n  //       TimeSlicedSurveyStopCollectingMessage stopCollecting;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedTimeSlicedSurveyStopCollectingMessage\", [[\"signature\", xdr.lookup(\"Signature\")], [\"stopCollecting\", xdr.lookup(\"TimeSlicedSurveyStopCollectingMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SurveyRequestMessage\n  //   {\n  //       NodeID surveyorPeerID;\n  //       NodeID surveyedPeerID;\n  //       uint32 ledgerNum;\n  //       Curve25519Public encryptionKey;\n  //       SurveyMessageCommandType commandType;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SurveyRequestMessage\", [[\"surveyorPeerId\", xdr.lookup(\"NodeId\")], [\"surveyedPeerId\", xdr.lookup(\"NodeId\")], [\"ledgerNum\", xdr.lookup(\"Uint32\")], [\"encryptionKey\", xdr.lookup(\"Curve25519Public\")], [\"commandType\", xdr.lookup(\"SurveyMessageCommandType\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedSurveyRequestMessage\n  //   {\n  //       SurveyRequestMessage request;\n  //       uint32 nonce;\n  //       uint32 inboundPeersIndex;\n  //       uint32 outboundPeersIndex;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedSurveyRequestMessage\", [[\"request\", xdr.lookup(\"SurveyRequestMessage\")], [\"nonce\", xdr.lookup(\"Uint32\")], [\"inboundPeersIndex\", xdr.lookup(\"Uint32\")], [\"outboundPeersIndex\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedSurveyRequestMessage\n  //   {\n  //       Signature requestSignature;\n  //       SurveyRequestMessage request;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedSurveyRequestMessage\", [[\"requestSignature\", xdr.lookup(\"Signature\")], [\"request\", xdr.lookup(\"SurveyRequestMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedTimeSlicedSurveyRequestMessage\n  //   {\n  //       Signature requestSignature;\n  //       TimeSlicedSurveyRequestMessage request;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedTimeSlicedSurveyRequestMessage\", [[\"requestSignature\", xdr.lookup(\"Signature\")], [\"request\", xdr.lookup(\"TimeSlicedSurveyRequestMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque EncryptedBody<64000>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"EncryptedBody\", xdr.varOpaque(64000));\n\n  // === xdr source ============================================================\n  //\n  //   struct SurveyResponseMessage\n  //   {\n  //       NodeID surveyorPeerID;\n  //       NodeID surveyedPeerID;\n  //       uint32 ledgerNum;\n  //       SurveyMessageCommandType commandType;\n  //       EncryptedBody encryptedBody;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SurveyResponseMessage\", [[\"surveyorPeerId\", xdr.lookup(\"NodeId\")], [\"surveyedPeerId\", xdr.lookup(\"NodeId\")], [\"ledgerNum\", xdr.lookup(\"Uint32\")], [\"commandType\", xdr.lookup(\"SurveyMessageCommandType\")], [\"encryptedBody\", xdr.lookup(\"EncryptedBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedSurveyResponseMessage\n  //   {\n  //       SurveyResponseMessage response;\n  //       uint32 nonce;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedSurveyResponseMessage\", [[\"response\", xdr.lookup(\"SurveyResponseMessage\")], [\"nonce\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedSurveyResponseMessage\n  //   {\n  //       Signature responseSignature;\n  //       SurveyResponseMessage response;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedSurveyResponseMessage\", [[\"responseSignature\", xdr.lookup(\"Signature\")], [\"response\", xdr.lookup(\"SurveyResponseMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SignedTimeSlicedSurveyResponseMessage\n  //   {\n  //       Signature responseSignature;\n  //       TimeSlicedSurveyResponseMessage response;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SignedTimeSlicedSurveyResponseMessage\", [[\"responseSignature\", xdr.lookup(\"Signature\")], [\"response\", xdr.lookup(\"TimeSlicedSurveyResponseMessage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PeerStats\n  //   {\n  //       NodeID id;\n  //       string versionStr<100>;\n  //       uint64 messagesRead;\n  //       uint64 messagesWritten;\n  //       uint64 bytesRead;\n  //       uint64 bytesWritten;\n  //       uint64 secondsConnected;\n  //\n  //       uint64 uniqueFloodBytesRecv;\n  //       uint64 duplicateFloodBytesRecv;\n  //       uint64 uniqueFetchBytesRecv;\n  //       uint64 duplicateFetchBytesRecv;\n  //\n  //       uint64 uniqueFloodMessageRecv;\n  //       uint64 duplicateFloodMessageRecv;\n  //       uint64 uniqueFetchMessageRecv;\n  //       uint64 duplicateFetchMessageRecv;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PeerStats\", [[\"id\", xdr.lookup(\"NodeId\")], [\"versionStr\", xdr.string(100)], [\"messagesRead\", xdr.lookup(\"Uint64\")], [\"messagesWritten\", xdr.lookup(\"Uint64\")], [\"bytesRead\", xdr.lookup(\"Uint64\")], [\"bytesWritten\", xdr.lookup(\"Uint64\")], [\"secondsConnected\", xdr.lookup(\"Uint64\")], [\"uniqueFloodBytesRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFloodBytesRecv\", xdr.lookup(\"Uint64\")], [\"uniqueFetchBytesRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFetchBytesRecv\", xdr.lookup(\"Uint64\")], [\"uniqueFloodMessageRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFloodMessageRecv\", xdr.lookup(\"Uint64\")], [\"uniqueFetchMessageRecv\", xdr.lookup(\"Uint64\")], [\"duplicateFetchMessageRecv\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef PeerStats PeerStatList<25>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"PeerStatList\", xdr.varArray(xdr.lookup(\"PeerStats\"), 25));\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedNodeData\n  //   {\n  //       uint32 addedAuthenticatedPeers;\n  //       uint32 droppedAuthenticatedPeers;\n  //       uint32 totalInboundPeerCount;\n  //       uint32 totalOutboundPeerCount;\n  //\n  //       // SCP stats\n  //       uint32 p75SCPFirstToSelfLatencyMs;\n  //       uint32 p75SCPSelfToOtherLatencyMs;\n  //\n  //       // How many times the node lost sync in the time slice\n  //       uint32 lostSyncCount;\n  //\n  //       // Config data\n  //       bool isValidator;\n  //       uint32 maxInboundPeerCount;\n  //       uint32 maxOutboundPeerCount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedNodeData\", [[\"addedAuthenticatedPeers\", xdr.lookup(\"Uint32\")], [\"droppedAuthenticatedPeers\", xdr.lookup(\"Uint32\")], [\"totalInboundPeerCount\", xdr.lookup(\"Uint32\")], [\"totalOutboundPeerCount\", xdr.lookup(\"Uint32\")], [\"p75ScpFirstToSelfLatencyMs\", xdr.lookup(\"Uint32\")], [\"p75ScpSelfToOtherLatencyMs\", xdr.lookup(\"Uint32\")], [\"lostSyncCount\", xdr.lookup(\"Uint32\")], [\"isValidator\", xdr.bool()], [\"maxInboundPeerCount\", xdr.lookup(\"Uint32\")], [\"maxOutboundPeerCount\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeSlicedPeerData\n  //   {\n  //       PeerStats peerStats;\n  //       uint32 averageLatencyMs;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeSlicedPeerData\", [[\"peerStats\", xdr.lookup(\"PeerStats\")], [\"averageLatencyMs\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef TimeSlicedPeerData TimeSlicedPeerDataList<25>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"TimeSlicedPeerDataList\", xdr.varArray(xdr.lookup(\"TimeSlicedPeerData\"), 25));\n\n  // === xdr source ============================================================\n  //\n  //   struct TopologyResponseBodyV0\n  //   {\n  //       PeerStatList inboundPeers;\n  //       PeerStatList outboundPeers;\n  //\n  //       uint32 totalInboundPeerCount;\n  //       uint32 totalOutboundPeerCount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TopologyResponseBodyV0\", [[\"inboundPeers\", xdr.lookup(\"PeerStatList\")], [\"outboundPeers\", xdr.lookup(\"PeerStatList\")], [\"totalInboundPeerCount\", xdr.lookup(\"Uint32\")], [\"totalOutboundPeerCount\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TopologyResponseBodyV1\n  //   {\n  //       PeerStatList inboundPeers;\n  //       PeerStatList outboundPeers;\n  //\n  //       uint32 totalInboundPeerCount;\n  //       uint32 totalOutboundPeerCount;\n  //\n  //       uint32 maxInboundPeerCount;\n  //       uint32 maxOutboundPeerCount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TopologyResponseBodyV1\", [[\"inboundPeers\", xdr.lookup(\"PeerStatList\")], [\"outboundPeers\", xdr.lookup(\"PeerStatList\")], [\"totalInboundPeerCount\", xdr.lookup(\"Uint32\")], [\"totalOutboundPeerCount\", xdr.lookup(\"Uint32\")], [\"maxInboundPeerCount\", xdr.lookup(\"Uint32\")], [\"maxOutboundPeerCount\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TopologyResponseBodyV2\n  //   {\n  //       TimeSlicedPeerDataList inboundPeers;\n  //       TimeSlicedPeerDataList outboundPeers;\n  //       TimeSlicedNodeData nodeData;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TopologyResponseBodyV2\", [[\"inboundPeers\", xdr.lookup(\"TimeSlicedPeerDataList\")], [\"outboundPeers\", xdr.lookup(\"TimeSlicedPeerDataList\")], [\"nodeData\", xdr.lookup(\"TimeSlicedNodeData\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SurveyResponseBody switch (SurveyMessageResponseType type)\n  //   {\n  //   case SURVEY_TOPOLOGY_RESPONSE_V0:\n  //       TopologyResponseBodyV0 topologyResponseBodyV0;\n  //   case SURVEY_TOPOLOGY_RESPONSE_V1:\n  //       TopologyResponseBodyV1 topologyResponseBodyV1;\n  //   case SURVEY_TOPOLOGY_RESPONSE_V2:\n  //       TopologyResponseBodyV2 topologyResponseBodyV2;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SurveyResponseBody\", {\n    switchOn: xdr.lookup(\"SurveyMessageResponseType\"),\n    switchName: \"type\",\n    switches: [[\"surveyTopologyResponseV0\", \"topologyResponseBodyV0\"], [\"surveyTopologyResponseV1\", \"topologyResponseBodyV1\"], [\"surveyTopologyResponseV2\", \"topologyResponseBodyV2\"]],\n    arms: {\n      topologyResponseBodyV0: xdr.lookup(\"TopologyResponseBodyV0\"),\n      topologyResponseBodyV1: xdr.lookup(\"TopologyResponseBodyV1\"),\n      topologyResponseBodyV2: xdr.lookup(\"TopologyResponseBodyV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const TX_ADVERT_VECTOR_MAX_SIZE = 1000;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"TX_ADVERT_VECTOR_MAX_SIZE\", 1000);\n\n  // === xdr source ============================================================\n  //\n  //   typedef Hash TxAdvertVector<TX_ADVERT_VECTOR_MAX_SIZE>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"TxAdvertVector\", xdr.varArray(xdr.lookup(\"Hash\"), xdr.lookup(\"TX_ADVERT_VECTOR_MAX_SIZE\")));\n\n  // === xdr source ============================================================\n  //\n  //   struct FloodAdvert\n  //   {\n  //       TxAdvertVector txHashes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"FloodAdvert\", [[\"txHashes\", xdr.lookup(\"TxAdvertVector\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const TX_DEMAND_VECTOR_MAX_SIZE = 1000;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"TX_DEMAND_VECTOR_MAX_SIZE\", 1000);\n\n  // === xdr source ============================================================\n  //\n  //   typedef Hash TxDemandVector<TX_DEMAND_VECTOR_MAX_SIZE>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"TxDemandVector\", xdr.varArray(xdr.lookup(\"Hash\"), xdr.lookup(\"TX_DEMAND_VECTOR_MAX_SIZE\")));\n\n  // === xdr source ============================================================\n  //\n  //   struct FloodDemand\n  //   {\n  //       TxDemandVector txHashes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"FloodDemand\", [[\"txHashes\", xdr.lookup(\"TxDemandVector\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union StellarMessage switch (MessageType type)\n  //   {\n  //   case ERROR_MSG:\n  //       Error error;\n  //   case HELLO:\n  //       Hello hello;\n  //   case AUTH:\n  //       Auth auth;\n  //   case DONT_HAVE:\n  //       DontHave dontHave;\n  //   case GET_PEERS:\n  //       void;\n  //   case PEERS:\n  //       PeerAddress peers<100>;\n  //\n  //   case GET_TX_SET:\n  //       uint256 txSetHash;\n  //   case TX_SET:\n  //       TransactionSet txSet;\n  //   case GENERALIZED_TX_SET:\n  //       GeneralizedTransactionSet generalizedTxSet;\n  //\n  //   case TRANSACTION:\n  //       TransactionEnvelope transaction;\n  //\n  //   case SURVEY_REQUEST:\n  //       SignedSurveyRequestMessage signedSurveyRequestMessage;\n  //\n  //   case SURVEY_RESPONSE:\n  //       SignedSurveyResponseMessage signedSurveyResponseMessage;\n  //\n  //   case TIME_SLICED_SURVEY_REQUEST:\n  //       SignedTimeSlicedSurveyRequestMessage signedTimeSlicedSurveyRequestMessage;\n  //\n  //   case TIME_SLICED_SURVEY_RESPONSE:\n  //       SignedTimeSlicedSurveyResponseMessage signedTimeSlicedSurveyResponseMessage;\n  //\n  //   case TIME_SLICED_SURVEY_START_COLLECTING:\n  //       SignedTimeSlicedSurveyStartCollectingMessage\n  //           signedTimeSlicedSurveyStartCollectingMessage;\n  //\n  //   case TIME_SLICED_SURVEY_STOP_COLLECTING:\n  //       SignedTimeSlicedSurveyStopCollectingMessage\n  //           signedTimeSlicedSurveyStopCollectingMessage;\n  //\n  //   // SCP\n  //   case GET_SCP_QUORUMSET:\n  //       uint256 qSetHash;\n  //   case SCP_QUORUMSET:\n  //       SCPQuorumSet qSet;\n  //   case SCP_MESSAGE:\n  //       SCPEnvelope envelope;\n  //   case GET_SCP_STATE:\n  //       uint32 getSCPLedgerSeq; // ledger seq requested ; if 0, requests the latest\n  //   case SEND_MORE:\n  //       SendMore sendMoreMessage;\n  //   case SEND_MORE_EXTENDED:\n  //       SendMoreExtended sendMoreExtendedMessage;\n  //   // Pull mode\n  //   case FLOOD_ADVERT:\n  //        FloodAdvert floodAdvert;\n  //   case FLOOD_DEMAND:\n  //        FloodDemand floodDemand;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"StellarMessage\", {\n    switchOn: xdr.lookup(\"MessageType\"),\n    switchName: \"type\",\n    switches: [[\"errorMsg\", \"error\"], [\"hello\", \"hello\"], [\"auth\", \"auth\"], [\"dontHave\", \"dontHave\"], [\"getPeers\", xdr[\"void\"]()], [\"peers\", \"peers\"], [\"getTxSet\", \"txSetHash\"], [\"txSet\", \"txSet\"], [\"generalizedTxSet\", \"generalizedTxSet\"], [\"transaction\", \"transaction\"], [\"surveyRequest\", \"signedSurveyRequestMessage\"], [\"surveyResponse\", \"signedSurveyResponseMessage\"], [\"timeSlicedSurveyRequest\", \"signedTimeSlicedSurveyRequestMessage\"], [\"timeSlicedSurveyResponse\", \"signedTimeSlicedSurveyResponseMessage\"], [\"timeSlicedSurveyStartCollecting\", \"signedTimeSlicedSurveyStartCollectingMessage\"], [\"timeSlicedSurveyStopCollecting\", \"signedTimeSlicedSurveyStopCollectingMessage\"], [\"getScpQuorumset\", \"qSetHash\"], [\"scpQuorumset\", \"qSet\"], [\"scpMessage\", \"envelope\"], [\"getScpState\", \"getScpLedgerSeq\"], [\"sendMore\", \"sendMoreMessage\"], [\"sendMoreExtended\", \"sendMoreExtendedMessage\"], [\"floodAdvert\", \"floodAdvert\"], [\"floodDemand\", \"floodDemand\"]],\n    arms: {\n      error: xdr.lookup(\"Error\"),\n      hello: xdr.lookup(\"Hello\"),\n      auth: xdr.lookup(\"Auth\"),\n      dontHave: xdr.lookup(\"DontHave\"),\n      peers: xdr.varArray(xdr.lookup(\"PeerAddress\"), 100),\n      txSetHash: xdr.lookup(\"Uint256\"),\n      txSet: xdr.lookup(\"TransactionSet\"),\n      generalizedTxSet: xdr.lookup(\"GeneralizedTransactionSet\"),\n      transaction: xdr.lookup(\"TransactionEnvelope\"),\n      signedSurveyRequestMessage: xdr.lookup(\"SignedSurveyRequestMessage\"),\n      signedSurveyResponseMessage: xdr.lookup(\"SignedSurveyResponseMessage\"),\n      signedTimeSlicedSurveyRequestMessage: xdr.lookup(\"SignedTimeSlicedSurveyRequestMessage\"),\n      signedTimeSlicedSurveyResponseMessage: xdr.lookup(\"SignedTimeSlicedSurveyResponseMessage\"),\n      signedTimeSlicedSurveyStartCollectingMessage: xdr.lookup(\"SignedTimeSlicedSurveyStartCollectingMessage\"),\n      signedTimeSlicedSurveyStopCollectingMessage: xdr.lookup(\"SignedTimeSlicedSurveyStopCollectingMessage\"),\n      qSetHash: xdr.lookup(\"Uint256\"),\n      qSet: xdr.lookup(\"ScpQuorumSet\"),\n      envelope: xdr.lookup(\"ScpEnvelope\"),\n      getScpLedgerSeq: xdr.lookup(\"Uint32\"),\n      sendMoreMessage: xdr.lookup(\"SendMore\"),\n      sendMoreExtendedMessage: xdr.lookup(\"SendMoreExtended\"),\n      floodAdvert: xdr.lookup(\"FloodAdvert\"),\n      floodDemand: xdr.lookup(\"FloodDemand\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           uint64 sequence;\n  //           StellarMessage message;\n  //           HmacSha256Mac mac;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"AuthenticatedMessageV0\", [[\"sequence\", xdr.lookup(\"Uint64\")], [\"message\", xdr.lookup(\"StellarMessage\")], [\"mac\", xdr.lookup(\"HmacSha256Mac\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union AuthenticatedMessage switch (uint32 v)\n  //   {\n  //   case 0:\n  //       struct\n  //       {\n  //           uint64 sequence;\n  //           StellarMessage message;\n  //           HmacSha256Mac mac;\n  //       } v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AuthenticatedMessage\", {\n    switchOn: xdr.lookup(\"Uint32\"),\n    switchName: \"v\",\n    switches: [[0, \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"AuthenticatedMessageV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const MAX_OPS_PER_TX = 100;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"MAX_OPS_PER_TX\", 100);\n\n  // === xdr source ============================================================\n  //\n  //   union LiquidityPoolParameters switch (LiquidityPoolType type)\n  //   {\n  //   case LIQUIDITY_POOL_CONSTANT_PRODUCT:\n  //       LiquidityPoolConstantProductParameters constantProduct;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolParameters\", {\n    switchOn: xdr.lookup(\"LiquidityPoolType\"),\n    switchName: \"type\",\n    switches: [[\"liquidityPoolConstantProduct\", \"constantProduct\"]],\n    arms: {\n      constantProduct: xdr.lookup(\"LiquidityPoolConstantProductParameters\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           uint64 id;\n  //           uint256 ed25519;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"MuxedAccountMed25519\", [[\"id\", xdr.lookup(\"Uint64\")], [\"ed25519\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union MuxedAccount switch (CryptoKeyType type)\n  //   {\n  //   case KEY_TYPE_ED25519:\n  //       uint256 ed25519;\n  //   case KEY_TYPE_MUXED_ED25519:\n  //       struct\n  //       {\n  //           uint64 id;\n  //           uint256 ed25519;\n  //       } med25519;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"MuxedAccount\", {\n    switchOn: xdr.lookup(\"CryptoKeyType\"),\n    switchName: \"type\",\n    switches: [[\"keyTypeEd25519\", \"ed25519\"], [\"keyTypeMuxedEd25519\", \"med25519\"]],\n    arms: {\n      ed25519: xdr.lookup(\"Uint256\"),\n      med25519: xdr.lookup(\"MuxedAccountMed25519\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct DecoratedSignature\n  //   {\n  //       SignatureHint hint;  // last 4 bytes of the public key, used as a hint\n  //       Signature signature; // actual signature\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"DecoratedSignature\", [[\"hint\", xdr.lookup(\"SignatureHint\")], [\"signature\", xdr.lookup(\"Signature\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum OperationType\n  //   {\n  //       CREATE_ACCOUNT = 0,\n  //       PAYMENT = 1,\n  //       PATH_PAYMENT_STRICT_RECEIVE = 2,\n  //       MANAGE_SELL_OFFER = 3,\n  //       CREATE_PASSIVE_SELL_OFFER = 4,\n  //       SET_OPTIONS = 5,\n  //       CHANGE_TRUST = 6,\n  //       ALLOW_TRUST = 7,\n  //       ACCOUNT_MERGE = 8,\n  //       INFLATION = 9,\n  //       MANAGE_DATA = 10,\n  //       BUMP_SEQUENCE = 11,\n  //       MANAGE_BUY_OFFER = 12,\n  //       PATH_PAYMENT_STRICT_SEND = 13,\n  //       CREATE_CLAIMABLE_BALANCE = 14,\n  //       CLAIM_CLAIMABLE_BALANCE = 15,\n  //       BEGIN_SPONSORING_FUTURE_RESERVES = 16,\n  //       END_SPONSORING_FUTURE_RESERVES = 17,\n  //       REVOKE_SPONSORSHIP = 18,\n  //       CLAWBACK = 19,\n  //       CLAWBACK_CLAIMABLE_BALANCE = 20,\n  //       SET_TRUST_LINE_FLAGS = 21,\n  //       LIQUIDITY_POOL_DEPOSIT = 22,\n  //       LIQUIDITY_POOL_WITHDRAW = 23,\n  //       INVOKE_HOST_FUNCTION = 24,\n  //       EXTEND_FOOTPRINT_TTL = 25,\n  //       RESTORE_FOOTPRINT = 26\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"OperationType\", {\n    createAccount: 0,\n    payment: 1,\n    pathPaymentStrictReceive: 2,\n    manageSellOffer: 3,\n    createPassiveSellOffer: 4,\n    setOptions: 5,\n    changeTrust: 6,\n    allowTrust: 7,\n    accountMerge: 8,\n    inflation: 9,\n    manageData: 10,\n    bumpSequence: 11,\n    manageBuyOffer: 12,\n    pathPaymentStrictSend: 13,\n    createClaimableBalance: 14,\n    claimClaimableBalance: 15,\n    beginSponsoringFutureReserves: 16,\n    endSponsoringFutureReserves: 17,\n    revokeSponsorship: 18,\n    clawback: 19,\n    clawbackClaimableBalance: 20,\n    setTrustLineFlags: 21,\n    liquidityPoolDeposit: 22,\n    liquidityPoolWithdraw: 23,\n    invokeHostFunction: 24,\n    extendFootprintTtl: 25,\n    restoreFootprint: 26\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct CreateAccountOp\n  //   {\n  //       AccountID destination; // account to create\n  //       int64 startingBalance; // amount they end up with\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreateAccountOp\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"startingBalance\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PaymentOp\n  //   {\n  //       MuxedAccount destination; // recipient of the payment\n  //       Asset asset;              // what they end up with\n  //       int64 amount;             // amount they end up with\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PaymentOp\", [[\"destination\", xdr.lookup(\"MuxedAccount\")], [\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PathPaymentStrictReceiveOp\n  //   {\n  //       Asset sendAsset; // asset we pay with\n  //       int64 sendMax;   // the maximum amount of sendAsset to\n  //                        // send (excluding fees).\n  //                        // The operation will fail if can't be met\n  //\n  //       MuxedAccount destination; // recipient of the payment\n  //       Asset destAsset;          // what they end up with\n  //       int64 destAmount;         // amount they end up with\n  //\n  //       Asset path<5>; // additional hops it must go through to get there\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictReceiveOp\", [[\"sendAsset\", xdr.lookup(\"Asset\")], [\"sendMax\", xdr.lookup(\"Int64\")], [\"destination\", xdr.lookup(\"MuxedAccount\")], [\"destAsset\", xdr.lookup(\"Asset\")], [\"destAmount\", xdr.lookup(\"Int64\")], [\"path\", xdr.varArray(xdr.lookup(\"Asset\"), 5)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PathPaymentStrictSendOp\n  //   {\n  //       Asset sendAsset;  // asset we pay with\n  //       int64 sendAmount; // amount of sendAsset to send (excluding fees)\n  //\n  //       MuxedAccount destination; // recipient of the payment\n  //       Asset destAsset;          // what they end up with\n  //       int64 destMin;            // the minimum amount of dest asset to\n  //                                 // be received\n  //                                 // The operation will fail if it can't be met\n  //\n  //       Asset path<5>; // additional hops it must go through to get there\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictSendOp\", [[\"sendAsset\", xdr.lookup(\"Asset\")], [\"sendAmount\", xdr.lookup(\"Int64\")], [\"destination\", xdr.lookup(\"MuxedAccount\")], [\"destAsset\", xdr.lookup(\"Asset\")], [\"destMin\", xdr.lookup(\"Int64\")], [\"path\", xdr.varArray(xdr.lookup(\"Asset\"), 5)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageSellOfferOp\n  //   {\n  //       Asset selling;\n  //       Asset buying;\n  //       int64 amount; // amount being sold. if set to 0, delete the offer\n  //       Price price;  // price of thing being sold in terms of what you are buying\n  //\n  //       // 0=create a new offer, otherwise edit an existing offer\n  //       int64 offerID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageSellOfferOp\", [[\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")], [\"offerId\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageBuyOfferOp\n  //   {\n  //       Asset selling;\n  //       Asset buying;\n  //       int64 buyAmount; // amount being bought. if set to 0, delete the offer\n  //       Price price;     // price of thing being bought in terms of what you are\n  //                        // selling\n  //\n  //       // 0=create a new offer, otherwise edit an existing offer\n  //       int64 offerID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageBuyOfferOp\", [[\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"buyAmount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")], [\"offerId\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct CreatePassiveSellOfferOp\n  //   {\n  //       Asset selling; // A\n  //       Asset buying;  // B\n  //       int64 amount;  // amount taker gets\n  //       Price price;   // cost of A in terms of B\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreatePassiveSellOfferOp\", [[\"selling\", xdr.lookup(\"Asset\")], [\"buying\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"price\", xdr.lookup(\"Price\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SetOptionsOp\n  //   {\n  //       AccountID* inflationDest; // sets the inflation destination\n  //\n  //       uint32* clearFlags; // which flags to clear\n  //       uint32* setFlags;   // which flags to set\n  //\n  //       // account threshold manipulation\n  //       uint32* masterWeight; // weight of the master account\n  //       uint32* lowThreshold;\n  //       uint32* medThreshold;\n  //       uint32* highThreshold;\n  //\n  //       string32* homeDomain; // sets the home domain\n  //\n  //       // Add, update or remove a signer for the account\n  //       // signer is deleted if the weight is 0\n  //       Signer* signer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SetOptionsOp\", [[\"inflationDest\", xdr.option(xdr.lookup(\"AccountId\"))], [\"clearFlags\", xdr.option(xdr.lookup(\"Uint32\"))], [\"setFlags\", xdr.option(xdr.lookup(\"Uint32\"))], [\"masterWeight\", xdr.option(xdr.lookup(\"Uint32\"))], [\"lowThreshold\", xdr.option(xdr.lookup(\"Uint32\"))], [\"medThreshold\", xdr.option(xdr.lookup(\"Uint32\"))], [\"highThreshold\", xdr.option(xdr.lookup(\"Uint32\"))], [\"homeDomain\", xdr.option(xdr.lookup(\"String32\"))], [\"signer\", xdr.option(xdr.lookup(\"Signer\"))]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ChangeTrustAsset switch (AssetType type)\n  //   {\n  //   case ASSET_TYPE_NATIVE: // Not credit\n  //       void;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM4:\n  //       AlphaNum4 alphaNum4;\n  //\n  //   case ASSET_TYPE_CREDIT_ALPHANUM12:\n  //       AlphaNum12 alphaNum12;\n  //\n  //   case ASSET_TYPE_POOL_SHARE:\n  //       LiquidityPoolParameters liquidityPool;\n  //\n  //       // add other asset types here in the future\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ChangeTrustAsset\", {\n    switchOn: xdr.lookup(\"AssetType\"),\n    switchName: \"type\",\n    switches: [[\"assetTypeNative\", xdr[\"void\"]()], [\"assetTypeCreditAlphanum4\", \"alphaNum4\"], [\"assetTypeCreditAlphanum12\", \"alphaNum12\"], [\"assetTypePoolShare\", \"liquidityPool\"]],\n    arms: {\n      alphaNum4: xdr.lookup(\"AlphaNum4\"),\n      alphaNum12: xdr.lookup(\"AlphaNum12\"),\n      liquidityPool: xdr.lookup(\"LiquidityPoolParameters\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ChangeTrustOp\n  //   {\n  //       ChangeTrustAsset line;\n  //\n  //       // if limit is set to 0, deletes the trust line\n  //       int64 limit;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ChangeTrustOp\", [[\"line\", xdr.lookup(\"ChangeTrustAsset\")], [\"limit\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct AllowTrustOp\n  //   {\n  //       AccountID trustor;\n  //       AssetCode asset;\n  //\n  //       // One of 0, AUTHORIZED_FLAG, or AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG\n  //       uint32 authorize;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"AllowTrustOp\", [[\"trustor\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"AssetCode\")], [\"authorize\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageDataOp\n  //   {\n  //       string64 dataName;\n  //       DataValue* dataValue; // set to null to clear\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageDataOp\", [[\"dataName\", xdr.lookup(\"String64\")], [\"dataValue\", xdr.option(xdr.lookup(\"DataValue\"))]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct BumpSequenceOp\n  //   {\n  //       SequenceNumber bumpTo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"BumpSequenceOp\", [[\"bumpTo\", xdr.lookup(\"SequenceNumber\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct CreateClaimableBalanceOp\n  //   {\n  //       Asset asset;\n  //       int64 amount;\n  //       Claimant claimants<10>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreateClaimableBalanceOp\", [[\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")], [\"claimants\", xdr.varArray(xdr.lookup(\"Claimant\"), 10)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimClaimableBalanceOp\n  //   {\n  //       ClaimableBalanceID balanceID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimClaimableBalanceOp\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct BeginSponsoringFutureReservesOp\n  //   {\n  //       AccountID sponsoredID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"BeginSponsoringFutureReservesOp\", [[\"sponsoredId\", xdr.lookup(\"AccountId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum RevokeSponsorshipType\n  //   {\n  //       REVOKE_SPONSORSHIP_LEDGER_ENTRY = 0,\n  //       REVOKE_SPONSORSHIP_SIGNER = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"RevokeSponsorshipType\", {\n    revokeSponsorshipLedgerEntry: 0,\n    revokeSponsorshipSigner: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID accountID;\n  //           SignerKey signerKey;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"RevokeSponsorshipOpSigner\", [[\"accountId\", xdr.lookup(\"AccountId\")], [\"signerKey\", xdr.lookup(\"SignerKey\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union RevokeSponsorshipOp switch (RevokeSponsorshipType type)\n  //   {\n  //   case REVOKE_SPONSORSHIP_LEDGER_ENTRY:\n  //       LedgerKey ledgerKey;\n  //   case REVOKE_SPONSORSHIP_SIGNER:\n  //       struct\n  //       {\n  //           AccountID accountID;\n  //           SignerKey signerKey;\n  //       } signer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"RevokeSponsorshipOp\", {\n    switchOn: xdr.lookup(\"RevokeSponsorshipType\"),\n    switchName: \"type\",\n    switches: [[\"revokeSponsorshipLedgerEntry\", \"ledgerKey\"], [\"revokeSponsorshipSigner\", \"signer\"]],\n    arms: {\n      ledgerKey: xdr.lookup(\"LedgerKey\"),\n      signer: xdr.lookup(\"RevokeSponsorshipOpSigner\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClawbackOp\n  //   {\n  //       Asset asset;\n  //       MuxedAccount from;\n  //       int64 amount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClawbackOp\", [[\"asset\", xdr.lookup(\"Asset\")], [\"from\", xdr.lookup(\"MuxedAccount\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClawbackClaimableBalanceOp\n  //   {\n  //       ClaimableBalanceID balanceID;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClawbackClaimableBalanceOp\", [[\"balanceId\", xdr.lookup(\"ClaimableBalanceId\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SetTrustLineFlagsOp\n  //   {\n  //       AccountID trustor;\n  //       Asset asset;\n  //\n  //       uint32 clearFlags; // which flags to clear\n  //       uint32 setFlags;   // which flags to set\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SetTrustLineFlagsOp\", [[\"trustor\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"Asset\")], [\"clearFlags\", xdr.lookup(\"Uint32\")], [\"setFlags\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const LIQUIDITY_POOL_FEE_V18 = 30;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"LIQUIDITY_POOL_FEE_V18\", 30);\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolDepositOp\n  //   {\n  //       PoolID liquidityPoolID;\n  //       int64 maxAmountA; // maximum amount of first asset to deposit\n  //       int64 maxAmountB; // maximum amount of second asset to deposit\n  //       Price minPrice;   // minimum depositA/depositB\n  //       Price maxPrice;   // maximum depositA/depositB\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolDepositOp\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"maxAmountA\", xdr.lookup(\"Int64\")], [\"maxAmountB\", xdr.lookup(\"Int64\")], [\"minPrice\", xdr.lookup(\"Price\")], [\"maxPrice\", xdr.lookup(\"Price\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LiquidityPoolWithdrawOp\n  //   {\n  //       PoolID liquidityPoolID;\n  //       int64 amount;     // amount of pool shares to withdraw\n  //       int64 minAmountA; // minimum amount of first asset to withdraw\n  //       int64 minAmountB; // minimum amount of second asset to withdraw\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LiquidityPoolWithdrawOp\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"amount\", xdr.lookup(\"Int64\")], [\"minAmountA\", xdr.lookup(\"Int64\")], [\"minAmountB\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum HostFunctionType\n  //   {\n  //       HOST_FUNCTION_TYPE_INVOKE_CONTRACT = 0,\n  //       HOST_FUNCTION_TYPE_CREATE_CONTRACT = 1,\n  //       HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM = 2,\n  //       HOST_FUNCTION_TYPE_CREATE_CONTRACT_V2 = 3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"HostFunctionType\", {\n    hostFunctionTypeInvokeContract: 0,\n    hostFunctionTypeCreateContract: 1,\n    hostFunctionTypeUploadContractWasm: 2,\n    hostFunctionTypeCreateContractV2: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ContractIDPreimageType\n  //   {\n  //       CONTRACT_ID_PREIMAGE_FROM_ADDRESS = 0,\n  //       CONTRACT_ID_PREIMAGE_FROM_ASSET = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ContractIdPreimageType\", {\n    contractIdPreimageFromAddress: 0,\n    contractIdPreimageFromAsset: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           SCAddress address;\n  //           uint256 salt;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractIdPreimageFromAddress\", [[\"address\", xdr.lookup(\"ScAddress\")], [\"salt\", xdr.lookup(\"Uint256\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ContractIDPreimage switch (ContractIDPreimageType type)\n  //   {\n  //   case CONTRACT_ID_PREIMAGE_FROM_ADDRESS:\n  //       struct\n  //       {\n  //           SCAddress address;\n  //           uint256 salt;\n  //       } fromAddress;\n  //   case CONTRACT_ID_PREIMAGE_FROM_ASSET:\n  //       Asset fromAsset;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ContractIdPreimage\", {\n    switchOn: xdr.lookup(\"ContractIdPreimageType\"),\n    switchName: \"type\",\n    switches: [[\"contractIdPreimageFromAddress\", \"fromAddress\"], [\"contractIdPreimageFromAsset\", \"fromAsset\"]],\n    arms: {\n      fromAddress: xdr.lookup(\"ContractIdPreimageFromAddress\"),\n      fromAsset: xdr.lookup(\"Asset\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct CreateContractArgs\n  //   {\n  //       ContractIDPreimage contractIDPreimage;\n  //       ContractExecutable executable;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreateContractArgs\", [[\"contractIdPreimage\", xdr.lookup(\"ContractIdPreimage\")], [\"executable\", xdr.lookup(\"ContractExecutable\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct CreateContractArgsV2\n  //   {\n  //       ContractIDPreimage contractIDPreimage;\n  //       ContractExecutable executable;\n  //       // Arguments of the contract's constructor.\n  //       SCVal constructorArgs<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"CreateContractArgsV2\", [[\"contractIdPreimage\", xdr.lookup(\"ContractIdPreimage\")], [\"executable\", xdr.lookup(\"ContractExecutable\")], [\"constructorArgs\", xdr.varArray(xdr.lookup(\"ScVal\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct InvokeContractArgs {\n  //       SCAddress contractAddress;\n  //       SCSymbol functionName;\n  //       SCVal args<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InvokeContractArgs\", [[\"contractAddress\", xdr.lookup(\"ScAddress\")], [\"functionName\", xdr.lookup(\"ScSymbol\")], [\"args\", xdr.varArray(xdr.lookup(\"ScVal\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union HostFunction switch (HostFunctionType type)\n  //   {\n  //   case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:\n  //       InvokeContractArgs invokeContract;\n  //   case HOST_FUNCTION_TYPE_CREATE_CONTRACT:\n  //       CreateContractArgs createContract;\n  //   case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM:\n  //       opaque wasm<>;\n  //   case HOST_FUNCTION_TYPE_CREATE_CONTRACT_V2:\n  //       CreateContractArgsV2 createContractV2;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"HostFunction\", {\n    switchOn: xdr.lookup(\"HostFunctionType\"),\n    switchName: \"type\",\n    switches: [[\"hostFunctionTypeInvokeContract\", \"invokeContract\"], [\"hostFunctionTypeCreateContract\", \"createContract\"], [\"hostFunctionTypeUploadContractWasm\", \"wasm\"], [\"hostFunctionTypeCreateContractV2\", \"createContractV2\"]],\n    arms: {\n      invokeContract: xdr.lookup(\"InvokeContractArgs\"),\n      createContract: xdr.lookup(\"CreateContractArgs\"),\n      wasm: xdr.varOpaque(),\n      createContractV2: xdr.lookup(\"CreateContractArgsV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SorobanAuthorizedFunctionType\n  //   {\n  //       SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN = 0,\n  //       SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN = 1,\n  //       SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_V2_HOST_FN = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SorobanAuthorizedFunctionType\", {\n    sorobanAuthorizedFunctionTypeContractFn: 0,\n    sorobanAuthorizedFunctionTypeCreateContractHostFn: 1,\n    sorobanAuthorizedFunctionTypeCreateContractV2HostFn: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SorobanAuthorizedFunction switch (SorobanAuthorizedFunctionType type)\n  //   {\n  //   case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:\n  //       InvokeContractArgs contractFn;\n  //   // This variant of auth payload for creating new contract instances\n  //   // doesn't allow specifying the constructor arguments, creating contracts\n  //   // with constructors that take arguments is only possible by authorizing\n  //   // `SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_V2_HOST_FN`\n  //   // (protocol 22+).\n  //   case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:\n  //       CreateContractArgs createContractHostFn;\n  //   // This variant of auth payload for creating new contract instances\n  //   // is only accepted in and after protocol 22. It allows authorizing the\n  //   // contract constructor arguments.\n  //   case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_V2_HOST_FN:\n  //       CreateContractArgsV2 createContractV2HostFn;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SorobanAuthorizedFunction\", {\n    switchOn: xdr.lookup(\"SorobanAuthorizedFunctionType\"),\n    switchName: \"type\",\n    switches: [[\"sorobanAuthorizedFunctionTypeContractFn\", \"contractFn\"], [\"sorobanAuthorizedFunctionTypeCreateContractHostFn\", \"createContractHostFn\"], [\"sorobanAuthorizedFunctionTypeCreateContractV2HostFn\", \"createContractV2HostFn\"]],\n    arms: {\n      contractFn: xdr.lookup(\"InvokeContractArgs\"),\n      createContractHostFn: xdr.lookup(\"CreateContractArgs\"),\n      createContractV2HostFn: xdr.lookup(\"CreateContractArgsV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanAuthorizedInvocation\n  //   {\n  //       SorobanAuthorizedFunction function;\n  //       SorobanAuthorizedInvocation subInvocations<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanAuthorizedInvocation\", [[\"function\", xdr.lookup(\"SorobanAuthorizedFunction\")], [\"subInvocations\", xdr.varArray(xdr.lookup(\"SorobanAuthorizedInvocation\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanAddressCredentials\n  //   {\n  //       SCAddress address;\n  //       int64 nonce;\n  //       uint32 signatureExpirationLedger;\n  //       SCVal signature;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanAddressCredentials\", [[\"address\", xdr.lookup(\"ScAddress\")], [\"nonce\", xdr.lookup(\"Int64\")], [\"signatureExpirationLedger\", xdr.lookup(\"Uint32\")], [\"signature\", xdr.lookup(\"ScVal\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SorobanCredentialsType\n  //   {\n  //       SOROBAN_CREDENTIALS_SOURCE_ACCOUNT = 0,\n  //       SOROBAN_CREDENTIALS_ADDRESS = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SorobanCredentialsType\", {\n    sorobanCredentialsSourceAccount: 0,\n    sorobanCredentialsAddress: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SorobanCredentials switch (SorobanCredentialsType type)\n  //   {\n  //   case SOROBAN_CREDENTIALS_SOURCE_ACCOUNT:\n  //       void;\n  //   case SOROBAN_CREDENTIALS_ADDRESS:\n  //       SorobanAddressCredentials address;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SorobanCredentials\", {\n    switchOn: xdr.lookup(\"SorobanCredentialsType\"),\n    switchName: \"type\",\n    switches: [[\"sorobanCredentialsSourceAccount\", xdr[\"void\"]()], [\"sorobanCredentialsAddress\", \"address\"]],\n    arms: {\n      address: xdr.lookup(\"SorobanAddressCredentials\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanAuthorizationEntry\n  //   {\n  //       SorobanCredentials credentials;\n  //       SorobanAuthorizedInvocation rootInvocation;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanAuthorizationEntry\", [[\"credentials\", xdr.lookup(\"SorobanCredentials\")], [\"rootInvocation\", xdr.lookup(\"SorobanAuthorizedInvocation\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct InvokeHostFunctionOp\n  //   {\n  //       // Host function to invoke.\n  //       HostFunction hostFunction;\n  //       // Per-address authorizations for this host function.\n  //       SorobanAuthorizationEntry auth<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InvokeHostFunctionOp\", [[\"hostFunction\", xdr.lookup(\"HostFunction\")], [\"auth\", xdr.varArray(xdr.lookup(\"SorobanAuthorizationEntry\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ExtendFootprintTTLOp\n  //   {\n  //       ExtensionPoint ext;\n  //       uint32 extendTo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ExtendFootprintTtlOp\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"extendTo\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct RestoreFootprintOp\n  //   {\n  //       ExtensionPoint ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"RestoreFootprintOp\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountOp createAccountOp;\n  //       case PAYMENT:\n  //           PaymentOp paymentOp;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferOp manageSellOfferOp;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           CreatePassiveSellOfferOp createPassiveSellOfferOp;\n  //       case SET_OPTIONS:\n  //           SetOptionsOp setOptionsOp;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustOp changeTrustOp;\n  //       case ALLOW_TRUST:\n  //           AllowTrustOp allowTrustOp;\n  //       case ACCOUNT_MERGE:\n  //           MuxedAccount destination;\n  //       case INFLATION:\n  //           void;\n  //       case MANAGE_DATA:\n  //           ManageDataOp manageDataOp;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceOp bumpSequenceOp;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferOp manageBuyOfferOp;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendOp pathPaymentStrictSendOp;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceOp createClaimableBalanceOp;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceOp claimClaimableBalanceOp;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           void;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipOp revokeSponsorshipOp;\n  //       case CLAWBACK:\n  //           ClawbackOp clawbackOp;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceOp clawbackClaimableBalanceOp;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsOp setTrustLineFlagsOp;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositOp liquidityPoolDepositOp;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawOp liquidityPoolWithdrawOp;\n  //       case INVOKE_HOST_FUNCTION:\n  //           InvokeHostFunctionOp invokeHostFunctionOp;\n  //       case EXTEND_FOOTPRINT_TTL:\n  //           ExtendFootprintTTLOp extendFootprintTTLOp;\n  //       case RESTORE_FOOTPRINT:\n  //           RestoreFootprintOp restoreFootprintOp;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"OperationBody\", {\n    switchOn: xdr.lookup(\"OperationType\"),\n    switchName: \"type\",\n    switches: [[\"createAccount\", \"createAccountOp\"], [\"payment\", \"paymentOp\"], [\"pathPaymentStrictReceive\", \"pathPaymentStrictReceiveOp\"], [\"manageSellOffer\", \"manageSellOfferOp\"], [\"createPassiveSellOffer\", \"createPassiveSellOfferOp\"], [\"setOptions\", \"setOptionsOp\"], [\"changeTrust\", \"changeTrustOp\"], [\"allowTrust\", \"allowTrustOp\"], [\"accountMerge\", \"destination\"], [\"inflation\", xdr[\"void\"]()], [\"manageData\", \"manageDataOp\"], [\"bumpSequence\", \"bumpSequenceOp\"], [\"manageBuyOffer\", \"manageBuyOfferOp\"], [\"pathPaymentStrictSend\", \"pathPaymentStrictSendOp\"], [\"createClaimableBalance\", \"createClaimableBalanceOp\"], [\"claimClaimableBalance\", \"claimClaimableBalanceOp\"], [\"beginSponsoringFutureReserves\", \"beginSponsoringFutureReservesOp\"], [\"endSponsoringFutureReserves\", xdr[\"void\"]()], [\"revokeSponsorship\", \"revokeSponsorshipOp\"], [\"clawback\", \"clawbackOp\"], [\"clawbackClaimableBalance\", \"clawbackClaimableBalanceOp\"], [\"setTrustLineFlags\", \"setTrustLineFlagsOp\"], [\"liquidityPoolDeposit\", \"liquidityPoolDepositOp\"], [\"liquidityPoolWithdraw\", \"liquidityPoolWithdrawOp\"], [\"invokeHostFunction\", \"invokeHostFunctionOp\"], [\"extendFootprintTtl\", \"extendFootprintTtlOp\"], [\"restoreFootprint\", \"restoreFootprintOp\"]],\n    arms: {\n      createAccountOp: xdr.lookup(\"CreateAccountOp\"),\n      paymentOp: xdr.lookup(\"PaymentOp\"),\n      pathPaymentStrictReceiveOp: xdr.lookup(\"PathPaymentStrictReceiveOp\"),\n      manageSellOfferOp: xdr.lookup(\"ManageSellOfferOp\"),\n      createPassiveSellOfferOp: xdr.lookup(\"CreatePassiveSellOfferOp\"),\n      setOptionsOp: xdr.lookup(\"SetOptionsOp\"),\n      changeTrustOp: xdr.lookup(\"ChangeTrustOp\"),\n      allowTrustOp: xdr.lookup(\"AllowTrustOp\"),\n      destination: xdr.lookup(\"MuxedAccount\"),\n      manageDataOp: xdr.lookup(\"ManageDataOp\"),\n      bumpSequenceOp: xdr.lookup(\"BumpSequenceOp\"),\n      manageBuyOfferOp: xdr.lookup(\"ManageBuyOfferOp\"),\n      pathPaymentStrictSendOp: xdr.lookup(\"PathPaymentStrictSendOp\"),\n      createClaimableBalanceOp: xdr.lookup(\"CreateClaimableBalanceOp\"),\n      claimClaimableBalanceOp: xdr.lookup(\"ClaimClaimableBalanceOp\"),\n      beginSponsoringFutureReservesOp: xdr.lookup(\"BeginSponsoringFutureReservesOp\"),\n      revokeSponsorshipOp: xdr.lookup(\"RevokeSponsorshipOp\"),\n      clawbackOp: xdr.lookup(\"ClawbackOp\"),\n      clawbackClaimableBalanceOp: xdr.lookup(\"ClawbackClaimableBalanceOp\"),\n      setTrustLineFlagsOp: xdr.lookup(\"SetTrustLineFlagsOp\"),\n      liquidityPoolDepositOp: xdr.lookup(\"LiquidityPoolDepositOp\"),\n      liquidityPoolWithdrawOp: xdr.lookup(\"LiquidityPoolWithdrawOp\"),\n      invokeHostFunctionOp: xdr.lookup(\"InvokeHostFunctionOp\"),\n      extendFootprintTtlOp: xdr.lookup(\"ExtendFootprintTtlOp\"),\n      restoreFootprintOp: xdr.lookup(\"RestoreFootprintOp\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Operation\n  //   {\n  //       // sourceAccount is the account used to run the operation\n  //       // if not set, the runtime defaults to \"sourceAccount\" specified at\n  //       // the transaction level\n  //       MuxedAccount* sourceAccount;\n  //\n  //       union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountOp createAccountOp;\n  //       case PAYMENT:\n  //           PaymentOp paymentOp;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferOp manageSellOfferOp;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           CreatePassiveSellOfferOp createPassiveSellOfferOp;\n  //       case SET_OPTIONS:\n  //           SetOptionsOp setOptionsOp;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustOp changeTrustOp;\n  //       case ALLOW_TRUST:\n  //           AllowTrustOp allowTrustOp;\n  //       case ACCOUNT_MERGE:\n  //           MuxedAccount destination;\n  //       case INFLATION:\n  //           void;\n  //       case MANAGE_DATA:\n  //           ManageDataOp manageDataOp;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceOp bumpSequenceOp;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferOp manageBuyOfferOp;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendOp pathPaymentStrictSendOp;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceOp createClaimableBalanceOp;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceOp claimClaimableBalanceOp;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           void;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipOp revokeSponsorshipOp;\n  //       case CLAWBACK:\n  //           ClawbackOp clawbackOp;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceOp clawbackClaimableBalanceOp;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsOp setTrustLineFlagsOp;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositOp liquidityPoolDepositOp;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawOp liquidityPoolWithdrawOp;\n  //       case INVOKE_HOST_FUNCTION:\n  //           InvokeHostFunctionOp invokeHostFunctionOp;\n  //       case EXTEND_FOOTPRINT_TTL:\n  //           ExtendFootprintTTLOp extendFootprintTTLOp;\n  //       case RESTORE_FOOTPRINT:\n  //           RestoreFootprintOp restoreFootprintOp;\n  //       }\n  //       body;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Operation\", [[\"sourceAccount\", xdr.option(xdr.lookup(\"MuxedAccount\"))], [\"body\", xdr.lookup(\"OperationBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"HashIdPreimageOperationId\", [[\"sourceAccount\", xdr.lookup(\"AccountId\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"opNum\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //           PoolID liquidityPoolID;\n  //           Asset asset;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"HashIdPreimageRevokeId\", [[\"sourceAccount\", xdr.lookup(\"AccountId\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"opNum\", xdr.lookup(\"Uint32\")], [\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"asset\", xdr.lookup(\"Asset\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           Hash networkID;\n  //           ContractIDPreimage contractIDPreimage;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"HashIdPreimageContractId\", [[\"networkId\", xdr.lookup(\"Hash\")], [\"contractIdPreimage\", xdr.lookup(\"ContractIdPreimage\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           Hash networkID;\n  //           int64 nonce;\n  //           uint32 signatureExpirationLedger;\n  //           SorobanAuthorizedInvocation invocation;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"HashIdPreimageSorobanAuthorization\", [[\"networkId\", xdr.lookup(\"Hash\")], [\"nonce\", xdr.lookup(\"Int64\")], [\"signatureExpirationLedger\", xdr.lookup(\"Uint32\")], [\"invocation\", xdr.lookup(\"SorobanAuthorizedInvocation\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union HashIDPreimage switch (EnvelopeType type)\n  //   {\n  //   case ENVELOPE_TYPE_OP_ID:\n  //       struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //       } operationID;\n  //   case ENVELOPE_TYPE_POOL_REVOKE_OP_ID:\n  //       struct\n  //       {\n  //           AccountID sourceAccount;\n  //           SequenceNumber seqNum;\n  //           uint32 opNum;\n  //           PoolID liquidityPoolID;\n  //           Asset asset;\n  //       } revokeID;\n  //   case ENVELOPE_TYPE_CONTRACT_ID:\n  //       struct\n  //       {\n  //           Hash networkID;\n  //           ContractIDPreimage contractIDPreimage;\n  //       } contractID;\n  //   case ENVELOPE_TYPE_SOROBAN_AUTHORIZATION:\n  //       struct\n  //       {\n  //           Hash networkID;\n  //           int64 nonce;\n  //           uint32 signatureExpirationLedger;\n  //           SorobanAuthorizedInvocation invocation;\n  //       } sorobanAuthorization;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"HashIdPreimage\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeOpId\", \"operationId\"], [\"envelopeTypePoolRevokeOpId\", \"revokeId\"], [\"envelopeTypeContractId\", \"contractId\"], [\"envelopeTypeSorobanAuthorization\", \"sorobanAuthorization\"]],\n    arms: {\n      operationId: xdr.lookup(\"HashIdPreimageOperationId\"),\n      revokeId: xdr.lookup(\"HashIdPreimageRevokeId\"),\n      contractId: xdr.lookup(\"HashIdPreimageContractId\"),\n      sorobanAuthorization: xdr.lookup(\"HashIdPreimageSorobanAuthorization\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum MemoType\n  //   {\n  //       MEMO_NONE = 0,\n  //       MEMO_TEXT = 1,\n  //       MEMO_ID = 2,\n  //       MEMO_HASH = 3,\n  //       MEMO_RETURN = 4\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"MemoType\", {\n    memoNone: 0,\n    memoText: 1,\n    memoId: 2,\n    memoHash: 3,\n    memoReturn: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union Memo switch (MemoType type)\n  //   {\n  //   case MEMO_NONE:\n  //       void;\n  //   case MEMO_TEXT:\n  //       string text<28>;\n  //   case MEMO_ID:\n  //       uint64 id;\n  //   case MEMO_HASH:\n  //       Hash hash; // the hash of what to pull from the content server\n  //   case MEMO_RETURN:\n  //       Hash retHash; // the hash of the tx you are rejecting\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Memo\", {\n    switchOn: xdr.lookup(\"MemoType\"),\n    switchName: \"type\",\n    switches: [[\"memoNone\", xdr[\"void\"]()], [\"memoText\", \"text\"], [\"memoId\", \"id\"], [\"memoHash\", \"hash\"], [\"memoReturn\", \"retHash\"]],\n    arms: {\n      text: xdr.string(28),\n      id: xdr.lookup(\"Uint64\"),\n      hash: xdr.lookup(\"Hash\"),\n      retHash: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TimeBounds\n  //   {\n  //       TimePoint minTime;\n  //       TimePoint maxTime; // 0 here means no maxTime\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TimeBounds\", [[\"minTime\", xdr.lookup(\"TimePoint\")], [\"maxTime\", xdr.lookup(\"TimePoint\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerBounds\n  //   {\n  //       uint32 minLedger;\n  //       uint32 maxLedger; // 0 here means no maxLedger\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerBounds\", [[\"minLedger\", xdr.lookup(\"Uint32\")], [\"maxLedger\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct PreconditionsV2\n  //   {\n  //       TimeBounds* timeBounds;\n  //\n  //       // Transaction only valid for ledger numbers n such that\n  //       // minLedger <= n < maxLedger (if maxLedger == 0, then\n  //       // only minLedger is checked)\n  //       LedgerBounds* ledgerBounds;\n  //\n  //       // If NULL, only valid when sourceAccount's sequence number\n  //       // is seqNum - 1.  Otherwise, valid when sourceAccount's\n  //       // sequence number n satisfies minSeqNum <= n < tx.seqNum.\n  //       // Note that after execution the account's sequence number\n  //       // is always raised to tx.seqNum, and a transaction is not\n  //       // valid if tx.seqNum is too high to ensure replay protection.\n  //       SequenceNumber* minSeqNum;\n  //\n  //       // For the transaction to be valid, the current ledger time must\n  //       // be at least minSeqAge greater than sourceAccount's seqTime.\n  //       Duration minSeqAge;\n  //\n  //       // For the transaction to be valid, the current ledger number\n  //       // must be at least minSeqLedgerGap greater than sourceAccount's\n  //       // seqLedger.\n  //       uint32 minSeqLedgerGap;\n  //\n  //       // For the transaction to be valid, there must be a signature\n  //       // corresponding to every Signer in this array, even if the\n  //       // signature is not otherwise required by the sourceAccount or\n  //       // operations.\n  //       SignerKey extraSigners<2>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"PreconditionsV2\", [[\"timeBounds\", xdr.option(xdr.lookup(\"TimeBounds\"))], [\"ledgerBounds\", xdr.option(xdr.lookup(\"LedgerBounds\"))], [\"minSeqNum\", xdr.option(xdr.lookup(\"SequenceNumber\"))], [\"minSeqAge\", xdr.lookup(\"Duration\")], [\"minSeqLedgerGap\", xdr.lookup(\"Uint32\")], [\"extraSigners\", xdr.varArray(xdr.lookup(\"SignerKey\"), 2)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum PreconditionType\n  //   {\n  //       PRECOND_NONE = 0,\n  //       PRECOND_TIME = 1,\n  //       PRECOND_V2 = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"PreconditionType\", {\n    precondNone: 0,\n    precondTime: 1,\n    precondV2: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union Preconditions switch (PreconditionType type)\n  //   {\n  //   case PRECOND_NONE:\n  //       void;\n  //   case PRECOND_TIME:\n  //       TimeBounds timeBounds;\n  //   case PRECOND_V2:\n  //       PreconditionsV2 v2;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"Preconditions\", {\n    switchOn: xdr.lookup(\"PreconditionType\"),\n    switchName: \"type\",\n    switches: [[\"precondNone\", xdr[\"void\"]()], [\"precondTime\", \"timeBounds\"], [\"precondV2\", \"v2\"]],\n    arms: {\n      timeBounds: xdr.lookup(\"TimeBounds\"),\n      v2: xdr.lookup(\"PreconditionsV2\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct LedgerFootprint\n  //   {\n  //       LedgerKey readOnly<>;\n  //       LedgerKey readWrite<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"LedgerFootprint\", [[\"readOnly\", xdr.varArray(xdr.lookup(\"LedgerKey\"), 2147483647)], [\"readWrite\", xdr.varArray(xdr.lookup(\"LedgerKey\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ArchivalProofType\n  //   {\n  //       EXISTENCE = 0,\n  //       NONEXISTENCE = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ArchivalProofType\", {\n    existence: 0,\n    nonexistence: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ArchivalProofNode\n  //   {\n  //       uint32 index;\n  //       Hash hash;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ArchivalProofNode\", [[\"index\", xdr.lookup(\"Uint32\")], [\"hash\", xdr.lookup(\"Hash\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef ArchivalProofNode ProofLevel<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ProofLevel\", xdr.varArray(xdr.lookup(\"ArchivalProofNode\"), 2147483647));\n\n  // === xdr source ============================================================\n  //\n  //   struct NonexistenceProofBody\n  //   {\n  //       ColdArchiveBucketEntry entriesToProve<>;\n  //\n  //       // Vector of vectors, where proofLevels[level]\n  //       // contains all HashNodes that correspond with that level\n  //       ProofLevel proofLevels<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"NonexistenceProofBody\", [[\"entriesToProve\", xdr.varArray(xdr.lookup(\"ColdArchiveBucketEntry\"), 2147483647)], [\"proofLevels\", xdr.varArray(xdr.lookup(\"ProofLevel\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ExistenceProofBody\n  //   {\n  //       LedgerKey keysToProve<>;\n  //\n  //       // Bounds for each key being proved, where bound[n]\n  //       // corresponds to keysToProve[n]\n  //       ColdArchiveBucketEntry lowBoundEntries<>;\n  //       ColdArchiveBucketEntry highBoundEntries<>;\n  //\n  //       // Vector of vectors, where proofLevels[level]\n  //       // contains all HashNodes that correspond with that level\n  //       ProofLevel proofLevels<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ExistenceProofBody\", [[\"keysToProve\", xdr.varArray(xdr.lookup(\"LedgerKey\"), 2147483647)], [\"lowBoundEntries\", xdr.varArray(xdr.lookup(\"ColdArchiveBucketEntry\"), 2147483647)], [\"highBoundEntries\", xdr.varArray(xdr.lookup(\"ColdArchiveBucketEntry\"), 2147483647)], [\"proofLevels\", xdr.varArray(xdr.lookup(\"ProofLevel\"), 2147483647)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (ArchivalProofType t)\n  //       {\n  //       case EXISTENCE:\n  //           NonexistenceProofBody nonexistenceProof;\n  //       case NONEXISTENCE:\n  //           ExistenceProofBody existenceProof;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ArchivalProofBody\", {\n    switchOn: xdr.lookup(\"ArchivalProofType\"),\n    switchName: \"t\",\n    switches: [[\"existence\", \"nonexistenceProof\"], [\"nonexistence\", \"existenceProof\"]],\n    arms: {\n      nonexistenceProof: xdr.lookup(\"NonexistenceProofBody\"),\n      existenceProof: xdr.lookup(\"ExistenceProofBody\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ArchivalProof\n  //   {\n  //       uint32 epoch; // AST Subtree for this proof\n  //\n  //       union switch (ArchivalProofType t)\n  //       {\n  //       case EXISTENCE:\n  //           NonexistenceProofBody nonexistenceProof;\n  //       case NONEXISTENCE:\n  //           ExistenceProofBody existenceProof;\n  //       } body;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ArchivalProof\", [[\"epoch\", xdr.lookup(\"Uint32\")], [\"body\", xdr.lookup(\"ArchivalProofBody\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanResources\n  //   {\n  //       // The ledger footprint of the transaction.\n  //       LedgerFootprint footprint;\n  //       // The maximum number of instructions this transaction can use\n  //       uint32 instructions;\n  //\n  //       // The maximum number of bytes this transaction can read from ledger\n  //       uint32 readBytes;\n  //       // The maximum number of bytes this transaction can write to ledger\n  //       uint32 writeBytes;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanResources\", [[\"footprint\", xdr.lookup(\"LedgerFootprint\")], [\"instructions\", xdr.lookup(\"Uint32\")], [\"readBytes\", xdr.lookup(\"Uint32\")], [\"writeBytes\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SorobanTransactionData\n  //   {\n  //       ExtensionPoint ext;\n  //       SorobanResources resources;\n  //       // Amount of the transaction `fee` allocated to the Soroban resource fees.\n  //       // The fraction of `resourceFee` corresponding to `resources` specified\n  //       // above is *not* refundable (i.e. fees for instructions, ledger I/O), as\n  //       // well as fees for the transaction size.\n  //       // The remaining part of the fee is refundable and the charged value is\n  //       // based on the actual consumption of refundable resources (events, ledger\n  //       // rent bumps).\n  //       // The `inclusionFee` used for prioritization of the transaction is defined\n  //       // as `tx.fee - resourceFee`.\n  //       int64 resourceFee;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SorobanTransactionData\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"resources\", xdr.lookup(\"SorobanResources\")], [\"resourceFee\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionV0Ext\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionV0\n  //   {\n  //       uint256 sourceAccountEd25519;\n  //       uint32 fee;\n  //       SequenceNumber seqNum;\n  //       TimeBounds* timeBounds;\n  //       Memo memo;\n  //       Operation operations<MAX_OPS_PER_TX>;\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionV0\", [[\"sourceAccountEd25519\", xdr.lookup(\"Uint256\")], [\"fee\", xdr.lookup(\"Uint32\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"timeBounds\", xdr.option(xdr.lookup(\"TimeBounds\"))], [\"memo\", xdr.lookup(\"Memo\")], [\"operations\", xdr.varArray(xdr.lookup(\"Operation\"), xdr.lookup(\"MAX_OPS_PER_TX\"))], [\"ext\", xdr.lookup(\"TransactionV0Ext\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionV0Envelope\n  //   {\n  //       TransactionV0 tx;\n  //       /* Each decorated signature is a signature over the SHA256 hash of\n  //        * a TransactionSignaturePayload */\n  //       DecoratedSignature signatures<20>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionV0Envelope\", [[\"tx\", xdr.lookup(\"TransactionV0\")], [\"signatures\", xdr.varArray(xdr.lookup(\"DecoratedSignature\"), 20)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           SorobanTransactionData sorobanData;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()], [1, \"sorobanData\"]],\n    arms: {\n      sorobanData: xdr.lookup(\"SorobanTransactionData\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct Transaction\n  //   {\n  //       // account used to run the transaction\n  //       MuxedAccount sourceAccount;\n  //\n  //       // the fee the sourceAccount will pay\n  //       uint32 fee;\n  //\n  //       // sequence number to consume in the account\n  //       SequenceNumber seqNum;\n  //\n  //       // validity conditions\n  //       Preconditions cond;\n  //\n  //       Memo memo;\n  //\n  //       Operation operations<MAX_OPS_PER_TX>;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       case 1:\n  //           SorobanTransactionData sorobanData;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Transaction\", [[\"sourceAccount\", xdr.lookup(\"MuxedAccount\")], [\"fee\", xdr.lookup(\"Uint32\")], [\"seqNum\", xdr.lookup(\"SequenceNumber\")], [\"cond\", xdr.lookup(\"Preconditions\")], [\"memo\", xdr.lookup(\"Memo\")], [\"operations\", xdr.varArray(xdr.lookup(\"Operation\"), xdr.lookup(\"MAX_OPS_PER_TX\"))], [\"ext\", xdr.lookup(\"TransactionExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionV1Envelope\n  //   {\n  //       Transaction tx;\n  //       /* Each decorated signature is a signature over the SHA256 hash of\n  //        * a TransactionSignaturePayload */\n  //       DecoratedSignature signatures<20>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionV1Envelope\", [[\"tx\", xdr.lookup(\"Transaction\")], [\"signatures\", xdr.varArray(xdr.lookup(\"DecoratedSignature\"), 20)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (EnvelopeType type)\n  //       {\n  //       case ENVELOPE_TYPE_TX:\n  //           TransactionV1Envelope v1;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"FeeBumpTransactionInnerTx\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeTx\", \"v1\"]],\n    arms: {\n      v1: xdr.lookup(\"TransactionV1Envelope\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"FeeBumpTransactionExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct FeeBumpTransaction\n  //   {\n  //       MuxedAccount feeSource;\n  //       int64 fee;\n  //       union switch (EnvelopeType type)\n  //       {\n  //       case ENVELOPE_TYPE_TX:\n  //           TransactionV1Envelope v1;\n  //       }\n  //       innerTx;\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"FeeBumpTransaction\", [[\"feeSource\", xdr.lookup(\"MuxedAccount\")], [\"fee\", xdr.lookup(\"Int64\")], [\"innerTx\", xdr.lookup(\"FeeBumpTransactionInnerTx\")], [\"ext\", xdr.lookup(\"FeeBumpTransactionExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct FeeBumpTransactionEnvelope\n  //   {\n  //       FeeBumpTransaction tx;\n  //       /* Each decorated signature is a signature over the SHA256 hash of\n  //        * a TransactionSignaturePayload */\n  //       DecoratedSignature signatures<20>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"FeeBumpTransactionEnvelope\", [[\"tx\", xdr.lookup(\"FeeBumpTransaction\")], [\"signatures\", xdr.varArray(xdr.lookup(\"DecoratedSignature\"), 20)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union TransactionEnvelope switch (EnvelopeType type)\n  //   {\n  //   case ENVELOPE_TYPE_TX_V0:\n  //       TransactionV0Envelope v0;\n  //   case ENVELOPE_TYPE_TX:\n  //       TransactionV1Envelope v1;\n  //   case ENVELOPE_TYPE_TX_FEE_BUMP:\n  //       FeeBumpTransactionEnvelope feeBump;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionEnvelope\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeTxV0\", \"v0\"], [\"envelopeTypeTx\", \"v1\"], [\"envelopeTypeTxFeeBump\", \"feeBump\"]],\n    arms: {\n      v0: xdr.lookup(\"TransactionV0Envelope\"),\n      v1: xdr.lookup(\"TransactionV1Envelope\"),\n      feeBump: xdr.lookup(\"FeeBumpTransactionEnvelope\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (EnvelopeType type)\n  //       {\n  //       // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n  //       case ENVELOPE_TYPE_TX:\n  //           Transaction tx;\n  //       case ENVELOPE_TYPE_TX_FEE_BUMP:\n  //           FeeBumpTransaction feeBump;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionSignaturePayloadTaggedTransaction\", {\n    switchOn: xdr.lookup(\"EnvelopeType\"),\n    switchName: \"type\",\n    switches: [[\"envelopeTypeTx\", \"tx\"], [\"envelopeTypeTxFeeBump\", \"feeBump\"]],\n    arms: {\n      tx: xdr.lookup(\"Transaction\"),\n      feeBump: xdr.lookup(\"FeeBumpTransaction\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionSignaturePayload\n  //   {\n  //       Hash networkId;\n  //       union switch (EnvelopeType type)\n  //       {\n  //       // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n  //       case ENVELOPE_TYPE_TX:\n  //           Transaction tx;\n  //       case ENVELOPE_TYPE_TX_FEE_BUMP:\n  //           FeeBumpTransaction feeBump;\n  //       }\n  //       taggedTransaction;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionSignaturePayload\", [[\"networkId\", xdr.lookup(\"Hash\")], [\"taggedTransaction\", xdr.lookup(\"TransactionSignaturePayloadTaggedTransaction\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimAtomType\n  //   {\n  //       CLAIM_ATOM_TYPE_V0 = 0,\n  //       CLAIM_ATOM_TYPE_ORDER_BOOK = 1,\n  //       CLAIM_ATOM_TYPE_LIQUIDITY_POOL = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimAtomType\", {\n    claimAtomTypeV0: 0,\n    claimAtomTypeOrderBook: 1,\n    claimAtomTypeLiquidityPool: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimOfferAtomV0\n  //   {\n  //       // emitted to identify the offer\n  //       uint256 sellerEd25519; // Account that owns the offer\n  //       int64 offerID;\n  //\n  //       // amount and asset taken from the owner\n  //       Asset assetSold;\n  //       int64 amountSold;\n  //\n  //       // amount and asset sent to the owner\n  //       Asset assetBought;\n  //       int64 amountBought;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimOfferAtomV0\", [[\"sellerEd25519\", xdr.lookup(\"Uint256\")], [\"offerId\", xdr.lookup(\"Int64\")], [\"assetSold\", xdr.lookup(\"Asset\")], [\"amountSold\", xdr.lookup(\"Int64\")], [\"assetBought\", xdr.lookup(\"Asset\")], [\"amountBought\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimOfferAtom\n  //   {\n  //       // emitted to identify the offer\n  //       AccountID sellerID; // Account that owns the offer\n  //       int64 offerID;\n  //\n  //       // amount and asset taken from the owner\n  //       Asset assetSold;\n  //       int64 amountSold;\n  //\n  //       // amount and asset sent to the owner\n  //       Asset assetBought;\n  //       int64 amountBought;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimOfferAtom\", [[\"sellerId\", xdr.lookup(\"AccountId\")], [\"offerId\", xdr.lookup(\"Int64\")], [\"assetSold\", xdr.lookup(\"Asset\")], [\"amountSold\", xdr.lookup(\"Int64\")], [\"assetBought\", xdr.lookup(\"Asset\")], [\"amountBought\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ClaimLiquidityAtom\n  //   {\n  //       PoolID liquidityPoolID;\n  //\n  //       // amount and asset taken from the pool\n  //       Asset assetSold;\n  //       int64 amountSold;\n  //\n  //       // amount and asset sent to the pool\n  //       Asset assetBought;\n  //       int64 amountBought;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ClaimLiquidityAtom\", [[\"liquidityPoolId\", xdr.lookup(\"PoolId\")], [\"assetSold\", xdr.lookup(\"Asset\")], [\"amountSold\", xdr.lookup(\"Int64\")], [\"assetBought\", xdr.lookup(\"Asset\")], [\"amountBought\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimAtom switch (ClaimAtomType type)\n  //   {\n  //   case CLAIM_ATOM_TYPE_V0:\n  //       ClaimOfferAtomV0 v0;\n  //   case CLAIM_ATOM_TYPE_ORDER_BOOK:\n  //       ClaimOfferAtom orderBook;\n  //   case CLAIM_ATOM_TYPE_LIQUIDITY_POOL:\n  //       ClaimLiquidityAtom liquidityPool;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimAtom\", {\n    switchOn: xdr.lookup(\"ClaimAtomType\"),\n    switchName: \"type\",\n    switches: [[\"claimAtomTypeV0\", \"v0\"], [\"claimAtomTypeOrderBook\", \"orderBook\"], [\"claimAtomTypeLiquidityPool\", \"liquidityPool\"]],\n    arms: {\n      v0: xdr.lookup(\"ClaimOfferAtomV0\"),\n      orderBook: xdr.lookup(\"ClaimOfferAtom\"),\n      liquidityPool: xdr.lookup(\"ClaimLiquidityAtom\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum CreateAccountResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CREATE_ACCOUNT_SUCCESS = 0, // account was created\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       CREATE_ACCOUNT_MALFORMED = -1,   // invalid destination\n  //       CREATE_ACCOUNT_UNDERFUNDED = -2, // not enough funds in source account\n  //       CREATE_ACCOUNT_LOW_RESERVE =\n  //           -3, // would create an account below the min reserve\n  //       CREATE_ACCOUNT_ALREADY_EXIST = -4 // account already exists\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"CreateAccountResultCode\", {\n    createAccountSuccess: 0,\n    createAccountMalformed: -1,\n    createAccountUnderfunded: -2,\n    createAccountLowReserve: -3,\n    createAccountAlreadyExist: -4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union CreateAccountResult switch (CreateAccountResultCode code)\n  //   {\n  //   case CREATE_ACCOUNT_SUCCESS:\n  //       void;\n  //   case CREATE_ACCOUNT_MALFORMED:\n  //   case CREATE_ACCOUNT_UNDERFUNDED:\n  //   case CREATE_ACCOUNT_LOW_RESERVE:\n  //   case CREATE_ACCOUNT_ALREADY_EXIST:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"CreateAccountResult\", {\n    switchOn: xdr.lookup(\"CreateAccountResultCode\"),\n    switchName: \"code\",\n    switches: [[\"createAccountSuccess\", xdr[\"void\"]()], [\"createAccountMalformed\", xdr[\"void\"]()], [\"createAccountUnderfunded\", xdr[\"void\"]()], [\"createAccountLowReserve\", xdr[\"void\"]()], [\"createAccountAlreadyExist\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PaymentResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       PAYMENT_SUCCESS = 0, // payment successfully completed\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       PAYMENT_MALFORMED = -1,          // bad input\n  //       PAYMENT_UNDERFUNDED = -2,        // not enough funds in source account\n  //       PAYMENT_SRC_NO_TRUST = -3,       // no trust line on source account\n  //       PAYMENT_SRC_NOT_AUTHORIZED = -4, // source not authorized to transfer\n  //       PAYMENT_NO_DESTINATION = -5,     // destination account does not exist\n  //       PAYMENT_NO_TRUST = -6,       // destination missing a trust line for asset\n  //       PAYMENT_NOT_AUTHORIZED = -7, // destination not authorized to hold asset\n  //       PAYMENT_LINE_FULL = -8,      // destination would go above their limit\n  //       PAYMENT_NO_ISSUER = -9       // missing issuer on asset\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"PaymentResultCode\", {\n    paymentSuccess: 0,\n    paymentMalformed: -1,\n    paymentUnderfunded: -2,\n    paymentSrcNoTrust: -3,\n    paymentSrcNotAuthorized: -4,\n    paymentNoDestination: -5,\n    paymentNoTrust: -6,\n    paymentNotAuthorized: -7,\n    paymentLineFull: -8,\n    paymentNoIssuer: -9\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union PaymentResult switch (PaymentResultCode code)\n  //   {\n  //   case PAYMENT_SUCCESS:\n  //       void;\n  //   case PAYMENT_MALFORMED:\n  //   case PAYMENT_UNDERFUNDED:\n  //   case PAYMENT_SRC_NO_TRUST:\n  //   case PAYMENT_SRC_NOT_AUTHORIZED:\n  //   case PAYMENT_NO_DESTINATION:\n  //   case PAYMENT_NO_TRUST:\n  //   case PAYMENT_NOT_AUTHORIZED:\n  //   case PAYMENT_LINE_FULL:\n  //   case PAYMENT_NO_ISSUER:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PaymentResult\", {\n    switchOn: xdr.lookup(\"PaymentResultCode\"),\n    switchName: \"code\",\n    switches: [[\"paymentSuccess\", xdr[\"void\"]()], [\"paymentMalformed\", xdr[\"void\"]()], [\"paymentUnderfunded\", xdr[\"void\"]()], [\"paymentSrcNoTrust\", xdr[\"void\"]()], [\"paymentSrcNotAuthorized\", xdr[\"void\"]()], [\"paymentNoDestination\", xdr[\"void\"]()], [\"paymentNoTrust\", xdr[\"void\"]()], [\"paymentNotAuthorized\", xdr[\"void\"]()], [\"paymentLineFull\", xdr[\"void\"]()], [\"paymentNoIssuer\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PathPaymentStrictReceiveResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       PATH_PAYMENT_STRICT_RECEIVE_SUCCESS = 0, // success\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       PATH_PAYMENT_STRICT_RECEIVE_MALFORMED = -1, // bad input\n  //       PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED =\n  //           -2, // not enough funds in source account\n  //       PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST =\n  //           -3, // no trust line on source account\n  //       PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED =\n  //           -4, // source not authorized to transfer\n  //       PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION =\n  //           -5, // destination account does not exist\n  //       PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST =\n  //           -6, // dest missing a trust line for asset\n  //       PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED =\n  //           -7, // dest not authorized to hold asset\n  //       PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL =\n  //           -8, // dest would go above their limit\n  //       PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER = -9, // missing issuer on one asset\n  //       PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS =\n  //           -10, // not enough offers to satisfy path\n  //       PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF =\n  //           -11, // would cross one of its own offers\n  //       PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX = -12 // could not satisfy sendmax\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"PathPaymentStrictReceiveResultCode\", {\n    pathPaymentStrictReceiveSuccess: 0,\n    pathPaymentStrictReceiveMalformed: -1,\n    pathPaymentStrictReceiveUnderfunded: -2,\n    pathPaymentStrictReceiveSrcNoTrust: -3,\n    pathPaymentStrictReceiveSrcNotAuthorized: -4,\n    pathPaymentStrictReceiveNoDestination: -5,\n    pathPaymentStrictReceiveNoTrust: -6,\n    pathPaymentStrictReceiveNotAuthorized: -7,\n    pathPaymentStrictReceiveLineFull: -8,\n    pathPaymentStrictReceiveNoIssuer: -9,\n    pathPaymentStrictReceiveTooFewOffers: -10,\n    pathPaymentStrictReceiveOfferCrossSelf: -11,\n    pathPaymentStrictReceiveOverSendmax: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SimplePaymentResult\n  //   {\n  //       AccountID destination;\n  //       Asset asset;\n  //       int64 amount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SimplePaymentResult\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"asset\", xdr.lookup(\"Asset\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictReceiveResultSuccess\", [[\"offers\", xdr.varArray(xdr.lookup(\"ClaimAtom\"), 2147483647)], [\"last\", xdr.lookup(\"SimplePaymentResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union PathPaymentStrictReceiveResult switch (\n  //       PathPaymentStrictReceiveResultCode code)\n  //   {\n  //   case PATH_PAYMENT_STRICT_RECEIVE_SUCCESS:\n  //       struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       } success;\n  //   case PATH_PAYMENT_STRICT_RECEIVE_MALFORMED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL:\n  //       void;\n  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER:\n  //       Asset noIssuer; // the asset that caused the error\n  //   case PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF:\n  //   case PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PathPaymentStrictReceiveResult\", {\n    switchOn: xdr.lookup(\"PathPaymentStrictReceiveResultCode\"),\n    switchName: \"code\",\n    switches: [[\"pathPaymentStrictReceiveSuccess\", \"success\"], [\"pathPaymentStrictReceiveMalformed\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveUnderfunded\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveSrcNoTrust\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveSrcNotAuthorized\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveNoDestination\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveNoTrust\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveNotAuthorized\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveLineFull\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveNoIssuer\", \"noIssuer\"], [\"pathPaymentStrictReceiveTooFewOffers\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveOfferCrossSelf\", xdr[\"void\"]()], [\"pathPaymentStrictReceiveOverSendmax\", xdr[\"void\"]()]],\n    arms: {\n      success: xdr.lookup(\"PathPaymentStrictReceiveResultSuccess\"),\n      noIssuer: xdr.lookup(\"Asset\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PathPaymentStrictSendResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       PATH_PAYMENT_STRICT_SEND_SUCCESS = 0, // success\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       PATH_PAYMENT_STRICT_SEND_MALFORMED = -1, // bad input\n  //       PATH_PAYMENT_STRICT_SEND_UNDERFUNDED =\n  //           -2, // not enough funds in source account\n  //       PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST =\n  //           -3, // no trust line on source account\n  //       PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED =\n  //           -4, // source not authorized to transfer\n  //       PATH_PAYMENT_STRICT_SEND_NO_DESTINATION =\n  //           -5, // destination account does not exist\n  //       PATH_PAYMENT_STRICT_SEND_NO_TRUST =\n  //           -6, // dest missing a trust line for asset\n  //       PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED =\n  //           -7, // dest not authorized to hold asset\n  //       PATH_PAYMENT_STRICT_SEND_LINE_FULL = -8, // dest would go above their limit\n  //       PATH_PAYMENT_STRICT_SEND_NO_ISSUER = -9, // missing issuer on one asset\n  //       PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS =\n  //           -10, // not enough offers to satisfy path\n  //       PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF =\n  //           -11, // would cross one of its own offers\n  //       PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN = -12 // could not satisfy destMin\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"PathPaymentStrictSendResultCode\", {\n    pathPaymentStrictSendSuccess: 0,\n    pathPaymentStrictSendMalformed: -1,\n    pathPaymentStrictSendUnderfunded: -2,\n    pathPaymentStrictSendSrcNoTrust: -3,\n    pathPaymentStrictSendSrcNotAuthorized: -4,\n    pathPaymentStrictSendNoDestination: -5,\n    pathPaymentStrictSendNoTrust: -6,\n    pathPaymentStrictSendNotAuthorized: -7,\n    pathPaymentStrictSendLineFull: -8,\n    pathPaymentStrictSendNoIssuer: -9,\n    pathPaymentStrictSendTooFewOffers: -10,\n    pathPaymentStrictSendOfferCrossSelf: -11,\n    pathPaymentStrictSendUnderDestmin: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"PathPaymentStrictSendResultSuccess\", [[\"offers\", xdr.varArray(xdr.lookup(\"ClaimAtom\"), 2147483647)], [\"last\", xdr.lookup(\"SimplePaymentResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union PathPaymentStrictSendResult switch (PathPaymentStrictSendResultCode code)\n  //   {\n  //   case PATH_PAYMENT_STRICT_SEND_SUCCESS:\n  //       struct\n  //       {\n  //           ClaimAtom offers<>;\n  //           SimplePaymentResult last;\n  //       } success;\n  //   case PATH_PAYMENT_STRICT_SEND_MALFORMED:\n  //   case PATH_PAYMENT_STRICT_SEND_UNDERFUNDED:\n  //   case PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_SEND_NO_DESTINATION:\n  //   case PATH_PAYMENT_STRICT_SEND_NO_TRUST:\n  //   case PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED:\n  //   case PATH_PAYMENT_STRICT_SEND_LINE_FULL:\n  //       void;\n  //   case PATH_PAYMENT_STRICT_SEND_NO_ISSUER:\n  //       Asset noIssuer; // the asset that caused the error\n  //   case PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS:\n  //   case PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF:\n  //   case PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PathPaymentStrictSendResult\", {\n    switchOn: xdr.lookup(\"PathPaymentStrictSendResultCode\"),\n    switchName: \"code\",\n    switches: [[\"pathPaymentStrictSendSuccess\", \"success\"], [\"pathPaymentStrictSendMalformed\", xdr[\"void\"]()], [\"pathPaymentStrictSendUnderfunded\", xdr[\"void\"]()], [\"pathPaymentStrictSendSrcNoTrust\", xdr[\"void\"]()], [\"pathPaymentStrictSendSrcNotAuthorized\", xdr[\"void\"]()], [\"pathPaymentStrictSendNoDestination\", xdr[\"void\"]()], [\"pathPaymentStrictSendNoTrust\", xdr[\"void\"]()], [\"pathPaymentStrictSendNotAuthorized\", xdr[\"void\"]()], [\"pathPaymentStrictSendLineFull\", xdr[\"void\"]()], [\"pathPaymentStrictSendNoIssuer\", \"noIssuer\"], [\"pathPaymentStrictSendTooFewOffers\", xdr[\"void\"]()], [\"pathPaymentStrictSendOfferCrossSelf\", xdr[\"void\"]()], [\"pathPaymentStrictSendUnderDestmin\", xdr[\"void\"]()]],\n    arms: {\n      success: xdr.lookup(\"PathPaymentStrictSendResultSuccess\"),\n      noIssuer: xdr.lookup(\"Asset\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageSellOfferResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       MANAGE_SELL_OFFER_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       MANAGE_SELL_OFFER_MALFORMED = -1, // generated offer would be invalid\n  //       MANAGE_SELL_OFFER_SELL_NO_TRUST =\n  //           -2,                              // no trust line for what we're selling\n  //       MANAGE_SELL_OFFER_BUY_NO_TRUST = -3, // no trust line for what we're buying\n  //       MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED = -4, // not authorized to sell\n  //       MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED = -5,  // not authorized to buy\n  //       MANAGE_SELL_OFFER_LINE_FULL = -6, // can't receive more of what it's buying\n  //       MANAGE_SELL_OFFER_UNDERFUNDED = -7, // doesn't hold what it's trying to sell\n  //       MANAGE_SELL_OFFER_CROSS_SELF =\n  //           -8, // would cross an offer from the same user\n  //       MANAGE_SELL_OFFER_SELL_NO_ISSUER = -9, // no issuer for what we're selling\n  //       MANAGE_SELL_OFFER_BUY_NO_ISSUER = -10, // no issuer for what we're buying\n  //\n  //       // update errors\n  //       MANAGE_SELL_OFFER_NOT_FOUND =\n  //           -11, // offerID does not match an existing offer\n  //\n  //       MANAGE_SELL_OFFER_LOW_RESERVE =\n  //           -12 // not enough funds to create a new Offer\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ManageSellOfferResultCode\", {\n    manageSellOfferSuccess: 0,\n    manageSellOfferMalformed: -1,\n    manageSellOfferSellNoTrust: -2,\n    manageSellOfferBuyNoTrust: -3,\n    manageSellOfferSellNotAuthorized: -4,\n    manageSellOfferBuyNotAuthorized: -5,\n    manageSellOfferLineFull: -6,\n    manageSellOfferUnderfunded: -7,\n    manageSellOfferCrossSelf: -8,\n    manageSellOfferSellNoIssuer: -9,\n    manageSellOfferBuyNoIssuer: -10,\n    manageSellOfferNotFound: -11,\n    manageSellOfferLowReserve: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageOfferEffect\n  //   {\n  //       MANAGE_OFFER_CREATED = 0,\n  //       MANAGE_OFFER_UPDATED = 1,\n  //       MANAGE_OFFER_DELETED = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ManageOfferEffect\", {\n    manageOfferCreated: 0,\n    manageOfferUpdated: 1,\n    manageOfferDeleted: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (ManageOfferEffect effect)\n  //       {\n  //       case MANAGE_OFFER_CREATED:\n  //       case MANAGE_OFFER_UPDATED:\n  //           OfferEntry offer;\n  //       case MANAGE_OFFER_DELETED:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"ManageOfferSuccessResultOffer\", {\n    switchOn: xdr.lookup(\"ManageOfferEffect\"),\n    switchName: \"effect\",\n    switches: [[\"manageOfferCreated\", \"offer\"], [\"manageOfferUpdated\", \"offer\"], [\"manageOfferDeleted\", xdr[\"void\"]()]],\n    arms: {\n      offer: xdr.lookup(\"OfferEntry\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ManageOfferSuccessResult\n  //   {\n  //       // offers that got claimed while creating this offer\n  //       ClaimAtom offersClaimed<>;\n  //\n  //       union switch (ManageOfferEffect effect)\n  //       {\n  //       case MANAGE_OFFER_CREATED:\n  //       case MANAGE_OFFER_UPDATED:\n  //           OfferEntry offer;\n  //       case MANAGE_OFFER_DELETED:\n  //           void;\n  //       }\n  //       offer;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ManageOfferSuccessResult\", [[\"offersClaimed\", xdr.varArray(xdr.lookup(\"ClaimAtom\"), 2147483647)], [\"offer\", xdr.lookup(\"ManageOfferSuccessResultOffer\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union ManageSellOfferResult switch (ManageSellOfferResultCode code)\n  //   {\n  //   case MANAGE_SELL_OFFER_SUCCESS:\n  //       ManageOfferSuccessResult success;\n  //   case MANAGE_SELL_OFFER_MALFORMED:\n  //   case MANAGE_SELL_OFFER_SELL_NO_TRUST:\n  //   case MANAGE_SELL_OFFER_BUY_NO_TRUST:\n  //   case MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED:\n  //   case MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED:\n  //   case MANAGE_SELL_OFFER_LINE_FULL:\n  //   case MANAGE_SELL_OFFER_UNDERFUNDED:\n  //   case MANAGE_SELL_OFFER_CROSS_SELF:\n  //   case MANAGE_SELL_OFFER_SELL_NO_ISSUER:\n  //   case MANAGE_SELL_OFFER_BUY_NO_ISSUER:\n  //   case MANAGE_SELL_OFFER_NOT_FOUND:\n  //   case MANAGE_SELL_OFFER_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ManageSellOfferResult\", {\n    switchOn: xdr.lookup(\"ManageSellOfferResultCode\"),\n    switchName: \"code\",\n    switches: [[\"manageSellOfferSuccess\", \"success\"], [\"manageSellOfferMalformed\", xdr[\"void\"]()], [\"manageSellOfferSellNoTrust\", xdr[\"void\"]()], [\"manageSellOfferBuyNoTrust\", xdr[\"void\"]()], [\"manageSellOfferSellNotAuthorized\", xdr[\"void\"]()], [\"manageSellOfferBuyNotAuthorized\", xdr[\"void\"]()], [\"manageSellOfferLineFull\", xdr[\"void\"]()], [\"manageSellOfferUnderfunded\", xdr[\"void\"]()], [\"manageSellOfferCrossSelf\", xdr[\"void\"]()], [\"manageSellOfferSellNoIssuer\", xdr[\"void\"]()], [\"manageSellOfferBuyNoIssuer\", xdr[\"void\"]()], [\"manageSellOfferNotFound\", xdr[\"void\"]()], [\"manageSellOfferLowReserve\", xdr[\"void\"]()]],\n    arms: {\n      success: xdr.lookup(\"ManageOfferSuccessResult\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageBuyOfferResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       MANAGE_BUY_OFFER_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       MANAGE_BUY_OFFER_MALFORMED = -1,     // generated offer would be invalid\n  //       MANAGE_BUY_OFFER_SELL_NO_TRUST = -2, // no trust line for what we're selling\n  //       MANAGE_BUY_OFFER_BUY_NO_TRUST = -3,  // no trust line for what we're buying\n  //       MANAGE_BUY_OFFER_SELL_NOT_AUTHORIZED = -4, // not authorized to sell\n  //       MANAGE_BUY_OFFER_BUY_NOT_AUTHORIZED = -5,  // not authorized to buy\n  //       MANAGE_BUY_OFFER_LINE_FULL = -6,   // can't receive more of what it's buying\n  //       MANAGE_BUY_OFFER_UNDERFUNDED = -7, // doesn't hold what it's trying to sell\n  //       MANAGE_BUY_OFFER_CROSS_SELF = -8, // would cross an offer from the same user\n  //       MANAGE_BUY_OFFER_SELL_NO_ISSUER = -9, // no issuer for what we're selling\n  //       MANAGE_BUY_OFFER_BUY_NO_ISSUER = -10, // no issuer for what we're buying\n  //\n  //       // update errors\n  //       MANAGE_BUY_OFFER_NOT_FOUND =\n  //           -11, // offerID does not match an existing offer\n  //\n  //       MANAGE_BUY_OFFER_LOW_RESERVE = -12 // not enough funds to create a new Offer\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ManageBuyOfferResultCode\", {\n    manageBuyOfferSuccess: 0,\n    manageBuyOfferMalformed: -1,\n    manageBuyOfferSellNoTrust: -2,\n    manageBuyOfferBuyNoTrust: -3,\n    manageBuyOfferSellNotAuthorized: -4,\n    manageBuyOfferBuyNotAuthorized: -5,\n    manageBuyOfferLineFull: -6,\n    manageBuyOfferUnderfunded: -7,\n    manageBuyOfferCrossSelf: -8,\n    manageBuyOfferSellNoIssuer: -9,\n    manageBuyOfferBuyNoIssuer: -10,\n    manageBuyOfferNotFound: -11,\n    manageBuyOfferLowReserve: -12\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ManageBuyOfferResult switch (ManageBuyOfferResultCode code)\n  //   {\n  //   case MANAGE_BUY_OFFER_SUCCESS:\n  //       ManageOfferSuccessResult success;\n  //   case MANAGE_BUY_OFFER_MALFORMED:\n  //   case MANAGE_BUY_OFFER_SELL_NO_TRUST:\n  //   case MANAGE_BUY_OFFER_BUY_NO_TRUST:\n  //   case MANAGE_BUY_OFFER_SELL_NOT_AUTHORIZED:\n  //   case MANAGE_BUY_OFFER_BUY_NOT_AUTHORIZED:\n  //   case MANAGE_BUY_OFFER_LINE_FULL:\n  //   case MANAGE_BUY_OFFER_UNDERFUNDED:\n  //   case MANAGE_BUY_OFFER_CROSS_SELF:\n  //   case MANAGE_BUY_OFFER_SELL_NO_ISSUER:\n  //   case MANAGE_BUY_OFFER_BUY_NO_ISSUER:\n  //   case MANAGE_BUY_OFFER_NOT_FOUND:\n  //   case MANAGE_BUY_OFFER_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ManageBuyOfferResult\", {\n    switchOn: xdr.lookup(\"ManageBuyOfferResultCode\"),\n    switchName: \"code\",\n    switches: [[\"manageBuyOfferSuccess\", \"success\"], [\"manageBuyOfferMalformed\", xdr[\"void\"]()], [\"manageBuyOfferSellNoTrust\", xdr[\"void\"]()], [\"manageBuyOfferBuyNoTrust\", xdr[\"void\"]()], [\"manageBuyOfferSellNotAuthorized\", xdr[\"void\"]()], [\"manageBuyOfferBuyNotAuthorized\", xdr[\"void\"]()], [\"manageBuyOfferLineFull\", xdr[\"void\"]()], [\"manageBuyOfferUnderfunded\", xdr[\"void\"]()], [\"manageBuyOfferCrossSelf\", xdr[\"void\"]()], [\"manageBuyOfferSellNoIssuer\", xdr[\"void\"]()], [\"manageBuyOfferBuyNoIssuer\", xdr[\"void\"]()], [\"manageBuyOfferNotFound\", xdr[\"void\"]()], [\"manageBuyOfferLowReserve\", xdr[\"void\"]()]],\n    arms: {\n      success: xdr.lookup(\"ManageOfferSuccessResult\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SetOptionsResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       SET_OPTIONS_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       SET_OPTIONS_LOW_RESERVE = -1,      // not enough funds to add a signer\n  //       SET_OPTIONS_TOO_MANY_SIGNERS = -2, // max number of signers already reached\n  //       SET_OPTIONS_BAD_FLAGS = -3,        // invalid combination of clear/set flags\n  //       SET_OPTIONS_INVALID_INFLATION = -4,      // inflation account does not exist\n  //       SET_OPTIONS_CANT_CHANGE = -5,            // can no longer change this option\n  //       SET_OPTIONS_UNKNOWN_FLAG = -6,           // can't set an unknown flag\n  //       SET_OPTIONS_THRESHOLD_OUT_OF_RANGE = -7, // bad value for weight/threshold\n  //       SET_OPTIONS_BAD_SIGNER = -8,             // signer cannot be masterkey\n  //       SET_OPTIONS_INVALID_HOME_DOMAIN = -9,    // malformed home domain\n  //       SET_OPTIONS_AUTH_REVOCABLE_REQUIRED =\n  //           -10 // auth revocable is required for clawback\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SetOptionsResultCode\", {\n    setOptionsSuccess: 0,\n    setOptionsLowReserve: -1,\n    setOptionsTooManySigners: -2,\n    setOptionsBadFlags: -3,\n    setOptionsInvalidInflation: -4,\n    setOptionsCantChange: -5,\n    setOptionsUnknownFlag: -6,\n    setOptionsThresholdOutOfRange: -7,\n    setOptionsBadSigner: -8,\n    setOptionsInvalidHomeDomain: -9,\n    setOptionsAuthRevocableRequired: -10\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SetOptionsResult switch (SetOptionsResultCode code)\n  //   {\n  //   case SET_OPTIONS_SUCCESS:\n  //       void;\n  //   case SET_OPTIONS_LOW_RESERVE:\n  //   case SET_OPTIONS_TOO_MANY_SIGNERS:\n  //   case SET_OPTIONS_BAD_FLAGS:\n  //   case SET_OPTIONS_INVALID_INFLATION:\n  //   case SET_OPTIONS_CANT_CHANGE:\n  //   case SET_OPTIONS_UNKNOWN_FLAG:\n  //   case SET_OPTIONS_THRESHOLD_OUT_OF_RANGE:\n  //   case SET_OPTIONS_BAD_SIGNER:\n  //   case SET_OPTIONS_INVALID_HOME_DOMAIN:\n  //   case SET_OPTIONS_AUTH_REVOCABLE_REQUIRED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SetOptionsResult\", {\n    switchOn: xdr.lookup(\"SetOptionsResultCode\"),\n    switchName: \"code\",\n    switches: [[\"setOptionsSuccess\", xdr[\"void\"]()], [\"setOptionsLowReserve\", xdr[\"void\"]()], [\"setOptionsTooManySigners\", xdr[\"void\"]()], [\"setOptionsBadFlags\", xdr[\"void\"]()], [\"setOptionsInvalidInflation\", xdr[\"void\"]()], [\"setOptionsCantChange\", xdr[\"void\"]()], [\"setOptionsUnknownFlag\", xdr[\"void\"]()], [\"setOptionsThresholdOutOfRange\", xdr[\"void\"]()], [\"setOptionsBadSigner\", xdr[\"void\"]()], [\"setOptionsInvalidHomeDomain\", xdr[\"void\"]()], [\"setOptionsAuthRevocableRequired\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ChangeTrustResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CHANGE_TRUST_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       CHANGE_TRUST_MALFORMED = -1,     // bad input\n  //       CHANGE_TRUST_NO_ISSUER = -2,     // could not find issuer\n  //       CHANGE_TRUST_INVALID_LIMIT = -3, // cannot drop limit below balance\n  //                                        // cannot create with a limit of 0\n  //       CHANGE_TRUST_LOW_RESERVE =\n  //           -4, // not enough funds to create a new trust line,\n  //       CHANGE_TRUST_SELF_NOT_ALLOWED = -5,   // trusting self is not allowed\n  //       CHANGE_TRUST_TRUST_LINE_MISSING = -6, // Asset trustline is missing for pool\n  //       CHANGE_TRUST_CANNOT_DELETE =\n  //           -7, // Asset trustline is still referenced in a pool\n  //       CHANGE_TRUST_NOT_AUTH_MAINTAIN_LIABILITIES =\n  //           -8 // Asset trustline is deauthorized\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ChangeTrustResultCode\", {\n    changeTrustSuccess: 0,\n    changeTrustMalformed: -1,\n    changeTrustNoIssuer: -2,\n    changeTrustInvalidLimit: -3,\n    changeTrustLowReserve: -4,\n    changeTrustSelfNotAllowed: -5,\n    changeTrustTrustLineMissing: -6,\n    changeTrustCannotDelete: -7,\n    changeTrustNotAuthMaintainLiabilities: -8\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ChangeTrustResult switch (ChangeTrustResultCode code)\n  //   {\n  //   case CHANGE_TRUST_SUCCESS:\n  //       void;\n  //   case CHANGE_TRUST_MALFORMED:\n  //   case CHANGE_TRUST_NO_ISSUER:\n  //   case CHANGE_TRUST_INVALID_LIMIT:\n  //   case CHANGE_TRUST_LOW_RESERVE:\n  //   case CHANGE_TRUST_SELF_NOT_ALLOWED:\n  //   case CHANGE_TRUST_TRUST_LINE_MISSING:\n  //   case CHANGE_TRUST_CANNOT_DELETE:\n  //   case CHANGE_TRUST_NOT_AUTH_MAINTAIN_LIABILITIES:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ChangeTrustResult\", {\n    switchOn: xdr.lookup(\"ChangeTrustResultCode\"),\n    switchName: \"code\",\n    switches: [[\"changeTrustSuccess\", xdr[\"void\"]()], [\"changeTrustMalformed\", xdr[\"void\"]()], [\"changeTrustNoIssuer\", xdr[\"void\"]()], [\"changeTrustInvalidLimit\", xdr[\"void\"]()], [\"changeTrustLowReserve\", xdr[\"void\"]()], [\"changeTrustSelfNotAllowed\", xdr[\"void\"]()], [\"changeTrustTrustLineMissing\", xdr[\"void\"]()], [\"changeTrustCannotDelete\", xdr[\"void\"]()], [\"changeTrustNotAuthMaintainLiabilities\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum AllowTrustResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       ALLOW_TRUST_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       ALLOW_TRUST_MALFORMED = -1,     // asset is not ASSET_TYPE_ALPHANUM\n  //       ALLOW_TRUST_NO_TRUST_LINE = -2, // trustor does not have a trustline\n  //                                       // source account does not require trust\n  //       ALLOW_TRUST_TRUST_NOT_REQUIRED = -3,\n  //       ALLOW_TRUST_CANT_REVOKE = -4,      // source account can't revoke trust,\n  //       ALLOW_TRUST_SELF_NOT_ALLOWED = -5, // trusting self is not allowed\n  //       ALLOW_TRUST_LOW_RESERVE = -6       // claimable balances can't be created\n  //                                          // on revoke due to low reserves\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"AllowTrustResultCode\", {\n    allowTrustSuccess: 0,\n    allowTrustMalformed: -1,\n    allowTrustNoTrustLine: -2,\n    allowTrustTrustNotRequired: -3,\n    allowTrustCantRevoke: -4,\n    allowTrustSelfNotAllowed: -5,\n    allowTrustLowReserve: -6\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union AllowTrustResult switch (AllowTrustResultCode code)\n  //   {\n  //   case ALLOW_TRUST_SUCCESS:\n  //       void;\n  //   case ALLOW_TRUST_MALFORMED:\n  //   case ALLOW_TRUST_NO_TRUST_LINE:\n  //   case ALLOW_TRUST_TRUST_NOT_REQUIRED:\n  //   case ALLOW_TRUST_CANT_REVOKE:\n  //   case ALLOW_TRUST_SELF_NOT_ALLOWED:\n  //   case ALLOW_TRUST_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AllowTrustResult\", {\n    switchOn: xdr.lookup(\"AllowTrustResultCode\"),\n    switchName: \"code\",\n    switches: [[\"allowTrustSuccess\", xdr[\"void\"]()], [\"allowTrustMalformed\", xdr[\"void\"]()], [\"allowTrustNoTrustLine\", xdr[\"void\"]()], [\"allowTrustTrustNotRequired\", xdr[\"void\"]()], [\"allowTrustCantRevoke\", xdr[\"void\"]()], [\"allowTrustSelfNotAllowed\", xdr[\"void\"]()], [\"allowTrustLowReserve\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum AccountMergeResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       ACCOUNT_MERGE_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       ACCOUNT_MERGE_MALFORMED = -1,       // can't merge onto itself\n  //       ACCOUNT_MERGE_NO_ACCOUNT = -2,      // destination does not exist\n  //       ACCOUNT_MERGE_IMMUTABLE_SET = -3,   // source account has AUTH_IMMUTABLE set\n  //       ACCOUNT_MERGE_HAS_SUB_ENTRIES = -4, // account has trust lines/offers\n  //       ACCOUNT_MERGE_SEQNUM_TOO_FAR = -5,  // sequence number is over max allowed\n  //       ACCOUNT_MERGE_DEST_FULL = -6,       // can't add source balance to\n  //                                           // destination balance\n  //       ACCOUNT_MERGE_IS_SPONSOR = -7       // can't merge account that is a sponsor\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"AccountMergeResultCode\", {\n    accountMergeSuccess: 0,\n    accountMergeMalformed: -1,\n    accountMergeNoAccount: -2,\n    accountMergeImmutableSet: -3,\n    accountMergeHasSubEntries: -4,\n    accountMergeSeqnumTooFar: -5,\n    accountMergeDestFull: -6,\n    accountMergeIsSponsor: -7\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union AccountMergeResult switch (AccountMergeResultCode code)\n  //   {\n  //   case ACCOUNT_MERGE_SUCCESS:\n  //       int64 sourceAccountBalance; // how much got transferred from source account\n  //   case ACCOUNT_MERGE_MALFORMED:\n  //   case ACCOUNT_MERGE_NO_ACCOUNT:\n  //   case ACCOUNT_MERGE_IMMUTABLE_SET:\n  //   case ACCOUNT_MERGE_HAS_SUB_ENTRIES:\n  //   case ACCOUNT_MERGE_SEQNUM_TOO_FAR:\n  //   case ACCOUNT_MERGE_DEST_FULL:\n  //   case ACCOUNT_MERGE_IS_SPONSOR:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"AccountMergeResult\", {\n    switchOn: xdr.lookup(\"AccountMergeResultCode\"),\n    switchName: \"code\",\n    switches: [[\"accountMergeSuccess\", \"sourceAccountBalance\"], [\"accountMergeMalformed\", xdr[\"void\"]()], [\"accountMergeNoAccount\", xdr[\"void\"]()], [\"accountMergeImmutableSet\", xdr[\"void\"]()], [\"accountMergeHasSubEntries\", xdr[\"void\"]()], [\"accountMergeSeqnumTooFar\", xdr[\"void\"]()], [\"accountMergeDestFull\", xdr[\"void\"]()], [\"accountMergeIsSponsor\", xdr[\"void\"]()]],\n    arms: {\n      sourceAccountBalance: xdr.lookup(\"Int64\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum InflationResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       INFLATION_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       INFLATION_NOT_TIME = -1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"InflationResultCode\", {\n    inflationSuccess: 0,\n    inflationNotTime: -1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct InflationPayout // or use PaymentResultAtom to limit types?\n  //   {\n  //       AccountID destination;\n  //       int64 amount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InflationPayout\", [[\"destination\", xdr.lookup(\"AccountId\")], [\"amount\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union InflationResult switch (InflationResultCode code)\n  //   {\n  //   case INFLATION_SUCCESS:\n  //       InflationPayout payouts<>;\n  //   case INFLATION_NOT_TIME:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"InflationResult\", {\n    switchOn: xdr.lookup(\"InflationResultCode\"),\n    switchName: \"code\",\n    switches: [[\"inflationSuccess\", \"payouts\"], [\"inflationNotTime\", xdr[\"void\"]()]],\n    arms: {\n      payouts: xdr.varArray(xdr.lookup(\"InflationPayout\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ManageDataResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       MANAGE_DATA_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       MANAGE_DATA_NOT_SUPPORTED_YET =\n  //           -1, // The network hasn't moved to this protocol change yet\n  //       MANAGE_DATA_NAME_NOT_FOUND =\n  //           -2, // Trying to remove a Data Entry that isn't there\n  //       MANAGE_DATA_LOW_RESERVE = -3, // not enough funds to create a new Data Entry\n  //       MANAGE_DATA_INVALID_NAME = -4 // Name not a valid string\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ManageDataResultCode\", {\n    manageDataSuccess: 0,\n    manageDataNotSupportedYet: -1,\n    manageDataNameNotFound: -2,\n    manageDataLowReserve: -3,\n    manageDataInvalidName: -4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ManageDataResult switch (ManageDataResultCode code)\n  //   {\n  //   case MANAGE_DATA_SUCCESS:\n  //       void;\n  //   case MANAGE_DATA_NOT_SUPPORTED_YET:\n  //   case MANAGE_DATA_NAME_NOT_FOUND:\n  //   case MANAGE_DATA_LOW_RESERVE:\n  //   case MANAGE_DATA_INVALID_NAME:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ManageDataResult\", {\n    switchOn: xdr.lookup(\"ManageDataResultCode\"),\n    switchName: \"code\",\n    switches: [[\"manageDataSuccess\", xdr[\"void\"]()], [\"manageDataNotSupportedYet\", xdr[\"void\"]()], [\"manageDataNameNotFound\", xdr[\"void\"]()], [\"manageDataLowReserve\", xdr[\"void\"]()], [\"manageDataInvalidName\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BumpSequenceResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       BUMP_SEQUENCE_SUCCESS = 0,\n  //       // codes considered as \"failure\" for the operation\n  //       BUMP_SEQUENCE_BAD_SEQ = -1 // `bumpTo` is not within bounds\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"BumpSequenceResultCode\", {\n    bumpSequenceSuccess: 0,\n    bumpSequenceBadSeq: -1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union BumpSequenceResult switch (BumpSequenceResultCode code)\n  //   {\n  //   case BUMP_SEQUENCE_SUCCESS:\n  //       void;\n  //   case BUMP_SEQUENCE_BAD_SEQ:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"BumpSequenceResult\", {\n    switchOn: xdr.lookup(\"BumpSequenceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"bumpSequenceSuccess\", xdr[\"void\"]()], [\"bumpSequenceBadSeq\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum CreateClaimableBalanceResultCode\n  //   {\n  //       CREATE_CLAIMABLE_BALANCE_SUCCESS = 0,\n  //       CREATE_CLAIMABLE_BALANCE_MALFORMED = -1,\n  //       CREATE_CLAIMABLE_BALANCE_LOW_RESERVE = -2,\n  //       CREATE_CLAIMABLE_BALANCE_NO_TRUST = -3,\n  //       CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED = -4,\n  //       CREATE_CLAIMABLE_BALANCE_UNDERFUNDED = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"CreateClaimableBalanceResultCode\", {\n    createClaimableBalanceSuccess: 0,\n    createClaimableBalanceMalformed: -1,\n    createClaimableBalanceLowReserve: -2,\n    createClaimableBalanceNoTrust: -3,\n    createClaimableBalanceNotAuthorized: -4,\n    createClaimableBalanceUnderfunded: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union CreateClaimableBalanceResult switch (\n  //       CreateClaimableBalanceResultCode code)\n  //   {\n  //   case CREATE_CLAIMABLE_BALANCE_SUCCESS:\n  //       ClaimableBalanceID balanceID;\n  //   case CREATE_CLAIMABLE_BALANCE_MALFORMED:\n  //   case CREATE_CLAIMABLE_BALANCE_LOW_RESERVE:\n  //   case CREATE_CLAIMABLE_BALANCE_NO_TRUST:\n  //   case CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED:\n  //   case CREATE_CLAIMABLE_BALANCE_UNDERFUNDED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"CreateClaimableBalanceResult\", {\n    switchOn: xdr.lookup(\"CreateClaimableBalanceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"createClaimableBalanceSuccess\", \"balanceId\"], [\"createClaimableBalanceMalformed\", xdr[\"void\"]()], [\"createClaimableBalanceLowReserve\", xdr[\"void\"]()], [\"createClaimableBalanceNoTrust\", xdr[\"void\"]()], [\"createClaimableBalanceNotAuthorized\", xdr[\"void\"]()], [\"createClaimableBalanceUnderfunded\", xdr[\"void\"]()]],\n    arms: {\n      balanceId: xdr.lookup(\"ClaimableBalanceId\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClaimClaimableBalanceResultCode\n  //   {\n  //       CLAIM_CLAIMABLE_BALANCE_SUCCESS = 0,\n  //       CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST = -1,\n  //       CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM = -2,\n  //       CLAIM_CLAIMABLE_BALANCE_LINE_FULL = -3,\n  //       CLAIM_CLAIMABLE_BALANCE_NO_TRUST = -4,\n  //       CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClaimClaimableBalanceResultCode\", {\n    claimClaimableBalanceSuccess: 0,\n    claimClaimableBalanceDoesNotExist: -1,\n    claimClaimableBalanceCannotClaim: -2,\n    claimClaimableBalanceLineFull: -3,\n    claimClaimableBalanceNoTrust: -4,\n    claimClaimableBalanceNotAuthorized: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClaimClaimableBalanceResult switch (ClaimClaimableBalanceResultCode code)\n  //   {\n  //   case CLAIM_CLAIMABLE_BALANCE_SUCCESS:\n  //       void;\n  //   case CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST:\n  //   case CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM:\n  //   case CLAIM_CLAIMABLE_BALANCE_LINE_FULL:\n  //   case CLAIM_CLAIMABLE_BALANCE_NO_TRUST:\n  //   case CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClaimClaimableBalanceResult\", {\n    switchOn: xdr.lookup(\"ClaimClaimableBalanceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"claimClaimableBalanceSuccess\", xdr[\"void\"]()], [\"claimClaimableBalanceDoesNotExist\", xdr[\"void\"]()], [\"claimClaimableBalanceCannotClaim\", xdr[\"void\"]()], [\"claimClaimableBalanceLineFull\", xdr[\"void\"]()], [\"claimClaimableBalanceNoTrust\", xdr[\"void\"]()], [\"claimClaimableBalanceNotAuthorized\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum BeginSponsoringFutureReservesResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED = -1,\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED = -2,\n  //       BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE = -3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"BeginSponsoringFutureReservesResultCode\", {\n    beginSponsoringFutureReservesSuccess: 0,\n    beginSponsoringFutureReservesMalformed: -1,\n    beginSponsoringFutureReservesAlreadySponsored: -2,\n    beginSponsoringFutureReservesRecursive: -3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union BeginSponsoringFutureReservesResult switch (\n  //       BeginSponsoringFutureReservesResultCode code)\n  //   {\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS:\n  //       void;\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED:\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED:\n  //   case BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"BeginSponsoringFutureReservesResult\", {\n    switchOn: xdr.lookup(\"BeginSponsoringFutureReservesResultCode\"),\n    switchName: \"code\",\n    switches: [[\"beginSponsoringFutureReservesSuccess\", xdr[\"void\"]()], [\"beginSponsoringFutureReservesMalformed\", xdr[\"void\"]()], [\"beginSponsoringFutureReservesAlreadySponsored\", xdr[\"void\"]()], [\"beginSponsoringFutureReservesRecursive\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum EndSponsoringFutureReservesResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       END_SPONSORING_FUTURE_RESERVES_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       END_SPONSORING_FUTURE_RESERVES_NOT_SPONSORED = -1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"EndSponsoringFutureReservesResultCode\", {\n    endSponsoringFutureReservesSuccess: 0,\n    endSponsoringFutureReservesNotSponsored: -1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union EndSponsoringFutureReservesResult switch (\n  //       EndSponsoringFutureReservesResultCode code)\n  //   {\n  //   case END_SPONSORING_FUTURE_RESERVES_SUCCESS:\n  //       void;\n  //   case END_SPONSORING_FUTURE_RESERVES_NOT_SPONSORED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"EndSponsoringFutureReservesResult\", {\n    switchOn: xdr.lookup(\"EndSponsoringFutureReservesResultCode\"),\n    switchName: \"code\",\n    switches: [[\"endSponsoringFutureReservesSuccess\", xdr[\"void\"]()], [\"endSponsoringFutureReservesNotSponsored\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum RevokeSponsorshipResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       REVOKE_SPONSORSHIP_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       REVOKE_SPONSORSHIP_DOES_NOT_EXIST = -1,\n  //       REVOKE_SPONSORSHIP_NOT_SPONSOR = -2,\n  //       REVOKE_SPONSORSHIP_LOW_RESERVE = -3,\n  //       REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE = -4,\n  //       REVOKE_SPONSORSHIP_MALFORMED = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"RevokeSponsorshipResultCode\", {\n    revokeSponsorshipSuccess: 0,\n    revokeSponsorshipDoesNotExist: -1,\n    revokeSponsorshipNotSponsor: -2,\n    revokeSponsorshipLowReserve: -3,\n    revokeSponsorshipOnlyTransferable: -4,\n    revokeSponsorshipMalformed: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union RevokeSponsorshipResult switch (RevokeSponsorshipResultCode code)\n  //   {\n  //   case REVOKE_SPONSORSHIP_SUCCESS:\n  //       void;\n  //   case REVOKE_SPONSORSHIP_DOES_NOT_EXIST:\n  //   case REVOKE_SPONSORSHIP_NOT_SPONSOR:\n  //   case REVOKE_SPONSORSHIP_LOW_RESERVE:\n  //   case REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE:\n  //   case REVOKE_SPONSORSHIP_MALFORMED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"RevokeSponsorshipResult\", {\n    switchOn: xdr.lookup(\"RevokeSponsorshipResultCode\"),\n    switchName: \"code\",\n    switches: [[\"revokeSponsorshipSuccess\", xdr[\"void\"]()], [\"revokeSponsorshipDoesNotExist\", xdr[\"void\"]()], [\"revokeSponsorshipNotSponsor\", xdr[\"void\"]()], [\"revokeSponsorshipLowReserve\", xdr[\"void\"]()], [\"revokeSponsorshipOnlyTransferable\", xdr[\"void\"]()], [\"revokeSponsorshipMalformed\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClawbackResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CLAWBACK_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       CLAWBACK_MALFORMED = -1,\n  //       CLAWBACK_NOT_CLAWBACK_ENABLED = -2,\n  //       CLAWBACK_NO_TRUST = -3,\n  //       CLAWBACK_UNDERFUNDED = -4\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClawbackResultCode\", {\n    clawbackSuccess: 0,\n    clawbackMalformed: -1,\n    clawbackNotClawbackEnabled: -2,\n    clawbackNoTrust: -3,\n    clawbackUnderfunded: -4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClawbackResult switch (ClawbackResultCode code)\n  //   {\n  //   case CLAWBACK_SUCCESS:\n  //       void;\n  //   case CLAWBACK_MALFORMED:\n  //   case CLAWBACK_NOT_CLAWBACK_ENABLED:\n  //   case CLAWBACK_NO_TRUST:\n  //   case CLAWBACK_UNDERFUNDED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClawbackResult\", {\n    switchOn: xdr.lookup(\"ClawbackResultCode\"),\n    switchName: \"code\",\n    switches: [[\"clawbackSuccess\", xdr[\"void\"]()], [\"clawbackMalformed\", xdr[\"void\"]()], [\"clawbackNotClawbackEnabled\", xdr[\"void\"]()], [\"clawbackNoTrust\", xdr[\"void\"]()], [\"clawbackUnderfunded\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ClawbackClaimableBalanceResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       CLAWBACK_CLAIMABLE_BALANCE_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST = -1,\n  //       CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER = -2,\n  //       CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED = -3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ClawbackClaimableBalanceResultCode\", {\n    clawbackClaimableBalanceSuccess: 0,\n    clawbackClaimableBalanceDoesNotExist: -1,\n    clawbackClaimableBalanceNotIssuer: -2,\n    clawbackClaimableBalanceNotClawbackEnabled: -3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ClawbackClaimableBalanceResult switch (\n  //       ClawbackClaimableBalanceResultCode code)\n  //   {\n  //   case CLAWBACK_CLAIMABLE_BALANCE_SUCCESS:\n  //       void;\n  //   case CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST:\n  //   case CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER:\n  //   case CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ClawbackClaimableBalanceResult\", {\n    switchOn: xdr.lookup(\"ClawbackClaimableBalanceResultCode\"),\n    switchName: \"code\",\n    switches: [[\"clawbackClaimableBalanceSuccess\", xdr[\"void\"]()], [\"clawbackClaimableBalanceDoesNotExist\", xdr[\"void\"]()], [\"clawbackClaimableBalanceNotIssuer\", xdr[\"void\"]()], [\"clawbackClaimableBalanceNotClawbackEnabled\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SetTrustLineFlagsResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       SET_TRUST_LINE_FLAGS_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       SET_TRUST_LINE_FLAGS_MALFORMED = -1,\n  //       SET_TRUST_LINE_FLAGS_NO_TRUST_LINE = -2,\n  //       SET_TRUST_LINE_FLAGS_CANT_REVOKE = -3,\n  //       SET_TRUST_LINE_FLAGS_INVALID_STATE = -4,\n  //       SET_TRUST_LINE_FLAGS_LOW_RESERVE = -5 // claimable balances can't be created\n  //                                             // on revoke due to low reserves\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SetTrustLineFlagsResultCode\", {\n    setTrustLineFlagsSuccess: 0,\n    setTrustLineFlagsMalformed: -1,\n    setTrustLineFlagsNoTrustLine: -2,\n    setTrustLineFlagsCantRevoke: -3,\n    setTrustLineFlagsInvalidState: -4,\n    setTrustLineFlagsLowReserve: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SetTrustLineFlagsResult switch (SetTrustLineFlagsResultCode code)\n  //   {\n  //   case SET_TRUST_LINE_FLAGS_SUCCESS:\n  //       void;\n  //   case SET_TRUST_LINE_FLAGS_MALFORMED:\n  //   case SET_TRUST_LINE_FLAGS_NO_TRUST_LINE:\n  //   case SET_TRUST_LINE_FLAGS_CANT_REVOKE:\n  //   case SET_TRUST_LINE_FLAGS_INVALID_STATE:\n  //   case SET_TRUST_LINE_FLAGS_LOW_RESERVE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SetTrustLineFlagsResult\", {\n    switchOn: xdr.lookup(\"SetTrustLineFlagsResultCode\"),\n    switchName: \"code\",\n    switches: [[\"setTrustLineFlagsSuccess\", xdr[\"void\"]()], [\"setTrustLineFlagsMalformed\", xdr[\"void\"]()], [\"setTrustLineFlagsNoTrustLine\", xdr[\"void\"]()], [\"setTrustLineFlagsCantRevoke\", xdr[\"void\"]()], [\"setTrustLineFlagsInvalidState\", xdr[\"void\"]()], [\"setTrustLineFlagsLowReserve\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LiquidityPoolDepositResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       LIQUIDITY_POOL_DEPOSIT_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       LIQUIDITY_POOL_DEPOSIT_MALFORMED = -1,      // bad input\n  //       LIQUIDITY_POOL_DEPOSIT_NO_TRUST = -2,       // no trust line for one of the\n  //                                                   // assets\n  //       LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED = -3, // not authorized for one of the\n  //                                                   // assets\n  //       LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED = -4,    // not enough balance for one of\n  //                                                   // the assets\n  //       LIQUIDITY_POOL_DEPOSIT_LINE_FULL = -5,      // pool share trust line doesn't\n  //                                                   // have sufficient limit\n  //       LIQUIDITY_POOL_DEPOSIT_BAD_PRICE = -6,      // deposit price outside bounds\n  //       LIQUIDITY_POOL_DEPOSIT_POOL_FULL = -7       // pool reserves are full\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LiquidityPoolDepositResultCode\", {\n    liquidityPoolDepositSuccess: 0,\n    liquidityPoolDepositMalformed: -1,\n    liquidityPoolDepositNoTrust: -2,\n    liquidityPoolDepositNotAuthorized: -3,\n    liquidityPoolDepositUnderfunded: -4,\n    liquidityPoolDepositLineFull: -5,\n    liquidityPoolDepositBadPrice: -6,\n    liquidityPoolDepositPoolFull: -7\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LiquidityPoolDepositResult switch (LiquidityPoolDepositResultCode code)\n  //   {\n  //   case LIQUIDITY_POOL_DEPOSIT_SUCCESS:\n  //       void;\n  //   case LIQUIDITY_POOL_DEPOSIT_MALFORMED:\n  //   case LIQUIDITY_POOL_DEPOSIT_NO_TRUST:\n  //   case LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED:\n  //   case LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED:\n  //   case LIQUIDITY_POOL_DEPOSIT_LINE_FULL:\n  //   case LIQUIDITY_POOL_DEPOSIT_BAD_PRICE:\n  //   case LIQUIDITY_POOL_DEPOSIT_POOL_FULL:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolDepositResult\", {\n    switchOn: xdr.lookup(\"LiquidityPoolDepositResultCode\"),\n    switchName: \"code\",\n    switches: [[\"liquidityPoolDepositSuccess\", xdr[\"void\"]()], [\"liquidityPoolDepositMalformed\", xdr[\"void\"]()], [\"liquidityPoolDepositNoTrust\", xdr[\"void\"]()], [\"liquidityPoolDepositNotAuthorized\", xdr[\"void\"]()], [\"liquidityPoolDepositUnderfunded\", xdr[\"void\"]()], [\"liquidityPoolDepositLineFull\", xdr[\"void\"]()], [\"liquidityPoolDepositBadPrice\", xdr[\"void\"]()], [\"liquidityPoolDepositPoolFull\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum LiquidityPoolWithdrawResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       LIQUIDITY_POOL_WITHDRAW_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       LIQUIDITY_POOL_WITHDRAW_MALFORMED = -1,    // bad input\n  //       LIQUIDITY_POOL_WITHDRAW_NO_TRUST = -2,     // no trust line for one of the\n  //                                                  // assets\n  //       LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED = -3,  // not enough balance of the\n  //                                                  // pool share\n  //       LIQUIDITY_POOL_WITHDRAW_LINE_FULL = -4,    // would go above limit for one\n  //                                                  // of the assets\n  //       LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM = -5 // didn't withdraw enough\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"LiquidityPoolWithdrawResultCode\", {\n    liquidityPoolWithdrawSuccess: 0,\n    liquidityPoolWithdrawMalformed: -1,\n    liquidityPoolWithdrawNoTrust: -2,\n    liquidityPoolWithdrawUnderfunded: -3,\n    liquidityPoolWithdrawLineFull: -4,\n    liquidityPoolWithdrawUnderMinimum: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union LiquidityPoolWithdrawResult switch (LiquidityPoolWithdrawResultCode code)\n  //   {\n  //   case LIQUIDITY_POOL_WITHDRAW_SUCCESS:\n  //       void;\n  //   case LIQUIDITY_POOL_WITHDRAW_MALFORMED:\n  //   case LIQUIDITY_POOL_WITHDRAW_NO_TRUST:\n  //   case LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED:\n  //   case LIQUIDITY_POOL_WITHDRAW_LINE_FULL:\n  //   case LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"LiquidityPoolWithdrawResult\", {\n    switchOn: xdr.lookup(\"LiquidityPoolWithdrawResultCode\"),\n    switchName: \"code\",\n    switches: [[\"liquidityPoolWithdrawSuccess\", xdr[\"void\"]()], [\"liquidityPoolWithdrawMalformed\", xdr[\"void\"]()], [\"liquidityPoolWithdrawNoTrust\", xdr[\"void\"]()], [\"liquidityPoolWithdrawUnderfunded\", xdr[\"void\"]()], [\"liquidityPoolWithdrawLineFull\", xdr[\"void\"]()], [\"liquidityPoolWithdrawUnderMinimum\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum InvokeHostFunctionResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       INVOKE_HOST_FUNCTION_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       INVOKE_HOST_FUNCTION_MALFORMED = -1,\n  //       INVOKE_HOST_FUNCTION_TRAPPED = -2,\n  //       INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED = -3,\n  //       INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED = -4,\n  //       INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE = -5\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"InvokeHostFunctionResultCode\", {\n    invokeHostFunctionSuccess: 0,\n    invokeHostFunctionMalformed: -1,\n    invokeHostFunctionTrapped: -2,\n    invokeHostFunctionResourceLimitExceeded: -3,\n    invokeHostFunctionEntryArchived: -4,\n    invokeHostFunctionInsufficientRefundableFee: -5\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union InvokeHostFunctionResult switch (InvokeHostFunctionResultCode code)\n  //   {\n  //   case INVOKE_HOST_FUNCTION_SUCCESS:\n  //       Hash success; // sha256(InvokeHostFunctionSuccessPreImage)\n  //   case INVOKE_HOST_FUNCTION_MALFORMED:\n  //   case INVOKE_HOST_FUNCTION_TRAPPED:\n  //   case INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED:\n  //   case INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED:\n  //   case INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"InvokeHostFunctionResult\", {\n    switchOn: xdr.lookup(\"InvokeHostFunctionResultCode\"),\n    switchName: \"code\",\n    switches: [[\"invokeHostFunctionSuccess\", \"success\"], [\"invokeHostFunctionMalformed\", xdr[\"void\"]()], [\"invokeHostFunctionTrapped\", xdr[\"void\"]()], [\"invokeHostFunctionResourceLimitExceeded\", xdr[\"void\"]()], [\"invokeHostFunctionEntryArchived\", xdr[\"void\"]()], [\"invokeHostFunctionInsufficientRefundableFee\", xdr[\"void\"]()]],\n    arms: {\n      success: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum ExtendFootprintTTLResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       EXTEND_FOOTPRINT_TTL_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       EXTEND_FOOTPRINT_TTL_MALFORMED = -1,\n  //       EXTEND_FOOTPRINT_TTL_RESOURCE_LIMIT_EXCEEDED = -2,\n  //       EXTEND_FOOTPRINT_TTL_INSUFFICIENT_REFUNDABLE_FEE = -3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ExtendFootprintTtlResultCode\", {\n    extendFootprintTtlSuccess: 0,\n    extendFootprintTtlMalformed: -1,\n    extendFootprintTtlResourceLimitExceeded: -2,\n    extendFootprintTtlInsufficientRefundableFee: -3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ExtendFootprintTTLResult switch (ExtendFootprintTTLResultCode code)\n  //   {\n  //   case EXTEND_FOOTPRINT_TTL_SUCCESS:\n  //       void;\n  //   case EXTEND_FOOTPRINT_TTL_MALFORMED:\n  //   case EXTEND_FOOTPRINT_TTL_RESOURCE_LIMIT_EXCEEDED:\n  //   case EXTEND_FOOTPRINT_TTL_INSUFFICIENT_REFUNDABLE_FEE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ExtendFootprintTtlResult\", {\n    switchOn: xdr.lookup(\"ExtendFootprintTtlResultCode\"),\n    switchName: \"code\",\n    switches: [[\"extendFootprintTtlSuccess\", xdr[\"void\"]()], [\"extendFootprintTtlMalformed\", xdr[\"void\"]()], [\"extendFootprintTtlResourceLimitExceeded\", xdr[\"void\"]()], [\"extendFootprintTtlInsufficientRefundableFee\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum RestoreFootprintResultCode\n  //   {\n  //       // codes considered as \"success\" for the operation\n  //       RESTORE_FOOTPRINT_SUCCESS = 0,\n  //\n  //       // codes considered as \"failure\" for the operation\n  //       RESTORE_FOOTPRINT_MALFORMED = -1,\n  //       RESTORE_FOOTPRINT_RESOURCE_LIMIT_EXCEEDED = -2,\n  //       RESTORE_FOOTPRINT_INSUFFICIENT_REFUNDABLE_FEE = -3\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"RestoreFootprintResultCode\", {\n    restoreFootprintSuccess: 0,\n    restoreFootprintMalformed: -1,\n    restoreFootprintResourceLimitExceeded: -2,\n    restoreFootprintInsufficientRefundableFee: -3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union RestoreFootprintResult switch (RestoreFootprintResultCode code)\n  //   {\n  //   case RESTORE_FOOTPRINT_SUCCESS:\n  //       void;\n  //   case RESTORE_FOOTPRINT_MALFORMED:\n  //   case RESTORE_FOOTPRINT_RESOURCE_LIMIT_EXCEEDED:\n  //   case RESTORE_FOOTPRINT_INSUFFICIENT_REFUNDABLE_FEE:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"RestoreFootprintResult\", {\n    switchOn: xdr.lookup(\"RestoreFootprintResultCode\"),\n    switchName: \"code\",\n    switches: [[\"restoreFootprintSuccess\", xdr[\"void\"]()], [\"restoreFootprintMalformed\", xdr[\"void\"]()], [\"restoreFootprintResourceLimitExceeded\", xdr[\"void\"]()], [\"restoreFootprintInsufficientRefundableFee\", xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum OperationResultCode\n  //   {\n  //       opINNER = 0, // inner object result is valid\n  //\n  //       opBAD_AUTH = -1,            // too few valid signatures / wrong network\n  //       opNO_ACCOUNT = -2,          // source account was not found\n  //       opNOT_SUPPORTED = -3,       // operation not supported at this time\n  //       opTOO_MANY_SUBENTRIES = -4, // max number of subentries already reached\n  //       opEXCEEDED_WORK_LIMIT = -5, // operation did too much work\n  //       opTOO_MANY_SPONSORING = -6  // account is sponsoring too many entries\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"OperationResultCode\", {\n    opInner: 0,\n    opBadAuth: -1,\n    opNoAccount: -2,\n    opNotSupported: -3,\n    opTooManySubentries: -4,\n    opExceededWorkLimit: -5,\n    opTooManySponsoring: -6\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountResult createAccountResult;\n  //       case PAYMENT:\n  //           PaymentResult paymentResult;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferResult manageSellOfferResult;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           ManageSellOfferResult createPassiveSellOfferResult;\n  //       case SET_OPTIONS:\n  //           SetOptionsResult setOptionsResult;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustResult changeTrustResult;\n  //       case ALLOW_TRUST:\n  //           AllowTrustResult allowTrustResult;\n  //       case ACCOUNT_MERGE:\n  //           AccountMergeResult accountMergeResult;\n  //       case INFLATION:\n  //           InflationResult inflationResult;\n  //       case MANAGE_DATA:\n  //           ManageDataResult manageDataResult;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceResult bumpSeqResult;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferResult manageBuyOfferResult;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendResult pathPaymentStrictSendResult;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceResult createClaimableBalanceResult;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceResult claimClaimableBalanceResult;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           EndSponsoringFutureReservesResult endSponsoringFutureReservesResult;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipResult revokeSponsorshipResult;\n  //       case CLAWBACK:\n  //           ClawbackResult clawbackResult;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceResult clawbackClaimableBalanceResult;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsResult setTrustLineFlagsResult;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositResult liquidityPoolDepositResult;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawResult liquidityPoolWithdrawResult;\n  //       case INVOKE_HOST_FUNCTION:\n  //           InvokeHostFunctionResult invokeHostFunctionResult;\n  //       case EXTEND_FOOTPRINT_TTL:\n  //           ExtendFootprintTTLResult extendFootprintTTLResult;\n  //       case RESTORE_FOOTPRINT:\n  //           RestoreFootprintResult restoreFootprintResult;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"OperationResultTr\", {\n    switchOn: xdr.lookup(\"OperationType\"),\n    switchName: \"type\",\n    switches: [[\"createAccount\", \"createAccountResult\"], [\"payment\", \"paymentResult\"], [\"pathPaymentStrictReceive\", \"pathPaymentStrictReceiveResult\"], [\"manageSellOffer\", \"manageSellOfferResult\"], [\"createPassiveSellOffer\", \"createPassiveSellOfferResult\"], [\"setOptions\", \"setOptionsResult\"], [\"changeTrust\", \"changeTrustResult\"], [\"allowTrust\", \"allowTrustResult\"], [\"accountMerge\", \"accountMergeResult\"], [\"inflation\", \"inflationResult\"], [\"manageData\", \"manageDataResult\"], [\"bumpSequence\", \"bumpSeqResult\"], [\"manageBuyOffer\", \"manageBuyOfferResult\"], [\"pathPaymentStrictSend\", \"pathPaymentStrictSendResult\"], [\"createClaimableBalance\", \"createClaimableBalanceResult\"], [\"claimClaimableBalance\", \"claimClaimableBalanceResult\"], [\"beginSponsoringFutureReserves\", \"beginSponsoringFutureReservesResult\"], [\"endSponsoringFutureReserves\", \"endSponsoringFutureReservesResult\"], [\"revokeSponsorship\", \"revokeSponsorshipResult\"], [\"clawback\", \"clawbackResult\"], [\"clawbackClaimableBalance\", \"clawbackClaimableBalanceResult\"], [\"setTrustLineFlags\", \"setTrustLineFlagsResult\"], [\"liquidityPoolDeposit\", \"liquidityPoolDepositResult\"], [\"liquidityPoolWithdraw\", \"liquidityPoolWithdrawResult\"], [\"invokeHostFunction\", \"invokeHostFunctionResult\"], [\"extendFootprintTtl\", \"extendFootprintTtlResult\"], [\"restoreFootprint\", \"restoreFootprintResult\"]],\n    arms: {\n      createAccountResult: xdr.lookup(\"CreateAccountResult\"),\n      paymentResult: xdr.lookup(\"PaymentResult\"),\n      pathPaymentStrictReceiveResult: xdr.lookup(\"PathPaymentStrictReceiveResult\"),\n      manageSellOfferResult: xdr.lookup(\"ManageSellOfferResult\"),\n      createPassiveSellOfferResult: xdr.lookup(\"ManageSellOfferResult\"),\n      setOptionsResult: xdr.lookup(\"SetOptionsResult\"),\n      changeTrustResult: xdr.lookup(\"ChangeTrustResult\"),\n      allowTrustResult: xdr.lookup(\"AllowTrustResult\"),\n      accountMergeResult: xdr.lookup(\"AccountMergeResult\"),\n      inflationResult: xdr.lookup(\"InflationResult\"),\n      manageDataResult: xdr.lookup(\"ManageDataResult\"),\n      bumpSeqResult: xdr.lookup(\"BumpSequenceResult\"),\n      manageBuyOfferResult: xdr.lookup(\"ManageBuyOfferResult\"),\n      pathPaymentStrictSendResult: xdr.lookup(\"PathPaymentStrictSendResult\"),\n      createClaimableBalanceResult: xdr.lookup(\"CreateClaimableBalanceResult\"),\n      claimClaimableBalanceResult: xdr.lookup(\"ClaimClaimableBalanceResult\"),\n      beginSponsoringFutureReservesResult: xdr.lookup(\"BeginSponsoringFutureReservesResult\"),\n      endSponsoringFutureReservesResult: xdr.lookup(\"EndSponsoringFutureReservesResult\"),\n      revokeSponsorshipResult: xdr.lookup(\"RevokeSponsorshipResult\"),\n      clawbackResult: xdr.lookup(\"ClawbackResult\"),\n      clawbackClaimableBalanceResult: xdr.lookup(\"ClawbackClaimableBalanceResult\"),\n      setTrustLineFlagsResult: xdr.lookup(\"SetTrustLineFlagsResult\"),\n      liquidityPoolDepositResult: xdr.lookup(\"LiquidityPoolDepositResult\"),\n      liquidityPoolWithdrawResult: xdr.lookup(\"LiquidityPoolWithdrawResult\"),\n      invokeHostFunctionResult: xdr.lookup(\"InvokeHostFunctionResult\"),\n      extendFootprintTtlResult: xdr.lookup(\"ExtendFootprintTtlResult\"),\n      restoreFootprintResult: xdr.lookup(\"RestoreFootprintResult\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union OperationResult switch (OperationResultCode code)\n  //   {\n  //   case opINNER:\n  //       union switch (OperationType type)\n  //       {\n  //       case CREATE_ACCOUNT:\n  //           CreateAccountResult createAccountResult;\n  //       case PAYMENT:\n  //           PaymentResult paymentResult;\n  //       case PATH_PAYMENT_STRICT_RECEIVE:\n  //           PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult;\n  //       case MANAGE_SELL_OFFER:\n  //           ManageSellOfferResult manageSellOfferResult;\n  //       case CREATE_PASSIVE_SELL_OFFER:\n  //           ManageSellOfferResult createPassiveSellOfferResult;\n  //       case SET_OPTIONS:\n  //           SetOptionsResult setOptionsResult;\n  //       case CHANGE_TRUST:\n  //           ChangeTrustResult changeTrustResult;\n  //       case ALLOW_TRUST:\n  //           AllowTrustResult allowTrustResult;\n  //       case ACCOUNT_MERGE:\n  //           AccountMergeResult accountMergeResult;\n  //       case INFLATION:\n  //           InflationResult inflationResult;\n  //       case MANAGE_DATA:\n  //           ManageDataResult manageDataResult;\n  //       case BUMP_SEQUENCE:\n  //           BumpSequenceResult bumpSeqResult;\n  //       case MANAGE_BUY_OFFER:\n  //           ManageBuyOfferResult manageBuyOfferResult;\n  //       case PATH_PAYMENT_STRICT_SEND:\n  //           PathPaymentStrictSendResult pathPaymentStrictSendResult;\n  //       case CREATE_CLAIMABLE_BALANCE:\n  //           CreateClaimableBalanceResult createClaimableBalanceResult;\n  //       case CLAIM_CLAIMABLE_BALANCE:\n  //           ClaimClaimableBalanceResult claimClaimableBalanceResult;\n  //       case BEGIN_SPONSORING_FUTURE_RESERVES:\n  //           BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult;\n  //       case END_SPONSORING_FUTURE_RESERVES:\n  //           EndSponsoringFutureReservesResult endSponsoringFutureReservesResult;\n  //       case REVOKE_SPONSORSHIP:\n  //           RevokeSponsorshipResult revokeSponsorshipResult;\n  //       case CLAWBACK:\n  //           ClawbackResult clawbackResult;\n  //       case CLAWBACK_CLAIMABLE_BALANCE:\n  //           ClawbackClaimableBalanceResult clawbackClaimableBalanceResult;\n  //       case SET_TRUST_LINE_FLAGS:\n  //           SetTrustLineFlagsResult setTrustLineFlagsResult;\n  //       case LIQUIDITY_POOL_DEPOSIT:\n  //           LiquidityPoolDepositResult liquidityPoolDepositResult;\n  //       case LIQUIDITY_POOL_WITHDRAW:\n  //           LiquidityPoolWithdrawResult liquidityPoolWithdrawResult;\n  //       case INVOKE_HOST_FUNCTION:\n  //           InvokeHostFunctionResult invokeHostFunctionResult;\n  //       case EXTEND_FOOTPRINT_TTL:\n  //           ExtendFootprintTTLResult extendFootprintTTLResult;\n  //       case RESTORE_FOOTPRINT:\n  //           RestoreFootprintResult restoreFootprintResult;\n  //       }\n  //       tr;\n  //   case opBAD_AUTH:\n  //   case opNO_ACCOUNT:\n  //   case opNOT_SUPPORTED:\n  //   case opTOO_MANY_SUBENTRIES:\n  //   case opEXCEEDED_WORK_LIMIT:\n  //   case opTOO_MANY_SPONSORING:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"OperationResult\", {\n    switchOn: xdr.lookup(\"OperationResultCode\"),\n    switchName: \"code\",\n    switches: [[\"opInner\", \"tr\"], [\"opBadAuth\", xdr[\"void\"]()], [\"opNoAccount\", xdr[\"void\"]()], [\"opNotSupported\", xdr[\"void\"]()], [\"opTooManySubentries\", xdr[\"void\"]()], [\"opExceededWorkLimit\", xdr[\"void\"]()], [\"opTooManySponsoring\", xdr[\"void\"]()]],\n    arms: {\n      tr: xdr.lookup(\"OperationResultTr\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum TransactionResultCode\n  //   {\n  //       txFEE_BUMP_INNER_SUCCESS = 1, // fee bump inner transaction succeeded\n  //       txSUCCESS = 0,                // all operations succeeded\n  //\n  //       txFAILED = -1, // one of the operations failed (none were applied)\n  //\n  //       txTOO_EARLY = -2,         // ledger closeTime before minTime\n  //       txTOO_LATE = -3,          // ledger closeTime after maxTime\n  //       txMISSING_OPERATION = -4, // no operation was specified\n  //       txBAD_SEQ = -5,           // sequence number does not match source account\n  //\n  //       txBAD_AUTH = -6,             // too few valid signatures / wrong network\n  //       txINSUFFICIENT_BALANCE = -7, // fee would bring account below reserve\n  //       txNO_ACCOUNT = -8,           // source account not found\n  //       txINSUFFICIENT_FEE = -9,     // fee is too small\n  //       txBAD_AUTH_EXTRA = -10,      // unused signatures attached to transaction\n  //       txINTERNAL_ERROR = -11,      // an unknown error occurred\n  //\n  //       txNOT_SUPPORTED = -12,          // transaction type not supported\n  //       txFEE_BUMP_INNER_FAILED = -13,  // fee bump inner transaction failed\n  //       txBAD_SPONSORSHIP = -14,        // sponsorship not confirmed\n  //       txBAD_MIN_SEQ_AGE_OR_GAP = -15, // minSeqAge or minSeqLedgerGap conditions not met\n  //       txMALFORMED = -16,              // precondition is invalid\n  //       txSOROBAN_INVALID = -17         // soroban-specific preconditions were not met\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"TransactionResultCode\", {\n    txFeeBumpInnerSuccess: 1,\n    txSuccess: 0,\n    txFailed: -1,\n    txTooEarly: -2,\n    txTooLate: -3,\n    txMissingOperation: -4,\n    txBadSeq: -5,\n    txBadAuth: -6,\n    txInsufficientBalance: -7,\n    txNoAccount: -8,\n    txInsufficientFee: -9,\n    txBadAuthExtra: -10,\n    txInternalError: -11,\n    txNotSupported: -12,\n    txFeeBumpInnerFailed: -13,\n    txBadSponsorship: -14,\n    txBadMinSeqAgeOrGap: -15,\n    txMalformed: -16,\n    txSorobanInvalid: -17\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (TransactionResultCode code)\n  //       {\n  //       // txFEE_BUMP_INNER_SUCCESS is not included\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // txFEE_BUMP_INNER_FAILED is not included\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //       case txSOROBAN_INVALID:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"InnerTransactionResultResult\", {\n    switchOn: xdr.lookup(\"TransactionResultCode\"),\n    switchName: \"code\",\n    switches: [[\"txSuccess\", \"results\"], [\"txFailed\", \"results\"], [\"txTooEarly\", xdr[\"void\"]()], [\"txTooLate\", xdr[\"void\"]()], [\"txMissingOperation\", xdr[\"void\"]()], [\"txBadSeq\", xdr[\"void\"]()], [\"txBadAuth\", xdr[\"void\"]()], [\"txInsufficientBalance\", xdr[\"void\"]()], [\"txNoAccount\", xdr[\"void\"]()], [\"txInsufficientFee\", xdr[\"void\"]()], [\"txBadAuthExtra\", xdr[\"void\"]()], [\"txInternalError\", xdr[\"void\"]()], [\"txNotSupported\", xdr[\"void\"]()], [\"txBadSponsorship\", xdr[\"void\"]()], [\"txBadMinSeqAgeOrGap\", xdr[\"void\"]()], [\"txMalformed\", xdr[\"void\"]()], [\"txSorobanInvalid\", xdr[\"void\"]()]],\n    arms: {\n      results: xdr.varArray(xdr.lookup(\"OperationResult\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"InnerTransactionResultExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct InnerTransactionResult\n  //   {\n  //       // Always 0. Here for binary compatibility.\n  //       int64 feeCharged;\n  //\n  //       union switch (TransactionResultCode code)\n  //       {\n  //       // txFEE_BUMP_INNER_SUCCESS is not included\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // txFEE_BUMP_INNER_FAILED is not included\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //       case txSOROBAN_INVALID:\n  //           void;\n  //       }\n  //       result;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InnerTransactionResult\", [[\"feeCharged\", xdr.lookup(\"Int64\")], [\"result\", xdr.lookup(\"InnerTransactionResultResult\")], [\"ext\", xdr.lookup(\"InnerTransactionResultExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct InnerTransactionResultPair\n  //   {\n  //       Hash transactionHash;          // hash of the inner transaction\n  //       InnerTransactionResult result; // result for the inner transaction\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"InnerTransactionResultPair\", [[\"transactionHash\", xdr.lookup(\"Hash\")], [\"result\", xdr.lookup(\"InnerTransactionResult\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union switch (TransactionResultCode code)\n  //       {\n  //       case txFEE_BUMP_INNER_SUCCESS:\n  //       case txFEE_BUMP_INNER_FAILED:\n  //           InnerTransactionResultPair innerResultPair;\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // case txFEE_BUMP_INNER_FAILED: handled above\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //       case txSOROBAN_INVALID:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionResultResult\", {\n    switchOn: xdr.lookup(\"TransactionResultCode\"),\n    switchName: \"code\",\n    switches: [[\"txFeeBumpInnerSuccess\", \"innerResultPair\"], [\"txFeeBumpInnerFailed\", \"innerResultPair\"], [\"txSuccess\", \"results\"], [\"txFailed\", \"results\"], [\"txTooEarly\", xdr[\"void\"]()], [\"txTooLate\", xdr[\"void\"]()], [\"txMissingOperation\", xdr[\"void\"]()], [\"txBadSeq\", xdr[\"void\"]()], [\"txBadAuth\", xdr[\"void\"]()], [\"txInsufficientBalance\", xdr[\"void\"]()], [\"txNoAccount\", xdr[\"void\"]()], [\"txInsufficientFee\", xdr[\"void\"]()], [\"txBadAuthExtra\", xdr[\"void\"]()], [\"txInternalError\", xdr[\"void\"]()], [\"txNotSupported\", xdr[\"void\"]()], [\"txBadSponsorship\", xdr[\"void\"]()], [\"txBadMinSeqAgeOrGap\", xdr[\"void\"]()], [\"txMalformed\", xdr[\"void\"]()], [\"txSorobanInvalid\", xdr[\"void\"]()]],\n    arms: {\n      innerResultPair: xdr.lookup(\"InnerTransactionResultPair\"),\n      results: xdr.varArray(xdr.lookup(\"OperationResult\"), 2147483647)\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //\n  // ===========================================================================\n  xdr.union(\"TransactionResultExt\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct TransactionResult\n  //   {\n  //       int64 feeCharged; // actual fee charged for the transaction\n  //\n  //       union switch (TransactionResultCode code)\n  //       {\n  //       case txFEE_BUMP_INNER_SUCCESS:\n  //       case txFEE_BUMP_INNER_FAILED:\n  //           InnerTransactionResultPair innerResultPair;\n  //       case txSUCCESS:\n  //       case txFAILED:\n  //           OperationResult results<>;\n  //       case txTOO_EARLY:\n  //       case txTOO_LATE:\n  //       case txMISSING_OPERATION:\n  //       case txBAD_SEQ:\n  //       case txBAD_AUTH:\n  //       case txINSUFFICIENT_BALANCE:\n  //       case txNO_ACCOUNT:\n  //       case txINSUFFICIENT_FEE:\n  //       case txBAD_AUTH_EXTRA:\n  //       case txINTERNAL_ERROR:\n  //       case txNOT_SUPPORTED:\n  //       // case txFEE_BUMP_INNER_FAILED: handled above\n  //       case txBAD_SPONSORSHIP:\n  //       case txBAD_MIN_SEQ_AGE_OR_GAP:\n  //       case txMALFORMED:\n  //       case txSOROBAN_INVALID:\n  //           void;\n  //       }\n  //       result;\n  //\n  //       // reserved for future use\n  //       union switch (int v)\n  //       {\n  //       case 0:\n  //           void;\n  //       }\n  //       ext;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"TransactionResult\", [[\"feeCharged\", xdr.lookup(\"Int64\")], [\"result\", xdr.lookup(\"TransactionResultResult\")], [\"ext\", xdr.lookup(\"TransactionResultExt\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Hash[32];\n  //\n  // ===========================================================================\n  xdr.typedef(\"Hash\", xdr.opaque(32));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque uint256[32];\n  //\n  // ===========================================================================\n  xdr.typedef(\"Uint256\", xdr.opaque(32));\n\n  // === xdr source ============================================================\n  //\n  //   typedef unsigned int uint32;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Uint32\", xdr.uint());\n\n  // === xdr source ============================================================\n  //\n  //   typedef int int32;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Int32\", xdr[\"int\"]());\n\n  // === xdr source ============================================================\n  //\n  //   typedef unsigned hyper uint64;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Uint64\", xdr.uhyper());\n\n  // === xdr source ============================================================\n  //\n  //   typedef hyper int64;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Int64\", xdr.hyper());\n\n  // === xdr source ============================================================\n  //\n  //   typedef uint64 TimePoint;\n  //\n  // ===========================================================================\n  xdr.typedef(\"TimePoint\", xdr.lookup(\"Uint64\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef uint64 Duration;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Duration\", xdr.lookup(\"Uint64\"));\n\n  // === xdr source ============================================================\n  //\n  //   union ExtensionPoint switch (int v)\n  //   {\n  //   case 0:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ExtensionPoint\", {\n    switchOn: xdr[\"int\"](),\n    switchName: \"v\",\n    switches: [[0, xdr[\"void\"]()]],\n    arms: {}\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum CryptoKeyType\n  //   {\n  //       KEY_TYPE_ED25519 = 0,\n  //       KEY_TYPE_PRE_AUTH_TX = 1,\n  //       KEY_TYPE_HASH_X = 2,\n  //       KEY_TYPE_ED25519_SIGNED_PAYLOAD = 3,\n  //       // MUXED enum values for supported type are derived from the enum values\n  //       // above by ORing them with 0x100\n  //       KEY_TYPE_MUXED_ED25519 = 0x100\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"CryptoKeyType\", {\n    keyTypeEd25519: 0,\n    keyTypePreAuthTx: 1,\n    keyTypeHashX: 2,\n    keyTypeEd25519SignedPayload: 3,\n    keyTypeMuxedEd25519: 256\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum PublicKeyType\n  //   {\n  //       PUBLIC_KEY_TYPE_ED25519 = KEY_TYPE_ED25519\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"PublicKeyType\", {\n    publicKeyTypeEd25519: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SignerKeyType\n  //   {\n  //       SIGNER_KEY_TYPE_ED25519 = KEY_TYPE_ED25519,\n  //       SIGNER_KEY_TYPE_PRE_AUTH_TX = KEY_TYPE_PRE_AUTH_TX,\n  //       SIGNER_KEY_TYPE_HASH_X = KEY_TYPE_HASH_X,\n  //       SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD = KEY_TYPE_ED25519_SIGNED_PAYLOAD\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"SignerKeyType\", {\n    signerKeyTypeEd25519: 0,\n    signerKeyTypePreAuthTx: 1,\n    signerKeyTypeHashX: 2,\n    signerKeyTypeEd25519SignedPayload: 3\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union PublicKey switch (PublicKeyType type)\n  //   {\n  //   case PUBLIC_KEY_TYPE_ED25519:\n  //       uint256 ed25519;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"PublicKey\", {\n    switchOn: xdr.lookup(\"PublicKeyType\"),\n    switchName: \"type\",\n    switches: [[\"publicKeyTypeEd25519\", \"ed25519\"]],\n    arms: {\n      ed25519: xdr.lookup(\"Uint256\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct\n  //       {\n  //           /* Public key that must sign the payload. */\n  //           uint256 ed25519;\n  //           /* Payload to be raw signed by ed25519. */\n  //           opaque payload<64>;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"SignerKeyEd25519SignedPayload\", [[\"ed25519\", xdr.lookup(\"Uint256\")], [\"payload\", xdr.varOpaque(64)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SignerKey switch (SignerKeyType type)\n  //   {\n  //   case SIGNER_KEY_TYPE_ED25519:\n  //       uint256 ed25519;\n  //   case SIGNER_KEY_TYPE_PRE_AUTH_TX:\n  //       /* SHA-256 Hash of TransactionSignaturePayload structure */\n  //       uint256 preAuthTx;\n  //   case SIGNER_KEY_TYPE_HASH_X:\n  //       /* Hash of random 256 bit preimage X */\n  //       uint256 hashX;\n  //   case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:\n  //       struct\n  //       {\n  //           /* Public key that must sign the payload. */\n  //           uint256 ed25519;\n  //           /* Payload to be raw signed by ed25519. */\n  //           opaque payload<64>;\n  //       } ed25519SignedPayload;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"SignerKey\", {\n    switchOn: xdr.lookup(\"SignerKeyType\"),\n    switchName: \"type\",\n    switches: [[\"signerKeyTypeEd25519\", \"ed25519\"], [\"signerKeyTypePreAuthTx\", \"preAuthTx\"], [\"signerKeyTypeHashX\", \"hashX\"], [\"signerKeyTypeEd25519SignedPayload\", \"ed25519SignedPayload\"]],\n    arms: {\n      ed25519: xdr.lookup(\"Uint256\"),\n      preAuthTx: xdr.lookup(\"Uint256\"),\n      hashX: xdr.lookup(\"Uint256\"),\n      ed25519SignedPayload: xdr.lookup(\"SignerKeyEd25519SignedPayload\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque Signature<64>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"Signature\", xdr.varOpaque(64));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque SignatureHint[4];\n  //\n  // ===========================================================================\n  xdr.typedef(\"SignatureHint\", xdr.opaque(4));\n\n  // === xdr source ============================================================\n  //\n  //   typedef PublicKey NodeID;\n  //\n  // ===========================================================================\n  xdr.typedef(\"NodeId\", xdr.lookup(\"PublicKey\"));\n\n  // === xdr source ============================================================\n  //\n  //   typedef PublicKey AccountID;\n  //\n  // ===========================================================================\n  xdr.typedef(\"AccountId\", xdr.lookup(\"PublicKey\"));\n\n  // === xdr source ============================================================\n  //\n  //   struct Curve25519Secret\n  //   {\n  //       opaque key[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Curve25519Secret\", [[\"key\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Curve25519Public\n  //   {\n  //       opaque key[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Curve25519Public\", [[\"key\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct HmacSha256Key\n  //   {\n  //       opaque key[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"HmacSha256Key\", [[\"key\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct HmacSha256Mac\n  //   {\n  //       opaque mac[32];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"HmacSha256Mac\", [[\"mac\", xdr.opaque(32)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ShortHashSeed\n  //   {\n  //       opaque seed[16];\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ShortHashSeed\", [[\"seed\", xdr.opaque(16)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum BinaryFuseFilterType\n  //   {\n  //       BINARY_FUSE_FILTER_8_BIT = 0,\n  //       BINARY_FUSE_FILTER_16_BIT = 1,\n  //       BINARY_FUSE_FILTER_32_BIT = 2\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"BinaryFuseFilterType\", {\n    binaryFuseFilter8Bit: 0,\n    binaryFuseFilter16Bit: 1,\n    binaryFuseFilter32Bit: 2\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SerializedBinaryFuseFilter\n  //   {\n  //       BinaryFuseFilterType type;\n  //\n  //       // Seed used to hash input to filter\n  //       ShortHashSeed inputHashSeed;\n  //\n  //       // Seed used for internal filter hash operations\n  //       ShortHashSeed filterSeed;\n  //       uint32 segmentLength;\n  //       uint32 segementLengthMask;\n  //       uint32 segmentCount;\n  //       uint32 segmentCountLength;\n  //       uint32 fingerprintLength; // Length in terms of element count, not bytes\n  //\n  //       // Array of uint8_t, uint16_t, or uint32_t depending on filter type\n  //       opaque fingerprints<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"SerializedBinaryFuseFilter\", [[\"type\", xdr.lookup(\"BinaryFuseFilterType\")], [\"inputHashSeed\", xdr.lookup(\"ShortHashSeed\")], [\"filterSeed\", xdr.lookup(\"ShortHashSeed\")], [\"segmentLength\", xdr.lookup(\"Uint32\")], [\"segementLengthMask\", xdr.lookup(\"Uint32\")], [\"segmentCount\", xdr.lookup(\"Uint32\")], [\"segmentCountLength\", xdr.lookup(\"Uint32\")], [\"fingerprintLength\", xdr.lookup(\"Uint32\")], [\"fingerprints\", xdr.varOpaque()]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCValType\n  //   {\n  //       SCV_BOOL = 0,\n  //       SCV_VOID = 1,\n  //       SCV_ERROR = 2,\n  //\n  //       // 32 bits is the smallest type in WASM or XDR; no need for u8/u16.\n  //       SCV_U32 = 3,\n  //       SCV_I32 = 4,\n  //\n  //       // 64 bits is naturally supported by both WASM and XDR also.\n  //       SCV_U64 = 5,\n  //       SCV_I64 = 6,\n  //\n  //       // Time-related u64 subtypes with their own functions and formatting.\n  //       SCV_TIMEPOINT = 7,\n  //       SCV_DURATION = 8,\n  //\n  //       // 128 bits is naturally supported by Rust and we use it for Soroban\n  //       // fixed-point arithmetic prices / balances / similar \"quantities\". These\n  //       // are represented in XDR as a pair of 2 u64s.\n  //       SCV_U128 = 9,\n  //       SCV_I128 = 10,\n  //\n  //       // 256 bits is the size of sha256 output, ed25519 keys, and the EVM machine\n  //       // word, so for interop use we include this even though it requires a small\n  //       // amount of Rust guest and/or host library code.\n  //       SCV_U256 = 11,\n  //       SCV_I256 = 12,\n  //\n  //       // Bytes come in 3 flavors, 2 of which have meaningfully different\n  //       // formatting and validity-checking / domain-restriction.\n  //       SCV_BYTES = 13,\n  //       SCV_STRING = 14,\n  //       SCV_SYMBOL = 15,\n  //\n  //       // Vecs and maps are just polymorphic containers of other ScVals.\n  //       SCV_VEC = 16,\n  //       SCV_MAP = 17,\n  //\n  //       // Address is the universal identifier for contracts and classic\n  //       // accounts.\n  //       SCV_ADDRESS = 18,\n  //\n  //       // The following are the internal SCVal variants that are not\n  //       // exposed to the contracts.\n  //       SCV_CONTRACT_INSTANCE = 19,\n  //\n  //       // SCV_LEDGER_KEY_CONTRACT_INSTANCE and SCV_LEDGER_KEY_NONCE are unique\n  //       // symbolic SCVals used as the key for ledger entries for a contract's\n  //       // instance and an address' nonce, respectively.\n  //       SCV_LEDGER_KEY_CONTRACT_INSTANCE = 20,\n  //       SCV_LEDGER_KEY_NONCE = 21\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScValType\", {\n    scvBool: 0,\n    scvVoid: 1,\n    scvError: 2,\n    scvU32: 3,\n    scvI32: 4,\n    scvU64: 5,\n    scvI64: 6,\n    scvTimepoint: 7,\n    scvDuration: 8,\n    scvU128: 9,\n    scvI128: 10,\n    scvU256: 11,\n    scvI256: 12,\n    scvBytes: 13,\n    scvString: 14,\n    scvSymbol: 15,\n    scvVec: 16,\n    scvMap: 17,\n    scvAddress: 18,\n    scvContractInstance: 19,\n    scvLedgerKeyContractInstance: 20,\n    scvLedgerKeyNonce: 21\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SCErrorType\n  //   {\n  //       SCE_CONTRACT = 0,          // Contract-specific, user-defined codes.\n  //       SCE_WASM_VM = 1,           // Errors while interpreting WASM bytecode.\n  //       SCE_CONTEXT = 2,           // Errors in the contract's host context.\n  //       SCE_STORAGE = 3,           // Errors accessing host storage.\n  //       SCE_OBJECT = 4,            // Errors working with host objects.\n  //       SCE_CRYPTO = 5,            // Errors in cryptographic operations.\n  //       SCE_EVENTS = 6,            // Errors while emitting events.\n  //       SCE_BUDGET = 7,            // Errors relating to budget limits.\n  //       SCE_VALUE = 8,             // Errors working with host values or SCVals.\n  //       SCE_AUTH = 9               // Errors from the authentication subsystem.\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScErrorType\", {\n    sceContract: 0,\n    sceWasmVm: 1,\n    sceContext: 2,\n    sceStorage: 3,\n    sceObject: 4,\n    sceCrypto: 5,\n    sceEvents: 6,\n    sceBudget: 7,\n    sceValue: 8,\n    sceAuth: 9\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SCErrorCode\n  //   {\n  //       SCEC_ARITH_DOMAIN = 0,      // Some arithmetic was undefined (overflow, divide-by-zero).\n  //       SCEC_INDEX_BOUNDS = 1,      // Something was indexed beyond its bounds.\n  //       SCEC_INVALID_INPUT = 2,     // User provided some otherwise-bad data.\n  //       SCEC_MISSING_VALUE = 3,     // Some value was required but not provided.\n  //       SCEC_EXISTING_VALUE = 4,    // Some value was provided where not allowed.\n  //       SCEC_EXCEEDED_LIMIT = 5,    // Some arbitrary limit -- gas or otherwise -- was hit.\n  //       SCEC_INVALID_ACTION = 6,    // Data was valid but action requested was not.\n  //       SCEC_INTERNAL_ERROR = 7,    // The host detected an error in its own logic.\n  //       SCEC_UNEXPECTED_TYPE = 8,   // Some type wasn't as expected.\n  //       SCEC_UNEXPECTED_SIZE = 9    // Something's size wasn't as expected.\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScErrorCode\", {\n    scecArithDomain: 0,\n    scecIndexBounds: 1,\n    scecInvalidInput: 2,\n    scecMissingValue: 3,\n    scecExistingValue: 4,\n    scecExceededLimit: 5,\n    scecInvalidAction: 6,\n    scecInternalError: 7,\n    scecUnexpectedType: 8,\n    scecUnexpectedSize: 9\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SCError switch (SCErrorType type)\n  //   {\n  //   case SCE_CONTRACT:\n  //       uint32 contractCode;\n  //   case SCE_WASM_VM:\n  //   case SCE_CONTEXT:\n  //   case SCE_STORAGE:\n  //   case SCE_OBJECT:\n  //   case SCE_CRYPTO:\n  //   case SCE_EVENTS:\n  //   case SCE_BUDGET:\n  //   case SCE_VALUE:\n  //   case SCE_AUTH:\n  //       SCErrorCode code;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScError\", {\n    switchOn: xdr.lookup(\"ScErrorType\"),\n    switchName: \"type\",\n    switches: [[\"sceContract\", \"contractCode\"], [\"sceWasmVm\", \"code\"], [\"sceContext\", \"code\"], [\"sceStorage\", \"code\"], [\"sceObject\", \"code\"], [\"sceCrypto\", \"code\"], [\"sceEvents\", \"code\"], [\"sceBudget\", \"code\"], [\"sceValue\", \"code\"], [\"sceAuth\", \"code\"]],\n    arms: {\n      contractCode: xdr.lookup(\"Uint32\"),\n      code: xdr.lookup(\"ScErrorCode\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct UInt128Parts {\n  //       uint64 hi;\n  //       uint64 lo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"UInt128Parts\", [[\"hi\", xdr.lookup(\"Uint64\")], [\"lo\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Int128Parts {\n  //       int64 hi;\n  //       uint64 lo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Int128Parts\", [[\"hi\", xdr.lookup(\"Int64\")], [\"lo\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct UInt256Parts {\n  //       uint64 hi_hi;\n  //       uint64 hi_lo;\n  //       uint64 lo_hi;\n  //       uint64 lo_lo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"UInt256Parts\", [[\"hiHi\", xdr.lookup(\"Uint64\")], [\"hiLo\", xdr.lookup(\"Uint64\")], [\"loHi\", xdr.lookup(\"Uint64\")], [\"loLo\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct Int256Parts {\n  //       int64 hi_hi;\n  //       uint64 hi_lo;\n  //       uint64 lo_hi;\n  //       uint64 lo_lo;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"Int256Parts\", [[\"hiHi\", xdr.lookup(\"Int64\")], [\"hiLo\", xdr.lookup(\"Uint64\")], [\"loHi\", xdr.lookup(\"Uint64\")], [\"loLo\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ContractExecutableType\n  //   {\n  //       CONTRACT_EXECUTABLE_WASM = 0,\n  //       CONTRACT_EXECUTABLE_STELLAR_ASSET = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ContractExecutableType\", {\n    contractExecutableWasm: 0,\n    contractExecutableStellarAsset: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ContractExecutable switch (ContractExecutableType type)\n  //   {\n  //   case CONTRACT_EXECUTABLE_WASM:\n  //       Hash wasm_hash;\n  //   case CONTRACT_EXECUTABLE_STELLAR_ASSET:\n  //       void;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ContractExecutable\", {\n    switchOn: xdr.lookup(\"ContractExecutableType\"),\n    switchName: \"type\",\n    switches: [[\"contractExecutableWasm\", \"wasmHash\"], [\"contractExecutableStellarAsset\", xdr[\"void\"]()]],\n    arms: {\n      wasmHash: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   enum SCAddressType\n  //   {\n  //       SC_ADDRESS_TYPE_ACCOUNT = 0,\n  //       SC_ADDRESS_TYPE_CONTRACT = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScAddressType\", {\n    scAddressTypeAccount: 0,\n    scAddressTypeContract: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SCAddress switch (SCAddressType type)\n  //   {\n  //   case SC_ADDRESS_TYPE_ACCOUNT:\n  //       AccountID accountId;\n  //   case SC_ADDRESS_TYPE_CONTRACT:\n  //       Hash contractId;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScAddress\", {\n    switchOn: xdr.lookup(\"ScAddressType\"),\n    switchName: \"type\",\n    switches: [[\"scAddressTypeAccount\", \"accountId\"], [\"scAddressTypeContract\", \"contractId\"]],\n    arms: {\n      accountId: xdr.lookup(\"AccountId\"),\n      contractId: xdr.lookup(\"Hash\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const SCSYMBOL_LIMIT = 32;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"SCSYMBOL_LIMIT\", 32);\n\n  // === xdr source ============================================================\n  //\n  //   typedef SCVal SCVec<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ScVec\", xdr.varArray(xdr.lookup(\"ScVal\"), 2147483647));\n\n  // === xdr source ============================================================\n  //\n  //   typedef SCMapEntry SCMap<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ScMap\", xdr.varArray(xdr.lookup(\"ScMapEntry\"), 2147483647));\n\n  // === xdr source ============================================================\n  //\n  //   typedef opaque SCBytes<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ScBytes\", xdr.varOpaque());\n\n  // === xdr source ============================================================\n  //\n  //   typedef string SCString<>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ScString\", xdr.string());\n\n  // === xdr source ============================================================\n  //\n  //   typedef string SCSymbol<SCSYMBOL_LIMIT>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ScSymbol\", xdr.string(SCSYMBOL_LIMIT));\n\n  // === xdr source ============================================================\n  //\n  //   struct SCNonceKey {\n  //       int64 nonce;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScNonceKey\", [[\"nonce\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCContractInstance {\n  //       ContractExecutable executable;\n  //       SCMap* storage;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScContractInstance\", [[\"executable\", xdr.lookup(\"ContractExecutable\")], [\"storage\", xdr.option(xdr.lookup(\"ScMap\"))]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SCVal switch (SCValType type)\n  //   {\n  //\n  //   case SCV_BOOL:\n  //       bool b;\n  //   case SCV_VOID:\n  //       void;\n  //   case SCV_ERROR:\n  //       SCError error;\n  //\n  //   case SCV_U32:\n  //       uint32 u32;\n  //   case SCV_I32:\n  //       int32 i32;\n  //\n  //   case SCV_U64:\n  //       uint64 u64;\n  //   case SCV_I64:\n  //       int64 i64;\n  //   case SCV_TIMEPOINT:\n  //       TimePoint timepoint;\n  //   case SCV_DURATION:\n  //       Duration duration;\n  //\n  //   case SCV_U128:\n  //       UInt128Parts u128;\n  //   case SCV_I128:\n  //       Int128Parts i128;\n  //\n  //   case SCV_U256:\n  //       UInt256Parts u256;\n  //   case SCV_I256:\n  //       Int256Parts i256;\n  //\n  //   case SCV_BYTES:\n  //       SCBytes bytes;\n  //   case SCV_STRING:\n  //       SCString str;\n  //   case SCV_SYMBOL:\n  //       SCSymbol sym;\n  //\n  //   // Vec and Map are recursive so need to live\n  //   // behind an option, due to xdrpp limitations.\n  //   case SCV_VEC:\n  //       SCVec *vec;\n  //   case SCV_MAP:\n  //       SCMap *map;\n  //\n  //   case SCV_ADDRESS:\n  //       SCAddress address;\n  //\n  //   // Special SCVals reserved for system-constructed contract-data\n  //   // ledger keys, not generally usable elsewhere.\n  //   case SCV_LEDGER_KEY_CONTRACT_INSTANCE:\n  //       void;\n  //   case SCV_LEDGER_KEY_NONCE:\n  //       SCNonceKey nonce_key;\n  //\n  //   case SCV_CONTRACT_INSTANCE:\n  //       SCContractInstance instance;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScVal\", {\n    switchOn: xdr.lookup(\"ScValType\"),\n    switchName: \"type\",\n    switches: [[\"scvBool\", \"b\"], [\"scvVoid\", xdr[\"void\"]()], [\"scvError\", \"error\"], [\"scvU32\", \"u32\"], [\"scvI32\", \"i32\"], [\"scvU64\", \"u64\"], [\"scvI64\", \"i64\"], [\"scvTimepoint\", \"timepoint\"], [\"scvDuration\", \"duration\"], [\"scvU128\", \"u128\"], [\"scvI128\", \"i128\"], [\"scvU256\", \"u256\"], [\"scvI256\", \"i256\"], [\"scvBytes\", \"bytes\"], [\"scvString\", \"str\"], [\"scvSymbol\", \"sym\"], [\"scvVec\", \"vec\"], [\"scvMap\", \"map\"], [\"scvAddress\", \"address\"], [\"scvLedgerKeyContractInstance\", xdr[\"void\"]()], [\"scvLedgerKeyNonce\", \"nonceKey\"], [\"scvContractInstance\", \"instance\"]],\n    arms: {\n      b: xdr.bool(),\n      error: xdr.lookup(\"ScError\"),\n      u32: xdr.lookup(\"Uint32\"),\n      i32: xdr.lookup(\"Int32\"),\n      u64: xdr.lookup(\"Uint64\"),\n      i64: xdr.lookup(\"Int64\"),\n      timepoint: xdr.lookup(\"TimePoint\"),\n      duration: xdr.lookup(\"Duration\"),\n      u128: xdr.lookup(\"UInt128Parts\"),\n      i128: xdr.lookup(\"Int128Parts\"),\n      u256: xdr.lookup(\"UInt256Parts\"),\n      i256: xdr.lookup(\"Int256Parts\"),\n      bytes: xdr.lookup(\"ScBytes\"),\n      str: xdr.lookup(\"ScString\"),\n      sym: xdr.lookup(\"ScSymbol\"),\n      vec: xdr.option(xdr.lookup(\"ScVec\")),\n      map: xdr.option(xdr.lookup(\"ScMap\")),\n      address: xdr.lookup(\"ScAddress\"),\n      nonceKey: xdr.lookup(\"ScNonceKey\"),\n      instance: xdr.lookup(\"ScContractInstance\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCMapEntry\n  //   {\n  //       SCVal key;\n  //       SCVal val;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScMapEntry\", [[\"key\", xdr.lookup(\"ScVal\")], [\"val\", xdr.lookup(\"ScVal\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCEnvMetaKind\n  //   {\n  //       SC_ENV_META_KIND_INTERFACE_VERSION = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScEnvMetaKind\", {\n    scEnvMetaKindInterfaceVersion: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct {\n  //           uint32 protocol;\n  //           uint32 preRelease;\n  //       }\n  //\n  // ===========================================================================\n  xdr.struct(\"ScEnvMetaEntryInterfaceVersion\", [[\"protocol\", xdr.lookup(\"Uint32\")], [\"preRelease\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SCEnvMetaEntry switch (SCEnvMetaKind kind)\n  //   {\n  //   case SC_ENV_META_KIND_INTERFACE_VERSION:\n  //       struct {\n  //           uint32 protocol;\n  //           uint32 preRelease;\n  //       } interfaceVersion;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScEnvMetaEntry\", {\n    switchOn: xdr.lookup(\"ScEnvMetaKind\"),\n    switchName: \"kind\",\n    switches: [[\"scEnvMetaKindInterfaceVersion\", \"interfaceVersion\"]],\n    arms: {\n      interfaceVersion: xdr.lookup(\"ScEnvMetaEntryInterfaceVersion\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCMetaV0\n  //   {\n  //       string key<>;\n  //       string val<>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScMetaV0\", [[\"key\", xdr.string()], [\"val\", xdr.string()]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCMetaKind\n  //   {\n  //       SC_META_V0 = 0\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScMetaKind\", {\n    scMetaV0: 0\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SCMetaEntry switch (SCMetaKind kind)\n  //   {\n  //   case SC_META_V0:\n  //       SCMetaV0 v0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScMetaEntry\", {\n    switchOn: xdr.lookup(\"ScMetaKind\"),\n    switchName: \"kind\",\n    switches: [[\"scMetaV0\", \"v0\"]],\n    arms: {\n      v0: xdr.lookup(\"ScMetaV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   const SC_SPEC_DOC_LIMIT = 1024;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"SC_SPEC_DOC_LIMIT\", 1024);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCSpecType\n  //   {\n  //       SC_SPEC_TYPE_VAL = 0,\n  //\n  //       // Types with no parameters.\n  //       SC_SPEC_TYPE_BOOL = 1,\n  //       SC_SPEC_TYPE_VOID = 2,\n  //       SC_SPEC_TYPE_ERROR = 3,\n  //       SC_SPEC_TYPE_U32 = 4,\n  //       SC_SPEC_TYPE_I32 = 5,\n  //       SC_SPEC_TYPE_U64 = 6,\n  //       SC_SPEC_TYPE_I64 = 7,\n  //       SC_SPEC_TYPE_TIMEPOINT = 8,\n  //       SC_SPEC_TYPE_DURATION = 9,\n  //       SC_SPEC_TYPE_U128 = 10,\n  //       SC_SPEC_TYPE_I128 = 11,\n  //       SC_SPEC_TYPE_U256 = 12,\n  //       SC_SPEC_TYPE_I256 = 13,\n  //       SC_SPEC_TYPE_BYTES = 14,\n  //       SC_SPEC_TYPE_STRING = 16,\n  //       SC_SPEC_TYPE_SYMBOL = 17,\n  //       SC_SPEC_TYPE_ADDRESS = 19,\n  //\n  //       // Types with parameters.\n  //       SC_SPEC_TYPE_OPTION = 1000,\n  //       SC_SPEC_TYPE_RESULT = 1001,\n  //       SC_SPEC_TYPE_VEC = 1002,\n  //       SC_SPEC_TYPE_MAP = 1004,\n  //       SC_SPEC_TYPE_TUPLE = 1005,\n  //       SC_SPEC_TYPE_BYTES_N = 1006,\n  //\n  //       // User defined types.\n  //       SC_SPEC_TYPE_UDT = 2000\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScSpecType\", {\n    scSpecTypeVal: 0,\n    scSpecTypeBool: 1,\n    scSpecTypeVoid: 2,\n    scSpecTypeError: 3,\n    scSpecTypeU32: 4,\n    scSpecTypeI32: 5,\n    scSpecTypeU64: 6,\n    scSpecTypeI64: 7,\n    scSpecTypeTimepoint: 8,\n    scSpecTypeDuration: 9,\n    scSpecTypeU128: 10,\n    scSpecTypeI128: 11,\n    scSpecTypeU256: 12,\n    scSpecTypeI256: 13,\n    scSpecTypeBytes: 14,\n    scSpecTypeString: 16,\n    scSpecTypeSymbol: 17,\n    scSpecTypeAddress: 19,\n    scSpecTypeOption: 1000,\n    scSpecTypeResult: 1001,\n    scSpecTypeVec: 1002,\n    scSpecTypeMap: 1004,\n    scSpecTypeTuple: 1005,\n    scSpecTypeBytesN: 1006,\n    scSpecTypeUdt: 2000\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeOption\n  //   {\n  //       SCSpecTypeDef valueType;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeOption\", [[\"valueType\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeResult\n  //   {\n  //       SCSpecTypeDef okType;\n  //       SCSpecTypeDef errorType;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeResult\", [[\"okType\", xdr.lookup(\"ScSpecTypeDef\")], [\"errorType\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeVec\n  //   {\n  //       SCSpecTypeDef elementType;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeVec\", [[\"elementType\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeMap\n  //   {\n  //       SCSpecTypeDef keyType;\n  //       SCSpecTypeDef valueType;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeMap\", [[\"keyType\", xdr.lookup(\"ScSpecTypeDef\")], [\"valueType\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeTuple\n  //   {\n  //       SCSpecTypeDef valueTypes<12>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeTuple\", [[\"valueTypes\", xdr.varArray(xdr.lookup(\"ScSpecTypeDef\"), 12)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeBytesN\n  //   {\n  //       uint32 n;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeBytesN\", [[\"n\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecTypeUDT\n  //   {\n  //       string name<60>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecTypeUdt\", [[\"name\", xdr.string(60)]]);\n\n  // === xdr source ============================================================\n  //\n  //   union SCSpecTypeDef switch (SCSpecType type)\n  //   {\n  //   case SC_SPEC_TYPE_VAL:\n  //   case SC_SPEC_TYPE_BOOL:\n  //   case SC_SPEC_TYPE_VOID:\n  //   case SC_SPEC_TYPE_ERROR:\n  //   case SC_SPEC_TYPE_U32:\n  //   case SC_SPEC_TYPE_I32:\n  //   case SC_SPEC_TYPE_U64:\n  //   case SC_SPEC_TYPE_I64:\n  //   case SC_SPEC_TYPE_TIMEPOINT:\n  //   case SC_SPEC_TYPE_DURATION:\n  //   case SC_SPEC_TYPE_U128:\n  //   case SC_SPEC_TYPE_I128:\n  //   case SC_SPEC_TYPE_U256:\n  //   case SC_SPEC_TYPE_I256:\n  //   case SC_SPEC_TYPE_BYTES:\n  //   case SC_SPEC_TYPE_STRING:\n  //   case SC_SPEC_TYPE_SYMBOL:\n  //   case SC_SPEC_TYPE_ADDRESS:\n  //       void;\n  //   case SC_SPEC_TYPE_OPTION:\n  //       SCSpecTypeOption option;\n  //   case SC_SPEC_TYPE_RESULT:\n  //       SCSpecTypeResult result;\n  //   case SC_SPEC_TYPE_VEC:\n  //       SCSpecTypeVec vec;\n  //   case SC_SPEC_TYPE_MAP:\n  //       SCSpecTypeMap map;\n  //   case SC_SPEC_TYPE_TUPLE:\n  //       SCSpecTypeTuple tuple;\n  //   case SC_SPEC_TYPE_BYTES_N:\n  //       SCSpecTypeBytesN bytesN;\n  //   case SC_SPEC_TYPE_UDT:\n  //       SCSpecTypeUDT udt;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScSpecTypeDef\", {\n    switchOn: xdr.lookup(\"ScSpecType\"),\n    switchName: \"type\",\n    switches: [[\"scSpecTypeVal\", xdr[\"void\"]()], [\"scSpecTypeBool\", xdr[\"void\"]()], [\"scSpecTypeVoid\", xdr[\"void\"]()], [\"scSpecTypeError\", xdr[\"void\"]()], [\"scSpecTypeU32\", xdr[\"void\"]()], [\"scSpecTypeI32\", xdr[\"void\"]()], [\"scSpecTypeU64\", xdr[\"void\"]()], [\"scSpecTypeI64\", xdr[\"void\"]()], [\"scSpecTypeTimepoint\", xdr[\"void\"]()], [\"scSpecTypeDuration\", xdr[\"void\"]()], [\"scSpecTypeU128\", xdr[\"void\"]()], [\"scSpecTypeI128\", xdr[\"void\"]()], [\"scSpecTypeU256\", xdr[\"void\"]()], [\"scSpecTypeI256\", xdr[\"void\"]()], [\"scSpecTypeBytes\", xdr[\"void\"]()], [\"scSpecTypeString\", xdr[\"void\"]()], [\"scSpecTypeSymbol\", xdr[\"void\"]()], [\"scSpecTypeAddress\", xdr[\"void\"]()], [\"scSpecTypeOption\", \"option\"], [\"scSpecTypeResult\", \"result\"], [\"scSpecTypeVec\", \"vec\"], [\"scSpecTypeMap\", \"map\"], [\"scSpecTypeTuple\", \"tuple\"], [\"scSpecTypeBytesN\", \"bytesN\"], [\"scSpecTypeUdt\", \"udt\"]],\n    arms: {\n      option: xdr.lookup(\"ScSpecTypeOption\"),\n      result: xdr.lookup(\"ScSpecTypeResult\"),\n      vec: xdr.lookup(\"ScSpecTypeVec\"),\n      map: xdr.lookup(\"ScSpecTypeMap\"),\n      tuple: xdr.lookup(\"ScSpecTypeTuple\"),\n      bytesN: xdr.lookup(\"ScSpecTypeBytesN\"),\n      udt: xdr.lookup(\"ScSpecTypeUdt\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTStructFieldV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<30>;\n  //       SCSpecTypeDef type;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtStructFieldV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(30)], [\"type\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTStructV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string lib<80>;\n  //       string name<60>;\n  //       SCSpecUDTStructFieldV0 fields<40>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtStructV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"lib\", xdr.string(80)], [\"name\", xdr.string(60)], [\"fields\", xdr.varArray(xdr.lookup(\"ScSpecUdtStructFieldV0\"), 40)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTUnionCaseVoidV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<60>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtUnionCaseVoidV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(60)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTUnionCaseTupleV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<60>;\n  //       SCSpecTypeDef type<12>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtUnionCaseTupleV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(60)], [\"type\", xdr.varArray(xdr.lookup(\"ScSpecTypeDef\"), 12)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCSpecUDTUnionCaseV0Kind\n  //   {\n  //       SC_SPEC_UDT_UNION_CASE_VOID_V0 = 0,\n  //       SC_SPEC_UDT_UNION_CASE_TUPLE_V0 = 1\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScSpecUdtUnionCaseV0Kind\", {\n    scSpecUdtUnionCaseVoidV0: 0,\n    scSpecUdtUnionCaseTupleV0: 1\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SCSpecUDTUnionCaseV0 switch (SCSpecUDTUnionCaseV0Kind kind)\n  //   {\n  //   case SC_SPEC_UDT_UNION_CASE_VOID_V0:\n  //       SCSpecUDTUnionCaseVoidV0 voidCase;\n  //   case SC_SPEC_UDT_UNION_CASE_TUPLE_V0:\n  //       SCSpecUDTUnionCaseTupleV0 tupleCase;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScSpecUdtUnionCaseV0\", {\n    switchOn: xdr.lookup(\"ScSpecUdtUnionCaseV0Kind\"),\n    switchName: \"kind\",\n    switches: [[\"scSpecUdtUnionCaseVoidV0\", \"voidCase\"], [\"scSpecUdtUnionCaseTupleV0\", \"tupleCase\"]],\n    arms: {\n      voidCase: xdr.lookup(\"ScSpecUdtUnionCaseVoidV0\"),\n      tupleCase: xdr.lookup(\"ScSpecUdtUnionCaseTupleV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTUnionV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string lib<80>;\n  //       string name<60>;\n  //       SCSpecUDTUnionCaseV0 cases<50>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtUnionV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"lib\", xdr.string(80)], [\"name\", xdr.string(60)], [\"cases\", xdr.varArray(xdr.lookup(\"ScSpecUdtUnionCaseV0\"), 50)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTEnumCaseV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<60>;\n  //       uint32 value;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtEnumCaseV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(60)], [\"value\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTEnumV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string lib<80>;\n  //       string name<60>;\n  //       SCSpecUDTEnumCaseV0 cases<50>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtEnumV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"lib\", xdr.string(80)], [\"name\", xdr.string(60)], [\"cases\", xdr.varArray(xdr.lookup(\"ScSpecUdtEnumCaseV0\"), 50)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTErrorEnumCaseV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<60>;\n  //       uint32 value;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtErrorEnumCaseV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(60)], [\"value\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecUDTErrorEnumV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string lib<80>;\n  //       string name<60>;\n  //       SCSpecUDTErrorEnumCaseV0 cases<50>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecUdtErrorEnumV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"lib\", xdr.string(80)], [\"name\", xdr.string(60)], [\"cases\", xdr.varArray(xdr.lookup(\"ScSpecUdtErrorEnumCaseV0\"), 50)]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecFunctionInputV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       string name<30>;\n  //       SCSpecTypeDef type;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecFunctionInputV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.string(30)], [\"type\", xdr.lookup(\"ScSpecTypeDef\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct SCSpecFunctionV0\n  //   {\n  //       string doc<SC_SPEC_DOC_LIMIT>;\n  //       SCSymbol name;\n  //       SCSpecFunctionInputV0 inputs<10>;\n  //       SCSpecTypeDef outputs<1>;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ScSpecFunctionV0\", [[\"doc\", xdr.string(SC_SPEC_DOC_LIMIT)], [\"name\", xdr.lookup(\"ScSymbol\")], [\"inputs\", xdr.varArray(xdr.lookup(\"ScSpecFunctionInputV0\"), 10)], [\"outputs\", xdr.varArray(xdr.lookup(\"ScSpecTypeDef\"), 1)]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum SCSpecEntryKind\n  //   {\n  //       SC_SPEC_ENTRY_FUNCTION_V0 = 0,\n  //       SC_SPEC_ENTRY_UDT_STRUCT_V0 = 1,\n  //       SC_SPEC_ENTRY_UDT_UNION_V0 = 2,\n  //       SC_SPEC_ENTRY_UDT_ENUM_V0 = 3,\n  //       SC_SPEC_ENTRY_UDT_ERROR_ENUM_V0 = 4\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ScSpecEntryKind\", {\n    scSpecEntryFunctionV0: 0,\n    scSpecEntryUdtStructV0: 1,\n    scSpecEntryUdtUnionV0: 2,\n    scSpecEntryUdtEnumV0: 3,\n    scSpecEntryUdtErrorEnumV0: 4\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union SCSpecEntry switch (SCSpecEntryKind kind)\n  //   {\n  //   case SC_SPEC_ENTRY_FUNCTION_V0:\n  //       SCSpecFunctionV0 functionV0;\n  //   case SC_SPEC_ENTRY_UDT_STRUCT_V0:\n  //       SCSpecUDTStructV0 udtStructV0;\n  //   case SC_SPEC_ENTRY_UDT_UNION_V0:\n  //       SCSpecUDTUnionV0 udtUnionV0;\n  //   case SC_SPEC_ENTRY_UDT_ENUM_V0:\n  //       SCSpecUDTEnumV0 udtEnumV0;\n  //   case SC_SPEC_ENTRY_UDT_ERROR_ENUM_V0:\n  //       SCSpecUDTErrorEnumV0 udtErrorEnumV0;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ScSpecEntry\", {\n    switchOn: xdr.lookup(\"ScSpecEntryKind\"),\n    switchName: \"kind\",\n    switches: [[\"scSpecEntryFunctionV0\", \"functionV0\"], [\"scSpecEntryUdtStructV0\", \"udtStructV0\"], [\"scSpecEntryUdtUnionV0\", \"udtUnionV0\"], [\"scSpecEntryUdtEnumV0\", \"udtEnumV0\"], [\"scSpecEntryUdtErrorEnumV0\", \"udtErrorEnumV0\"]],\n    arms: {\n      functionV0: xdr.lookup(\"ScSpecFunctionV0\"),\n      udtStructV0: xdr.lookup(\"ScSpecUdtStructV0\"),\n      udtUnionV0: xdr.lookup(\"ScSpecUdtUnionV0\"),\n      udtEnumV0: xdr.lookup(\"ScSpecUdtEnumV0\"),\n      udtErrorEnumV0: xdr.lookup(\"ScSpecUdtErrorEnumV0\")\n    }\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractExecutionLanesV0\n  //   {\n  //       // maximum number of Soroban transactions per ledger\n  //       uint32 ledgerMaxTxCount;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractExecutionLanesV0\", [[\"ledgerMaxTxCount\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractComputeV0\n  //   {\n  //       // Maximum instructions per ledger\n  //       int64 ledgerMaxInstructions;\n  //       // Maximum instructions per transaction\n  //       int64 txMaxInstructions;\n  //       // Cost of 10000 instructions\n  //       int64 feeRatePerInstructionsIncrement;\n  //\n  //       // Memory limit per transaction. Unlike instructions, there is no fee\n  //       // for memory, just the limit.\n  //       uint32 txMemoryLimit;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractComputeV0\", [[\"ledgerMaxInstructions\", xdr.lookup(\"Int64\")], [\"txMaxInstructions\", xdr.lookup(\"Int64\")], [\"feeRatePerInstructionsIncrement\", xdr.lookup(\"Int64\")], [\"txMemoryLimit\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractLedgerCostV0\n  //   {\n  //       // Maximum number of ledger entry read operations per ledger\n  //       uint32 ledgerMaxReadLedgerEntries;\n  //       // Maximum number of bytes that can be read per ledger\n  //       uint32 ledgerMaxReadBytes;\n  //       // Maximum number of ledger entry write operations per ledger\n  //       uint32 ledgerMaxWriteLedgerEntries;\n  //       // Maximum number of bytes that can be written per ledger\n  //       uint32 ledgerMaxWriteBytes;\n  //\n  //       // Maximum number of ledger entry read operations per transaction\n  //       uint32 txMaxReadLedgerEntries;\n  //       // Maximum number of bytes that can be read per transaction\n  //       uint32 txMaxReadBytes;\n  //       // Maximum number of ledger entry write operations per transaction\n  //       uint32 txMaxWriteLedgerEntries;\n  //       // Maximum number of bytes that can be written per transaction\n  //       uint32 txMaxWriteBytes;\n  //\n  //       int64 feeReadLedgerEntry;  // Fee per ledger entry read\n  //       int64 feeWriteLedgerEntry; // Fee per ledger entry write\n  //\n  //       int64 feeRead1KB;  // Fee for reading 1KB\n  //\n  //       // The following parameters determine the write fee per 1KB.\n  //       // Write fee grows linearly until bucket list reaches this size\n  //       int64 bucketListTargetSizeBytes;\n  //       // Fee per 1KB write when the bucket list is empty\n  //       int64 writeFee1KBBucketListLow;\n  //       // Fee per 1KB write when the bucket list has reached `bucketListTargetSizeBytes`\n  //       int64 writeFee1KBBucketListHigh;\n  //       // Write fee multiplier for any additional data past the first `bucketListTargetSizeBytes`\n  //       uint32 bucketListWriteFeeGrowthFactor;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractLedgerCostV0\", [[\"ledgerMaxReadLedgerEntries\", xdr.lookup(\"Uint32\")], [\"ledgerMaxReadBytes\", xdr.lookup(\"Uint32\")], [\"ledgerMaxWriteLedgerEntries\", xdr.lookup(\"Uint32\")], [\"ledgerMaxWriteBytes\", xdr.lookup(\"Uint32\")], [\"txMaxReadLedgerEntries\", xdr.lookup(\"Uint32\")], [\"txMaxReadBytes\", xdr.lookup(\"Uint32\")], [\"txMaxWriteLedgerEntries\", xdr.lookup(\"Uint32\")], [\"txMaxWriteBytes\", xdr.lookup(\"Uint32\")], [\"feeReadLedgerEntry\", xdr.lookup(\"Int64\")], [\"feeWriteLedgerEntry\", xdr.lookup(\"Int64\")], [\"feeRead1Kb\", xdr.lookup(\"Int64\")], [\"bucketListTargetSizeBytes\", xdr.lookup(\"Int64\")], [\"writeFee1KbBucketListLow\", xdr.lookup(\"Int64\")], [\"writeFee1KbBucketListHigh\", xdr.lookup(\"Int64\")], [\"bucketListWriteFeeGrowthFactor\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractHistoricalDataV0\n  //   {\n  //       int64 feeHistorical1KB; // Fee for storing 1KB in archives\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractHistoricalDataV0\", [[\"feeHistorical1Kb\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractEventsV0\n  //   {\n  //       // Maximum size of events that a contract call can emit.\n  //       uint32 txMaxContractEventsSizeBytes;\n  //       // Fee for generating 1KB of contract events.\n  //       int64 feeContractEvents1KB;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractEventsV0\", [[\"txMaxContractEventsSizeBytes\", xdr.lookup(\"Uint32\")], [\"feeContractEvents1Kb\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct ConfigSettingContractBandwidthV0\n  //   {\n  //       // Maximum sum of all transaction sizes in the ledger in bytes\n  //       uint32 ledgerMaxTxsSizeBytes;\n  //       // Maximum size in bytes for a transaction\n  //       uint32 txMaxSizeBytes;\n  //\n  //       // Fee for 1 KB of transaction size\n  //       int64 feeTxSize1KB;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ConfigSettingContractBandwidthV0\", [[\"ledgerMaxTxsSizeBytes\", xdr.lookup(\"Uint32\")], [\"txMaxSizeBytes\", xdr.lookup(\"Uint32\")], [\"feeTxSize1Kb\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   enum ContractCostType {\n  //       // Cost of running 1 wasm instruction\n  //       WasmInsnExec = 0,\n  //       // Cost of allocating a slice of memory (in bytes)\n  //       MemAlloc = 1,\n  //       // Cost of copying a slice of bytes into a pre-allocated memory\n  //       MemCpy = 2,\n  //       // Cost of comparing two slices of memory\n  //       MemCmp = 3,\n  //       // Cost of a host function dispatch, not including the actual work done by\n  //       // the function nor the cost of VM invocation machinary\n  //       DispatchHostFunction = 4,\n  //       // Cost of visiting a host object from the host object storage. Exists to\n  //       // make sure some baseline cost coverage, i.e. repeatly visiting objects\n  //       // by the guest will always incur some charges.\n  //       VisitObject = 5,\n  //       // Cost of serializing an xdr object to bytes\n  //       ValSer = 6,\n  //       // Cost of deserializing an xdr object from bytes\n  //       ValDeser = 7,\n  //       // Cost of computing the sha256 hash from bytes\n  //       ComputeSha256Hash = 8,\n  //       // Cost of computing the ed25519 pubkey from bytes\n  //       ComputeEd25519PubKey = 9,\n  //       // Cost of verifying ed25519 signature of a payload.\n  //       VerifyEd25519Sig = 10,\n  //       // Cost of instantiation a VM from wasm bytes code.\n  //       VmInstantiation = 11,\n  //       // Cost of instantiation a VM from a cached state.\n  //       VmCachedInstantiation = 12,\n  //       // Cost of invoking a function on the VM. If the function is a host function,\n  //       // additional cost will be covered by `DispatchHostFunction`.\n  //       InvokeVmFunction = 13,\n  //       // Cost of computing a keccak256 hash from bytes.\n  //       ComputeKeccak256Hash = 14,\n  //       // Cost of decoding an ECDSA signature computed from a 256-bit prime modulus\n  //       // curve (e.g. secp256k1 and secp256r1)\n  //       DecodeEcdsaCurve256Sig = 15,\n  //       // Cost of recovering an ECDSA secp256k1 key from a signature.\n  //       RecoverEcdsaSecp256k1Key = 16,\n  //       // Cost of int256 addition (`+`) and subtraction (`-`) operations\n  //       Int256AddSub = 17,\n  //       // Cost of int256 multiplication (`*`) operation\n  //       Int256Mul = 18,\n  //       // Cost of int256 division (`/`) operation\n  //       Int256Div = 19,\n  //       // Cost of int256 power (`exp`) operation\n  //       Int256Pow = 20,\n  //       // Cost of int256 shift (`shl`, `shr`) operation\n  //       Int256Shift = 21,\n  //       // Cost of drawing random bytes using a ChaCha20 PRNG\n  //       ChaCha20DrawBytes = 22,\n  //\n  //       // Cost of parsing wasm bytes that only encode instructions.\n  //       ParseWasmInstructions = 23,\n  //       // Cost of parsing a known number of wasm functions.\n  //       ParseWasmFunctions = 24,\n  //       // Cost of parsing a known number of wasm globals.\n  //       ParseWasmGlobals = 25,\n  //       // Cost of parsing a known number of wasm table entries.\n  //       ParseWasmTableEntries = 26,\n  //       // Cost of parsing a known number of wasm types.\n  //       ParseWasmTypes = 27,\n  //       // Cost of parsing a known number of wasm data segments.\n  //       ParseWasmDataSegments = 28,\n  //       // Cost of parsing a known number of wasm element segments.\n  //       ParseWasmElemSegments = 29,\n  //       // Cost of parsing a known number of wasm imports.\n  //       ParseWasmImports = 30,\n  //       // Cost of parsing a known number of wasm exports.\n  //       ParseWasmExports = 31,\n  //       // Cost of parsing a known number of data segment bytes.\n  //       ParseWasmDataSegmentBytes = 32,\n  //\n  //       // Cost of instantiating wasm bytes that only encode instructions.\n  //       InstantiateWasmInstructions = 33,\n  //       // Cost of instantiating a known number of wasm functions.\n  //       InstantiateWasmFunctions = 34,\n  //       // Cost of instantiating a known number of wasm globals.\n  //       InstantiateWasmGlobals = 35,\n  //       // Cost of instantiating a known number of wasm table entries.\n  //       InstantiateWasmTableEntries = 36,\n  //       // Cost of instantiating a known number of wasm types.\n  //       InstantiateWasmTypes = 37,\n  //       // Cost of instantiating a known number of wasm data segments.\n  //       InstantiateWasmDataSegments = 38,\n  //       // Cost of instantiating a known number of wasm element segments.\n  //       InstantiateWasmElemSegments = 39,\n  //       // Cost of instantiating a known number of wasm imports.\n  //       InstantiateWasmImports = 40,\n  //       // Cost of instantiating a known number of wasm exports.\n  //       InstantiateWasmExports = 41,\n  //       // Cost of instantiating a known number of data segment bytes.\n  //       InstantiateWasmDataSegmentBytes = 42,\n  //\n  //       // Cost of decoding a bytes array representing an uncompressed SEC-1 encoded\n  //       // point on a 256-bit elliptic curve\n  //       Sec1DecodePointUncompressed = 43,\n  //       // Cost of verifying an ECDSA Secp256r1 signature\n  //       VerifyEcdsaSecp256r1Sig = 44,\n  //\n  //       // Cost of encoding a BLS12-381 Fp (base field element)\n  //       Bls12381EncodeFp = 45,\n  //       // Cost of decoding a BLS12-381 Fp (base field element)\n  //       Bls12381DecodeFp = 46,\n  //       // Cost of checking a G1 point lies on the curve\n  //       Bls12381G1CheckPointOnCurve = 47,\n  //       // Cost of checking a G1 point belongs to the correct subgroup\n  //       Bls12381G1CheckPointInSubgroup = 48,\n  //       // Cost of checking a G2 point lies on the curve\n  //       Bls12381G2CheckPointOnCurve = 49,\n  //       // Cost of checking a G2 point belongs to the correct subgroup\n  //       Bls12381G2CheckPointInSubgroup = 50,\n  //       // Cost of converting a BLS12-381 G1 point from projective to affine coordinates\n  //       Bls12381G1ProjectiveToAffine = 51,\n  //       // Cost of converting a BLS12-381 G2 point from projective to affine coordinates\n  //       Bls12381G2ProjectiveToAffine = 52,\n  //       // Cost of performing BLS12-381 G1 point addition\n  //       Bls12381G1Add = 53,\n  //       // Cost of performing BLS12-381 G1 scalar multiplication\n  //       Bls12381G1Mul = 54,\n  //       // Cost of performing BLS12-381 G1 multi-scalar multiplication (MSM)\n  //       Bls12381G1Msm = 55,\n  //       // Cost of mapping a BLS12-381 Fp field element to a G1 point\n  //       Bls12381MapFpToG1 = 56,\n  //       // Cost of hashing to a BLS12-381 G1 point\n  //       Bls12381HashToG1 = 57,\n  //       // Cost of performing BLS12-381 G2 point addition\n  //       Bls12381G2Add = 58,\n  //       // Cost of performing BLS12-381 G2 scalar multiplication\n  //       Bls12381G2Mul = 59,\n  //       // Cost of performing BLS12-381 G2 multi-scalar multiplication (MSM)\n  //       Bls12381G2Msm = 60,\n  //       // Cost of mapping a BLS12-381 Fp2 field element to a G2 point\n  //       Bls12381MapFp2ToG2 = 61,\n  //       // Cost of hashing to a BLS12-381 G2 point\n  //       Bls12381HashToG2 = 62,\n  //       // Cost of performing BLS12-381 pairing operation\n  //       Bls12381Pairing = 63,\n  //       // Cost of converting a BLS12-381 scalar element from U256\n  //       Bls12381FrFromU256 = 64,\n  //       // Cost of converting a BLS12-381 scalar element to U256\n  //       Bls12381FrToU256 = 65,\n  //       // Cost of performing BLS12-381 scalar element addition/subtraction\n  //       Bls12381FrAddSub = 66,\n  //       // Cost of performing BLS12-381 scalar element multiplication\n  //       Bls12381FrMul = 67,\n  //       // Cost of performing BLS12-381 scalar element exponentiation\n  //       Bls12381FrPow = 68,\n  //       // Cost of performing BLS12-381 scalar element inversion\n  //       Bls12381FrInv = 69\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ContractCostType\", {\n    wasmInsnExec: 0,\n    memAlloc: 1,\n    memCpy: 2,\n    memCmp: 3,\n    dispatchHostFunction: 4,\n    visitObject: 5,\n    valSer: 6,\n    valDeser: 7,\n    computeSha256Hash: 8,\n    computeEd25519PubKey: 9,\n    verifyEd25519Sig: 10,\n    vmInstantiation: 11,\n    vmCachedInstantiation: 12,\n    invokeVmFunction: 13,\n    computeKeccak256Hash: 14,\n    decodeEcdsaCurve256Sig: 15,\n    recoverEcdsaSecp256k1Key: 16,\n    int256AddSub: 17,\n    int256Mul: 18,\n    int256Div: 19,\n    int256Pow: 20,\n    int256Shift: 21,\n    chaCha20DrawBytes: 22,\n    parseWasmInstructions: 23,\n    parseWasmFunctions: 24,\n    parseWasmGlobals: 25,\n    parseWasmTableEntries: 26,\n    parseWasmTypes: 27,\n    parseWasmDataSegments: 28,\n    parseWasmElemSegments: 29,\n    parseWasmImports: 30,\n    parseWasmExports: 31,\n    parseWasmDataSegmentBytes: 32,\n    instantiateWasmInstructions: 33,\n    instantiateWasmFunctions: 34,\n    instantiateWasmGlobals: 35,\n    instantiateWasmTableEntries: 36,\n    instantiateWasmTypes: 37,\n    instantiateWasmDataSegments: 38,\n    instantiateWasmElemSegments: 39,\n    instantiateWasmImports: 40,\n    instantiateWasmExports: 41,\n    instantiateWasmDataSegmentBytes: 42,\n    sec1DecodePointUncompressed: 43,\n    verifyEcdsaSecp256r1Sig: 44,\n    bls12381EncodeFp: 45,\n    bls12381DecodeFp: 46,\n    bls12381G1CheckPointOnCurve: 47,\n    bls12381G1CheckPointInSubgroup: 48,\n    bls12381G2CheckPointOnCurve: 49,\n    bls12381G2CheckPointInSubgroup: 50,\n    bls12381G1ProjectiveToAffine: 51,\n    bls12381G2ProjectiveToAffine: 52,\n    bls12381G1Add: 53,\n    bls12381G1Mul: 54,\n    bls12381G1Msm: 55,\n    bls12381MapFpToG1: 56,\n    bls12381HashToG1: 57,\n    bls12381G2Add: 58,\n    bls12381G2Mul: 59,\n    bls12381G2Msm: 60,\n    bls12381MapFp2ToG2: 61,\n    bls12381HashToG2: 62,\n    bls12381Pairing: 63,\n    bls12381FrFromU256: 64,\n    bls12381FrToU256: 65,\n    bls12381FrAddSub: 66,\n    bls12381FrMul: 67,\n    bls12381FrPow: 68,\n    bls12381FrInv: 69\n  });\n\n  // === xdr source ============================================================\n  //\n  //   struct ContractCostParamEntry {\n  //       // use `ext` to add more terms (e.g. higher order polynomials) in the future\n  //       ExtensionPoint ext;\n  //\n  //       int64 constTerm;\n  //       int64 linearTerm;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"ContractCostParamEntry\", [[\"ext\", xdr.lookup(\"ExtensionPoint\")], [\"constTerm\", xdr.lookup(\"Int64\")], [\"linearTerm\", xdr.lookup(\"Int64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct StateArchivalSettings {\n  //       uint32 maxEntryTTL;\n  //       uint32 minTemporaryTTL;\n  //       uint32 minPersistentTTL;\n  //\n  //       // rent_fee = wfee_rate_average / rent_rate_denominator_for_type\n  //       int64 persistentRentRateDenominator;\n  //       int64 tempRentRateDenominator;\n  //\n  //       // max number of entries that emit archival meta in a single ledger\n  //       uint32 maxEntriesToArchive;\n  //\n  //       // Number of snapshots to use when calculating average BucketList size\n  //       uint32 bucketListSizeWindowSampleSize;\n  //\n  //       // How often to sample the BucketList size for the average, in ledgers\n  //       uint32 bucketListWindowSamplePeriod;\n  //\n  //       // Maximum number of bytes that we scan for eviction per ledger\n  //       uint32 evictionScanSize;\n  //\n  //       // Lowest BucketList level to be scanned to evict entries\n  //       uint32 startingEvictionScanLevel;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"StateArchivalSettings\", [[\"maxEntryTtl\", xdr.lookup(\"Uint32\")], [\"minTemporaryTtl\", xdr.lookup(\"Uint32\")], [\"minPersistentTtl\", xdr.lookup(\"Uint32\")], [\"persistentRentRateDenominator\", xdr.lookup(\"Int64\")], [\"tempRentRateDenominator\", xdr.lookup(\"Int64\")], [\"maxEntriesToArchive\", xdr.lookup(\"Uint32\")], [\"bucketListSizeWindowSampleSize\", xdr.lookup(\"Uint32\")], [\"bucketListWindowSamplePeriod\", xdr.lookup(\"Uint32\")], [\"evictionScanSize\", xdr.lookup(\"Uint32\")], [\"startingEvictionScanLevel\", xdr.lookup(\"Uint32\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   struct EvictionIterator {\n  //       uint32 bucketListLevel;\n  //       bool isCurrBucket;\n  //       uint64 bucketFileOffset;\n  //   };\n  //\n  // ===========================================================================\n  xdr.struct(\"EvictionIterator\", [[\"bucketListLevel\", xdr.lookup(\"Uint32\")], [\"isCurrBucket\", xdr.bool()], [\"bucketFileOffset\", xdr.lookup(\"Uint64\")]]);\n\n  // === xdr source ============================================================\n  //\n  //   const CONTRACT_COST_COUNT_LIMIT = 1024;\n  //\n  // ===========================================================================\n  xdr[\"const\"](\"CONTRACT_COST_COUNT_LIMIT\", 1024);\n\n  // === xdr source ============================================================\n  //\n  //   typedef ContractCostParamEntry ContractCostParams<CONTRACT_COST_COUNT_LIMIT>;\n  //\n  // ===========================================================================\n  xdr.typedef(\"ContractCostParams\", xdr.varArray(xdr.lookup(\"ContractCostParamEntry\"), xdr.lookup(\"CONTRACT_COST_COUNT_LIMIT\")));\n\n  // === xdr source ============================================================\n  //\n  //   enum ConfigSettingID\n  //   {\n  //       CONFIG_SETTING_CONTRACT_MAX_SIZE_BYTES = 0,\n  //       CONFIG_SETTING_CONTRACT_COMPUTE_V0 = 1,\n  //       CONFIG_SETTING_CONTRACT_LEDGER_COST_V0 = 2,\n  //       CONFIG_SETTING_CONTRACT_HISTORICAL_DATA_V0 = 3,\n  //       CONFIG_SETTING_CONTRACT_EVENTS_V0 = 4,\n  //       CONFIG_SETTING_CONTRACT_BANDWIDTH_V0 = 5,\n  //       CONFIG_SETTING_CONTRACT_COST_PARAMS_CPU_INSTRUCTIONS = 6,\n  //       CONFIG_SETTING_CONTRACT_COST_PARAMS_MEMORY_BYTES = 7,\n  //       CONFIG_SETTING_CONTRACT_DATA_KEY_SIZE_BYTES = 8,\n  //       CONFIG_SETTING_CONTRACT_DATA_ENTRY_SIZE_BYTES = 9,\n  //       CONFIG_SETTING_STATE_ARCHIVAL = 10,\n  //       CONFIG_SETTING_CONTRACT_EXECUTION_LANES = 11,\n  //       CONFIG_SETTING_BUCKETLIST_SIZE_WINDOW = 12,\n  //       CONFIG_SETTING_EVICTION_ITERATOR = 13\n  //   };\n  //\n  // ===========================================================================\n  xdr[\"enum\"](\"ConfigSettingId\", {\n    configSettingContractMaxSizeBytes: 0,\n    configSettingContractComputeV0: 1,\n    configSettingContractLedgerCostV0: 2,\n    configSettingContractHistoricalDataV0: 3,\n    configSettingContractEventsV0: 4,\n    configSettingContractBandwidthV0: 5,\n    configSettingContractCostParamsCpuInstructions: 6,\n    configSettingContractCostParamsMemoryBytes: 7,\n    configSettingContractDataKeySizeBytes: 8,\n    configSettingContractDataEntrySizeBytes: 9,\n    configSettingStateArchival: 10,\n    configSettingContractExecutionLanes: 11,\n    configSettingBucketlistSizeWindow: 12,\n    configSettingEvictionIterator: 13\n  });\n\n  // === xdr source ============================================================\n  //\n  //   union ConfigSettingEntry switch (ConfigSettingID configSettingID)\n  //   {\n  //   case CONFIG_SETTING_CONTRACT_MAX_SIZE_BYTES:\n  //       uint32 contractMaxSizeBytes;\n  //   case CONFIG_SETTING_CONTRACT_COMPUTE_V0:\n  //       ConfigSettingContractComputeV0 contractCompute;\n  //   case CONFIG_SETTING_CONTRACT_LEDGER_COST_V0:\n  //       ConfigSettingContractLedgerCostV0 contractLedgerCost;\n  //   case CONFIG_SETTING_CONTRACT_HISTORICAL_DATA_V0:\n  //       ConfigSettingContractHistoricalDataV0 contractHistoricalData;\n  //   case CONFIG_SETTING_CONTRACT_EVENTS_V0:\n  //       ConfigSettingContractEventsV0 contractEvents;\n  //   case CONFIG_SETTING_CONTRACT_BANDWIDTH_V0:\n  //       ConfigSettingContractBandwidthV0 contractBandwidth;\n  //   case CONFIG_SETTING_CONTRACT_COST_PARAMS_CPU_INSTRUCTIONS:\n  //       ContractCostParams contractCostParamsCpuInsns;\n  //   case CONFIG_SETTING_CONTRACT_COST_PARAMS_MEMORY_BYTES:\n  //       ContractCostParams contractCostParamsMemBytes;\n  //   case CONFIG_SETTING_CONTRACT_DATA_KEY_SIZE_BYTES:\n  //       uint32 contractDataKeySizeBytes;\n  //   case CONFIG_SETTING_CONTRACT_DATA_ENTRY_SIZE_BYTES:\n  //       uint32 contractDataEntrySizeBytes;\n  //   case CONFIG_SETTING_STATE_ARCHIVAL:\n  //       StateArchivalSettings stateArchivalSettings;\n  //   case CONFIG_SETTING_CONTRACT_EXECUTION_LANES:\n  //       ConfigSettingContractExecutionLanesV0 contractExecutionLanes;\n  //   case CONFIG_SETTING_BUCKETLIST_SIZE_WINDOW:\n  //       uint64 bucketListSizeWindow<>;\n  //   case CONFIG_SETTING_EVICTION_ITERATOR:\n  //       EvictionIterator evictionIterator;\n  //   };\n  //\n  // ===========================================================================\n  xdr.union(\"ConfigSettingEntry\", {\n    switchOn: xdr.lookup(\"ConfigSettingId\"),\n    switchName: \"configSettingId\",\n    switches: [[\"configSettingContractMaxSizeBytes\", \"contractMaxSizeBytes\"], [\"configSettingContractComputeV0\", \"contractCompute\"], [\"configSettingContractLedgerCostV0\", \"contractLedgerCost\"], [\"configSettingContractHistoricalDataV0\", \"contractHistoricalData\"], [\"configSettingContractEventsV0\", \"contractEvents\"], [\"configSettingContractBandwidthV0\", \"contractBandwidth\"], [\"configSettingContractCostParamsCpuInstructions\", \"contractCostParamsCpuInsns\"], [\"configSettingContractCostParamsMemoryBytes\", \"contractCostParamsMemBytes\"], [\"configSettingContractDataKeySizeBytes\", \"contractDataKeySizeBytes\"], [\"configSettingContractDataEntrySizeBytes\", \"contractDataEntrySizeBytes\"], [\"configSettingStateArchival\", \"stateArchivalSettings\"], [\"configSettingContractExecutionLanes\", \"contractExecutionLanes\"], [\"configSettingBucketlistSizeWindow\", \"bucketListSizeWindow\"], [\"configSettingEvictionIterator\", \"evictionIterator\"]],\n    arms: {\n      contractMaxSizeBytes: xdr.lookup(\"Uint32\"),\n      contractCompute: xdr.lookup(\"ConfigSettingContractComputeV0\"),\n      contractLedgerCost: xdr.lookup(\"ConfigSettingContractLedgerCostV0\"),\n      contractHistoricalData: xdr.lookup(\"ConfigSettingContractHistoricalDataV0\"),\n      contractEvents: xdr.lookup(\"ConfigSettingContractEventsV0\"),\n      contractBandwidth: xdr.lookup(\"ConfigSettingContractBandwidthV0\"),\n      contractCostParamsCpuInsns: xdr.lookup(\"ContractCostParams\"),\n      contractCostParamsMemBytes: xdr.lookup(\"ContractCostParams\"),\n      contractDataKeySizeBytes: xdr.lookup(\"Uint32\"),\n      contractDataEntrySizeBytes: xdr.lookup(\"Uint32\"),\n      stateArchivalSettings: xdr.lookup(\"StateArchivalSettings\"),\n      contractExecutionLanes: xdr.lookup(\"ConfigSettingContractExecutionLanesV0\"),\n      bucketListSizeWindow: xdr.varArray(xdr.lookup(\"Uint64\"), 2147483647),\n      evictionIterator: xdr.lookup(\"EvictionIterator\")\n    }\n  });\n});\nvar _default = exports[\"default\"] = types;"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14030, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/xdr.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _curr_generated = _interopRequireDefault(require(\"./generated/curr_generated\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nvar _default = exports[\"default\"] = _curr_generated[\"default\"];"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,OAAO,CAAC,UAAU,GAAG,KAAK;AAC1B,IAAI,kBAAkB;AACtB,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF,IAAI,WAAW,OAAO,CAAC,UAAU,GAAG,eAAe,CAAC,UAAU","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14047, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/jsxdr.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _jsXdr = require(\"@stellar/js-xdr\");\nvar cereal = {\n  XdrWriter: _jsXdr.XdrWriter,\n  XdrReader: _jsXdr.XdrReader\n};\nvar _default = exports[\"default\"] = cereal;"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,OAAO,CAAC,UAAU,GAAG,KAAK;AAC1B,IAAI;AACJ,IAAI,SAAS;IACX,WAAW,OAAO,SAAS;IAC3B,WAAW,OAAO,SAAS;AAC7B;AACA,IAAI,WAAW,OAAO,CAAC,UAAU,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14063, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/hashing.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hash = hash;\nvar _sha = require(\"sha.js\");\nfunction hash(data) {\n  var hasher = new _sha.sha256();\n  hasher.update(data, 'utf8');\n  return hasher.digest();\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,IAAI,GAAG;AACf,IAAI;AACJ,SAAS,KAAK,IAAI;IAChB,IAAI,SAAS,IAAI,KAAK,MAAM;IAC5B,OAAO,MAAM,CAAC,MAAM;IACpB,OAAO,OAAO,MAAM;AACtB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14079, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/signing.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FastSigning = void 0;\nexports.generate = generate;\nexports.sign = sign;\nexports.verify = verify;\n//  This module provides the signing functionality used by the stellar network\n//  The code below may look a little strange... this is because we try to provide\n//  the most efficient signing method possible.  First, we try to load the\n//  native `sodium-native` package for node.js environments, and if that fails we\n//  fallback to `tweetnacl`\n\nvar actualMethods = {};\n\n/**\n * Use this flag to check if fast signing (provided by `sodium-native` package) is available.\n * If your app is signing a large number of transaction or verifying a large number\n * of signatures make sure `sodium-native` package is installed.\n */\nvar FastSigning = exports.FastSigning = checkFastSigning();\nfunction sign(data, secretKey) {\n  return actualMethods.sign(data, secretKey);\n}\nfunction verify(data, signature, publicKey) {\n  return actualMethods.verify(data, signature, publicKey);\n}\nfunction generate(secretKey) {\n  return actualMethods.generate(secretKey);\n}\nfunction checkFastSigning() {\n  return typeof window === 'undefined' ? checkFastSigningNode() : checkFastSigningBrowser();\n}\nfunction checkFastSigningNode() {\n  // NOTE: we use commonjs style require here because es6 imports\n  // can only occur at the top level.  thanks, obama.\n  var sodium;\n  try {\n    // eslint-disable-next-line\n    sodium = require('sodium-native');\n  } catch (err) {\n    return checkFastSigningBrowser();\n  }\n  if (!Object.keys(sodium).length) {\n    return checkFastSigningBrowser();\n  }\n  actualMethods.generate = function (secretKey) {\n    var pk = Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);\n    var sk = Buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES);\n    sodium.crypto_sign_seed_keypair(pk, sk, secretKey);\n    return pk;\n  };\n  actualMethods.sign = function (data, secretKey) {\n    data = Buffer.from(data);\n    var signature = Buffer.alloc(sodium.crypto_sign_BYTES);\n    sodium.crypto_sign_detached(signature, data, secretKey);\n    return signature;\n  };\n  actualMethods.verify = function (data, signature, publicKey) {\n    data = Buffer.from(data);\n    try {\n      return sodium.crypto_sign_verify_detached(signature, data, publicKey);\n    } catch (e) {\n      return false;\n    }\n  };\n  return true;\n}\nfunction checkFastSigningBrowser() {\n  // fallback to `tweetnacl` if we're in the browser or\n  // if there was a failure installing `sodium-native`\n  // eslint-disable-next-line\n  var nacl = require('tweetnacl');\n  actualMethods.generate = function (secretKey) {\n    var secretKeyUint8 = new Uint8Array(secretKey);\n    var naclKeys = nacl.sign.keyPair.fromSeed(secretKeyUint8);\n    return Buffer.from(naclKeys.publicKey);\n  };\n  actualMethods.sign = function (data, secretKey) {\n    data = Buffer.from(data);\n    data = new Uint8Array(data.toJSON().data);\n    secretKey = new Uint8Array(secretKey.toJSON().data);\n    var signature = nacl.sign.detached(data, secretKey);\n    return Buffer.from(signature);\n  };\n  actualMethods.verify = function (data, signature, publicKey) {\n    data = Buffer.from(data);\n    data = new Uint8Array(data.toJSON().data);\n    signature = new Uint8Array(signature.toJSON().data);\n    publicKey = new Uint8Array(publicKey.toJSON().data);\n    return nacl.sign.detached.verify(data, signature, publicKey);\n  };\n  return false;\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,WAAW,GAAG,KAAK;AAC3B,QAAQ,QAAQ,GAAG;AACnB,QAAQ,IAAI,GAAG;AACf,QAAQ,MAAM,GAAG;AACjB,8EAA8E;AAC9E,iFAAiF;AACjF,0EAA0E;AAC1E,iFAAiF;AACjF,2BAA2B;AAE3B,IAAI,gBAAgB,CAAC;AAErB;;;;CAIC,GACD,IAAI,cAAc,QAAQ,WAAW,GAAG;AACxC,SAAS,KAAK,IAAI,EAAE,SAAS;IAC3B,OAAO,cAAc,IAAI,CAAC,MAAM;AAClC;AACA,SAAS,OAAO,IAAI,EAAE,SAAS,EAAE,SAAS;IACxC,OAAO,cAAc,MAAM,CAAC,MAAM,WAAW;AAC/C;AACA,SAAS,SAAS,SAAS;IACzB,OAAO,cAAc,QAAQ,CAAC;AAChC;AACA,SAAS;IACP,OAAO,OAAO,WAAW,cAAc,yBAAyB;AAClE;AACA,SAAS;IACP,+DAA+D;IAC/D,mDAAmD;IACnD,IAAI;IACJ,IAAI;QACF,2BAA2B;QAC3B;IACF,EAAE,OAAO,KAAK;QACZ,OAAO;IACT;IACA,IAAI,CAAC,OAAO,IAAI,CAAC,QAAQ,MAAM,EAAE;QAC/B,OAAO;IACT;IACA,cAAc,QAAQ,GAAG,SAAU,SAAS;QAC1C,IAAI,KAAK,OAAO,KAAK,CAAC,OAAO,0BAA0B;QACvD,IAAI,KAAK,OAAO,KAAK,CAAC,OAAO,0BAA0B;QACvD,OAAO,wBAAwB,CAAC,IAAI,IAAI;QACxC,OAAO;IACT;IACA,cAAc,IAAI,GAAG,SAAU,IAAI,EAAE,SAAS;QAC5C,OAAO,OAAO,IAAI,CAAC;QACnB,IAAI,YAAY,OAAO,KAAK,CAAC,OAAO,iBAAiB;QACrD,OAAO,oBAAoB,CAAC,WAAW,MAAM;QAC7C,OAAO;IACT;IACA,cAAc,MAAM,GAAG,SAAU,IAAI,EAAE,SAAS,EAAE,SAAS;QACzD,OAAO,OAAO,IAAI,CAAC;QACnB,IAAI;YACF,OAAO,OAAO,2BAA2B,CAAC,WAAW,MAAM;QAC7D,EAAE,OAAO,GAAG;YACV,OAAO;QACT;IACF;IACA,OAAO;AACT;AACA,SAAS;IACP,qDAAqD;IACrD,oDAAoD;IACpD,2BAA2B;IAC3B,IAAI;IACJ,cAAc,QAAQ,GAAG,SAAU,SAAS;QAC1C,IAAI,iBAAiB,IAAI,WAAW;QACpC,IAAI,WAAW,KAAK,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QAC1C,OAAO,OAAO,IAAI,CAAC,SAAS,SAAS;IACvC;IACA,cAAc,IAAI,GAAG,SAAU,IAAI,EAAE,SAAS;QAC5C,OAAO,OAAO,IAAI,CAAC;QACnB,OAAO,IAAI,WAAW,KAAK,MAAM,GAAG,IAAI;QACxC,YAAY,IAAI,WAAW,UAAU,MAAM,GAAG,IAAI;QAClD,IAAI,YAAY,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM;QACzC,OAAO,OAAO,IAAI,CAAC;IACrB;IACA,cAAc,MAAM,GAAG,SAAU,IAAI,EAAE,SAAS,EAAE,SAAS;QACzD,OAAO,OAAO,IAAI,CAAC;QACnB,OAAO,IAAI,WAAW,KAAK,MAAM,GAAG,IAAI;QACxC,YAAY,IAAI,WAAW,UAAU,MAAM,GAAG,IAAI;QAClD,YAAY,IAAI,WAAW,UAAU,MAAM,GAAG,IAAI;QAClD,OAAO,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,WAAW;IACpD;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14176, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/util/util.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trimEnd = void 0;\nvar trimEnd = exports.trimEnd = function trimEnd(input, _char) {\n  var isNumber = typeof input === 'number';\n  var str = String(input);\n  while (str.endsWith(_char)) {\n    str = str.slice(0, -1);\n  }\n  return isNumber ? Number(str) : str;\n};"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,OAAO,GAAG,KAAK;AACvB,IAAI,UAAU,QAAQ,OAAO,GAAG,SAAS,QAAQ,KAAK,EAAE,KAAK;IAC3D,IAAI,WAAW,OAAO,UAAU;IAChC,IAAI,MAAM,OAAO;IACjB,MAAO,IAAI,QAAQ,CAAC,OAAQ;QAC1B,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC;IACtB;IACA,OAAO,WAAW,OAAO,OAAO;AAClC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14194, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/util/checksum.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifyChecksum = verifyChecksum;\nfunction verifyChecksum(expected, actual) {\n  if (expected.length !== actual.length) {\n    return false;\n  }\n  if (expected.length === 0) {\n    return true;\n  }\n  for (var i = 0; i < expected.length; i += 1) {\n    if (expected[i] !== actual[i]) {\n      return false;\n    }\n  }\n  return true;\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,cAAc,GAAG;AACzB,SAAS,eAAe,QAAQ,EAAE,MAAM;IACtC,IAAI,SAAS,MAAM,KAAK,OAAO,MAAM,EAAE;QACrC,OAAO;IACT;IACA,IAAI,SAAS,MAAM,KAAK,GAAG;QACzB,OAAO;IACT;IACA,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,KAAK,EAAG;QAC3C,IAAI,QAAQ,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,EAAE;YAC7B,OAAO;QACT;IACF;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14218, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/strkey.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StrKey = void 0;\nexports.decodeCheck = decodeCheck;\nexports.encodeCheck = encodeCheck;\nvar _base = _interopRequireDefault(require(\"base32.js\"));\nvar _checksum = require(\"./util/checksum\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); } /* eslint no-bitwise: [\"error\", {\"allow\": [\"<<\", \">>\", \"^\", \"&\", \"&=\"]}] */\nvar versionBytes = {\n  ed25519PublicKey: 6 << 3,\n  // G (when encoded in base32)\n  ed25519SecretSeed: 18 << 3,\n  // S\n  med25519PublicKey: 12 << 3,\n  // M\n  preAuthTx: 19 << 3,\n  // T\n  sha256Hash: 23 << 3,\n  // X\n  signedPayload: 15 << 3,\n  // P\n  contract: 2 << 3 // C\n};\nvar strkeyTypes = {\n  G: 'ed25519PublicKey',\n  S: 'ed25519SecretSeed',\n  M: 'med25519PublicKey',\n  T: 'preAuthTx',\n  X: 'sha256Hash',\n  P: 'signedPayload',\n  C: 'contract'\n};\n\n/**\n * StrKey is a helper class that allows encoding and decoding Stellar keys\n * to/from strings, i.e. between their binary (Buffer, xdr.PublicKey, etc.) and\n * string (i.e. \"GABCD...\", etc.) representations.\n */\nvar StrKey = exports.StrKey = /*#__PURE__*/function () {\n  function StrKey() {\n    _classCallCheck(this, StrKey);\n  }\n  return _createClass(StrKey, null, [{\n    key: \"encodeEd25519PublicKey\",\n    value:\n    /**\n     * Encodes `data` to strkey ed25519 public key.\n     *\n     * @param   {Buffer} data   raw data to encode\n     * @returns {string}        \"G...\" representation of the key\n     */\n    function encodeEd25519PublicKey(data) {\n      return encodeCheck('ed25519PublicKey', data);\n    }\n\n    /**\n     * Decodes strkey ed25519 public key to raw data.\n     *\n     * If the parameter is a muxed account key (\"M...\"), this will only encode it\n     * as a basic Ed25519 key (as if in \"G...\" format).\n     *\n     * @param   {string} data   \"G...\" (or \"M...\") key representation to decode\n     * @returns {Buffer}        raw key\n     */\n  }, {\n    key: \"decodeEd25519PublicKey\",\n    value: function decodeEd25519PublicKey(data) {\n      return decodeCheck('ed25519PublicKey', data);\n    }\n\n    /**\n     * Returns true if the given Stellar public key is a valid ed25519 public key.\n     * @param {string} publicKey public key to check\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidEd25519PublicKey\",\n    value: function isValidEd25519PublicKey(publicKey) {\n      return isValid('ed25519PublicKey', publicKey);\n    }\n\n    /**\n     * Encodes data to strkey ed25519 seed.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodeEd25519SecretSeed\",\n    value: function encodeEd25519SecretSeed(data) {\n      return encodeCheck('ed25519SecretSeed', data);\n    }\n\n    /**\n     * Decodes strkey ed25519 seed to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodeEd25519SecretSeed\",\n    value: function decodeEd25519SecretSeed(address) {\n      return decodeCheck('ed25519SecretSeed', address);\n    }\n\n    /**\n     * Returns true if the given Stellar secret key is a valid ed25519 secret seed.\n     * @param {string} seed seed to check\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidEd25519SecretSeed\",\n    value: function isValidEd25519SecretSeed(seed) {\n      return isValid('ed25519SecretSeed', seed);\n    }\n\n    /**\n     * Encodes data to strkey med25519 public key.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodeMed25519PublicKey\",\n    value: function encodeMed25519PublicKey(data) {\n      return encodeCheck('med25519PublicKey', data);\n    }\n\n    /**\n     * Decodes strkey med25519 public key to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodeMed25519PublicKey\",\n    value: function decodeMed25519PublicKey(address) {\n      return decodeCheck('med25519PublicKey', address);\n    }\n\n    /**\n     * Returns true if the given Stellar public key is a valid med25519 public key.\n     * @param {string} publicKey public key to check\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidMed25519PublicKey\",\n    value: function isValidMed25519PublicKey(publicKey) {\n      return isValid('med25519PublicKey', publicKey);\n    }\n\n    /**\n     * Encodes data to strkey preAuthTx.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodePreAuthTx\",\n    value: function encodePreAuthTx(data) {\n      return encodeCheck('preAuthTx', data);\n    }\n\n    /**\n     * Decodes strkey PreAuthTx to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodePreAuthTx\",\n    value: function decodePreAuthTx(address) {\n      return decodeCheck('preAuthTx', address);\n    }\n\n    /**\n     * Encodes data to strkey sha256 hash.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodeSha256Hash\",\n    value: function encodeSha256Hash(data) {\n      return encodeCheck('sha256Hash', data);\n    }\n\n    /**\n     * Decodes strkey sha256 hash to raw data.\n     * @param {string} address data to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodeSha256Hash\",\n    value: function decodeSha256Hash(address) {\n      return decodeCheck('sha256Hash', address);\n    }\n\n    /**\n     * Encodes raw data to strkey signed payload (P...).\n     * @param   {Buffer} data  data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodeSignedPayload\",\n    value: function encodeSignedPayload(data) {\n      return encodeCheck('signedPayload', data);\n    }\n\n    /**\n     * Decodes strkey signed payload (P...) to raw data.\n     * @param   {string} address  address to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodeSignedPayload\",\n    value: function decodeSignedPayload(address) {\n      return decodeCheck('signedPayload', address);\n    }\n\n    /**\n     * Checks validity of alleged signed payload (P...) strkey address.\n     * @param   {string} address  signer key to check\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidSignedPayload\",\n    value: function isValidSignedPayload(address) {\n      return isValid('signedPayload', address);\n    }\n\n    /**\n     * Encodes raw data to strkey contract (C...).\n     * @param   {Buffer} data  data to encode\n     * @returns {string}\n     */\n  }, {\n    key: \"encodeContract\",\n    value: function encodeContract(data) {\n      return encodeCheck('contract', data);\n    }\n\n    /**\n     * Decodes strkey contract (C...) to raw data.\n     * @param   {string} address  address to decode\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"decodeContract\",\n    value: function decodeContract(address) {\n      return decodeCheck('contract', address);\n    }\n\n    /**\n     * Checks validity of alleged contract (C...) strkey address.\n     * @param   {string} address  signer key to check\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidContract\",\n    value: function isValidContract(address) {\n      return isValid('contract', address);\n    }\n  }, {\n    key: \"getVersionByteForPrefix\",\n    value: function getVersionByteForPrefix(address) {\n      return strkeyTypes[address[0]];\n    }\n  }]);\n}();\n/**\n * Sanity-checks whether or not a strkey *appears* valid.\n *\n * @param  {string}  versionByteName the type of strkey to expect in `encoded`\n * @param  {string}  encoded         the strkey to validate\n *\n * @return {Boolean} whether or not the `encoded` strkey appears valid for the\n *     `versionByteName` strkey type (see `versionBytes`, above).\n *\n * @note This isn't a *definitive* check of validity, but rather a best-effort\n *     check based on (a) input length, (b) whether or not it can be decoded,\n *     and (c) output length.\n */\nfunction isValid(versionByteName, encoded) {\n  if (typeof encoded !== 'string') {\n    return false;\n  }\n\n  // basic length checks on the strkey lengths\n  switch (versionByteName) {\n    case 'ed25519PublicKey': // falls through\n    case 'ed25519SecretSeed': // falls through\n    case 'preAuthTx': // falls through\n    case 'sha256Hash': // falls through\n    case 'contract':\n      if (encoded.length !== 56) {\n        return false;\n      }\n      break;\n    case 'med25519PublicKey':\n      if (encoded.length !== 69) {\n        return false;\n      }\n      break;\n    case 'signedPayload':\n      if (encoded.length < 56 || encoded.length > 165) {\n        return false;\n      }\n      break;\n    default:\n      return false;\n  }\n  var decoded = '';\n  try {\n    decoded = decodeCheck(versionByteName, encoded);\n  } catch (err) {\n    return false;\n  }\n\n  // basic length checks on the resulting buffer sizes\n  switch (versionByteName) {\n    case 'ed25519PublicKey': // falls through\n    case 'ed25519SecretSeed': // falls through\n    case 'preAuthTx': // falls through\n    case 'sha256Hash': // falls through\n    case 'contract':\n      return decoded.length === 32;\n    case 'med25519PublicKey':\n      return decoded.length === 40;\n    // +8 bytes for the ID\n\n    case 'signedPayload':\n      return (\n        // 32 for the signer, +4 for the payload size, then either +4 for the\n        // min or +64 for the max payload\n        decoded.length >= 32 + 4 + 4 && decoded.length <= 32 + 4 + 64\n      );\n    default:\n      return false;\n  }\n}\nfunction decodeCheck(versionByteName, encoded) {\n  if (typeof encoded !== 'string') {\n    throw new TypeError('encoded argument must be of type String');\n  }\n  var decoded = _base[\"default\"].decode(encoded);\n  var versionByte = decoded[0];\n  var payload = decoded.slice(0, -2);\n  var data = payload.slice(1);\n  var checksum = decoded.slice(-2);\n  if (encoded !== _base[\"default\"].encode(decoded)) {\n    throw new Error('invalid encoded string');\n  }\n  var expectedVersion = versionBytes[versionByteName];\n  if (expectedVersion === undefined) {\n    throw new Error(\"\".concat(versionByteName, \" is not a valid version byte name. \") + \"Expected one of \".concat(Object.keys(versionBytes).join(', ')));\n  }\n  if (versionByte !== expectedVersion) {\n    throw new Error(\"invalid version byte. expected \".concat(expectedVersion, \", got \").concat(versionByte));\n  }\n  var expectedChecksum = calculateChecksum(payload);\n  if (!(0, _checksum.verifyChecksum)(expectedChecksum, checksum)) {\n    throw new Error(\"invalid checksum\");\n  }\n  return Buffer.from(data);\n}\nfunction encodeCheck(versionByteName, data) {\n  if (data === null || data === undefined) {\n    throw new Error('cannot encode null data');\n  }\n  var versionByte = versionBytes[versionByteName];\n  if (versionByte === undefined) {\n    throw new Error(\"\".concat(versionByteName, \" is not a valid version byte name. \") + \"Expected one of \".concat(Object.keys(versionBytes).join(', ')));\n  }\n  data = Buffer.from(data);\n  var versionBuffer = Buffer.from([versionByte]);\n  var payload = Buffer.concat([versionBuffer, data]);\n  var checksum = Buffer.from(calculateChecksum(payload));\n  var unencoded = Buffer.concat([payload, checksum]);\n  return _base[\"default\"].encode(unencoded);\n}\n\n// Computes the CRC16-XModem checksum of `payload` in little-endian order\nfunction calculateChecksum(payload) {\n  var crcTable = [0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7, 0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef, 0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6, 0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de, 0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d, 0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc, 0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823, 0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b, 0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12, 0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a, 0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41, 0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49, 0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70, 0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f, 0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067, 0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e, 0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256, 0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d, 0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634, 0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3, 0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a, 0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0];\n  var crc16 = 0x0;\n  for (var i = 0; i < payload.length; i += 1) {\n    var _byte = payload[i];\n    var lookupIndex = crc16 >> 8 ^ _byte;\n    crc16 = crc16 << 8 ^ crcTable[lookupIndex];\n    crc16 &= 0xffff;\n  }\n  var checksum = new Uint8Array(2);\n  checksum[0] = crc16 & 0xff;\n  checksum[1] = crc16 >> 8 & 0xff;\n  return checksum;\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,MAAM,GAAG,KAAK;AACtB,QAAQ,WAAW,GAAG;AACtB,QAAQ,WAAW,GAAG;AACtB,IAAI,QAAQ;AACZ,IAAI;AACJ,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF,SAAS,QAAQ,CAAC;IAAI;IAA2B,OAAO,UAAU,cAAc,OAAO,UAAU,YAAY,OAAO,OAAO,QAAQ,GAAG,SAAU,CAAC;QAAI,OAAO,OAAO;IAAG,IAAI,SAAU,CAAC;QAAI,OAAO,KAAK,cAAc,OAAO,UAAU,EAAE,WAAW,KAAK,UAAU,MAAM,OAAO,SAAS,GAAG,WAAW,OAAO;IAAG,GAAG,QAAQ;AAAI;AAC7T,SAAS,gBAAgB,CAAC,EAAE,CAAC;IAAI,IAAI,CAAC,CAAC,aAAa,CAAC,GAAG,MAAM,IAAI,UAAU;AAAsC;AAClH,SAAS,kBAAkB,CAAC,EAAE,CAAC;IAAI,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAAK;QAAE,IAAI,IAAI,CAAC,CAAC,EAAE;QAAE,EAAE,UAAU,GAAG,EAAE,UAAU,IAAI,CAAC,GAAG,EAAE,YAAY,GAAG,CAAC,GAAG,WAAW,KAAK,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC,GAAG,OAAO,cAAc,CAAC,GAAG,eAAe,EAAE,GAAG,GAAG;IAAI;AAAE;AACvO,SAAS,aAAa,CAAC,EAAE,CAAC,EAAE,CAAC;IAAI,OAAO,KAAK,kBAAkB,EAAE,SAAS,EAAE,IAAI,KAAK,kBAAkB,GAAG,IAAI,OAAO,cAAc,CAAC,GAAG,aAAa;QAAE,UAAU,CAAC;IAAE,IAAI;AAAG;AAC1K,SAAS,eAAe,CAAC;IAAI,IAAI,IAAI,aAAa,GAAG;IAAW,OAAO,YAAY,QAAQ,KAAK,IAAI,IAAI;AAAI;AAC5G,SAAS,aAAa,CAAC,EAAE,CAAC;IAAI,IAAI,YAAY,QAAQ,MAAM,CAAC,GAAG,OAAO;IAAG,IAAI,IAAI,CAAC,CAAC,OAAO,WAAW,CAAC;IAAE,IAAI,KAAK,MAAM,GAAG;QAAE,IAAI,IAAI,EAAE,IAAI,CAAC,GAAG,KAAK;QAAY,IAAI,YAAY,QAAQ,IAAI,OAAO;QAAG,MAAM,IAAI,UAAU;IAAiD;IAAE,OAAO,CAAC,aAAa,IAAI,SAAS,MAAM,EAAE;AAAI,EAAE,yEAAyE;AACtY,IAAI,eAAe;IACjB,kBAAkB,KAAK;IACvB,6BAA6B;IAC7B,mBAAmB,MAAM;IACzB,IAAI;IACJ,mBAAmB,MAAM;IACzB,IAAI;IACJ,WAAW,MAAM;IACjB,IAAI;IACJ,YAAY,MAAM;IAClB,IAAI;IACJ,eAAe,MAAM;IACrB,IAAI;IACJ,UAAU,KAAK,EAAE,IAAI;AACvB;AACA,IAAI,cAAc;IAChB,GAAG;IACH,GAAG;IACH,GAAG;IACH,GAAG;IACH,GAAG;IACH,GAAG;IACH,GAAG;AACL;AAEA;;;;CAIC,GACD,IAAI,SAAS,QAAQ,MAAM,GAAG,WAAW,GAAE;IACzC,SAAS;QACP,gBAAgB,IAAI,EAAE;IACxB;IACA,OAAO,aAAa,QAAQ,MAAM;QAAC;YACjC,KAAK;YACL,OACA;;;;;KAKC,GACD,SAAS,uBAAuB,IAAI;gBAClC,OAAO,YAAY,oBAAoB;YACzC;QAWF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,uBAAuB,IAAI;gBACzC,OAAO,YAAY,oBAAoB;YACzC;QAOF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,wBAAwB,SAAS;gBAC/C,OAAO,QAAQ,oBAAoB;YACrC;QAOF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,wBAAwB,IAAI;gBAC1C,OAAO,YAAY,qBAAqB;YAC1C;QAOF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,wBAAwB,OAAO;gBAC7C,OAAO,YAAY,qBAAqB;YAC1C;QAOF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,yBAAyB,IAAI;gBAC3C,OAAO,QAAQ,qBAAqB;YACtC;QAOF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,wBAAwB,IAAI;gBAC1C,OAAO,YAAY,qBAAqB;YAC1C;QAOF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,wBAAwB,OAAO;gBAC7C,OAAO,YAAY,qBAAqB;YAC1C;QAOF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,yBAAyB,SAAS;gBAChD,OAAO,QAAQ,qBAAqB;YACtC;QAOF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,gBAAgB,IAAI;gBAClC,OAAO,YAAY,aAAa;YAClC;QAOF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,gBAAgB,OAAO;gBACrC,OAAO,YAAY,aAAa;YAClC;QAOF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,iBAAiB,IAAI;gBACnC,OAAO,YAAY,cAAc;YACnC;QAOF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,iBAAiB,OAAO;gBACtC,OAAO,YAAY,cAAc;YACnC;QAOF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,oBAAoB,IAAI;gBACtC,OAAO,YAAY,iBAAiB;YACtC;QAOF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,oBAAoB,OAAO;gBACzC,OAAO,YAAY,iBAAiB;YACtC;QAOF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,qBAAqB,OAAO;gBAC1C,OAAO,QAAQ,iBAAiB;YAClC;QAOF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,eAAe,IAAI;gBACjC,OAAO,YAAY,YAAY;YACjC;QAOF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,eAAe,OAAO;gBACpC,OAAO,YAAY,YAAY;YACjC;QAOF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,gBAAgB,OAAO;gBACrC,OAAO,QAAQ,YAAY;YAC7B;QACF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,wBAAwB,OAAO;gBAC7C,OAAO,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC;YAChC;QACF;KAAE;AACJ;AACA;;;;;;;;;;;;CAYC,GACD,SAAS,QAAQ,eAAe,EAAE,OAAO;IACvC,IAAI,OAAO,YAAY,UAAU;QAC/B,OAAO;IACT;IAEA,4CAA4C;IAC5C,OAAQ;QACN,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;YACH,IAAI,QAAQ,MAAM,KAAK,IAAI;gBACzB,OAAO;YACT;YACA;QACF,KAAK;YACH,IAAI,QAAQ,MAAM,KAAK,IAAI;gBACzB,OAAO;YACT;YACA;QACF,KAAK;YACH,IAAI,QAAQ,MAAM,GAAG,MAAM,QAAQ,MAAM,GAAG,KAAK;gBAC/C,OAAO;YACT;YACA;QACF;YACE,OAAO;IACX;IACA,IAAI,UAAU;IACd,IAAI;QACF,UAAU,YAAY,iBAAiB;IACzC,EAAE,OAAO,KAAK;QACZ,OAAO;IACT;IAEA,oDAAoD;IACpD,OAAQ;QACN,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;YACH,OAAO,QAAQ,MAAM,KAAK;QAC5B,KAAK;YACH,OAAO,QAAQ,MAAM,KAAK;QAC5B,sBAAsB;QAEtB,KAAK;YACH,OACE,qEAAqE;YACrE,iCAAiC;YACjC,QAAQ,MAAM,IAAI,KAAK,IAAI,KAAK,QAAQ,MAAM,IAAI,KAAK,IAAI;QAE/D;YACE,OAAO;IACX;AACF;AACA,SAAS,YAAY,eAAe,EAAE,OAAO;IAC3C,IAAI,OAAO,YAAY,UAAU;QAC/B,MAAM,IAAI,UAAU;IACtB;IACA,IAAI,UAAU,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC;IACtC,IAAI,cAAc,OAAO,CAAC,EAAE;IAC5B,IAAI,UAAU,QAAQ,KAAK,CAAC,GAAG,CAAC;IAChC,IAAI,OAAO,QAAQ,KAAK,CAAC;IACzB,IAAI,WAAW,QAAQ,KAAK,CAAC,CAAC;IAC9B,IAAI,YAAY,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU;QAChD,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,kBAAkB,YAAY,CAAC,gBAAgB;IACnD,IAAI,oBAAoB,WAAW;QACjC,MAAM,IAAI,MAAM,GAAG,MAAM,CAAC,iBAAiB,yCAAyC,mBAAmB,MAAM,CAAC,OAAO,IAAI,CAAC,cAAc,IAAI,CAAC;IAC/I;IACA,IAAI,gBAAgB,iBAAiB;QACnC,MAAM,IAAI,MAAM,kCAAkC,MAAM,CAAC,iBAAiB,UAAU,MAAM,CAAC;IAC7F;IACA,IAAI,mBAAmB,kBAAkB;IACzC,IAAI,CAAC,CAAC,GAAG,UAAU,cAAc,EAAE,kBAAkB,WAAW;QAC9D,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,OAAO,IAAI,CAAC;AACrB;AACA,SAAS,YAAY,eAAe,EAAE,IAAI;IACxC,IAAI,SAAS,QAAQ,SAAS,WAAW;QACvC,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,cAAc,YAAY,CAAC,gBAAgB;IAC/C,IAAI,gBAAgB,WAAW;QAC7B,MAAM,IAAI,MAAM,GAAG,MAAM,CAAC,iBAAiB,yCAAyC,mBAAmB,MAAM,CAAC,OAAO,IAAI,CAAC,cAAc,IAAI,CAAC;IAC/I;IACA,OAAO,OAAO,IAAI,CAAC;IACnB,IAAI,gBAAgB,OAAO,IAAI,CAAC;QAAC;KAAY;IAC7C,IAAI,UAAU,OAAO,MAAM,CAAC;QAAC;QAAe;KAAK;IACjD,IAAI,WAAW,OAAO,IAAI,CAAC,kBAAkB;IAC7C,IAAI,YAAY,OAAO,MAAM,CAAC;QAAC;QAAS;KAAS;IACjD,OAAO,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC;AACjC;AAEA,yEAAyE;AACzE,SAAS,kBAAkB,OAAO;IAChgE,IAAI,QAAQ;IACZ,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,MAAM,EAAE,KAAK,EAAG;QAC1C,IAAI,QAAQ,OAAO,CAAC,EAAE;QACtB,IAAI,cAAc,SAAS,IAAI;QAC/B,QAAQ,SAAS,IAAI,QAAQ,CAAC,YAAY;QAC1C,SAAS;IACX;IACA,IAAI,WAAW,IAAI,WAAW;IAC9B,QAAQ,CAAC,EAAE,GAAG,QAAQ;IACtB,QAAQ,CAAC,EAAE,GAAG,SAAS,IAAI;IAC3B,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14818, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/keypair.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Keypair = void 0;\nvar _tweetnacl = _interopRequireDefault(require(\"tweetnacl\"));\nvar _signing = require(\"./signing\");\nvar _strkey = require(\"./strkey\");\nvar _hashing = require(\"./hashing\");\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); } /* eslint no-bitwise: [\"error\", {\"allow\": [\"^\"]}] */\n/**\n * `Keypair` represents public (and secret) keys of the account.\n *\n * Currently `Keypair` only supports ed25519 but in a future this class can be abstraction layer for other\n * public-key signature systems.\n *\n * Use more convenient methods to create `Keypair` object:\n * * `{@link Keypair.fromPublicKey}`\n * * `{@link Keypair.fromSecret}`\n * * `{@link Keypair.random}`\n *\n * @constructor\n * @param {object} keys At least one of keys must be provided.\n * @param {string} keys.type Public-key signature system name. (currently only `ed25519` keys are supported)\n * @param {Buffer} [keys.publicKey] Raw public key\n * @param {Buffer} [keys.secretKey] Raw secret key (32-byte secret seed in ed25519`)\n */\nvar Keypair = exports.Keypair = /*#__PURE__*/function () {\n  function Keypair(keys) {\n    _classCallCheck(this, Keypair);\n    if (keys.type !== 'ed25519') {\n      throw new Error('Invalid keys type');\n    }\n    this.type = keys.type;\n    if (keys.secretKey) {\n      keys.secretKey = Buffer.from(keys.secretKey);\n      if (keys.secretKey.length !== 32) {\n        throw new Error('secretKey length is invalid');\n      }\n      this._secretSeed = keys.secretKey;\n      this._publicKey = (0, _signing.generate)(keys.secretKey);\n      this._secretKey = Buffer.concat([keys.secretKey, this._publicKey]);\n      if (keys.publicKey && !this._publicKey.equals(Buffer.from(keys.publicKey))) {\n        throw new Error('secretKey does not match publicKey');\n      }\n    } else {\n      this._publicKey = Buffer.from(keys.publicKey);\n      if (this._publicKey.length !== 32) {\n        throw new Error('publicKey length is invalid');\n      }\n    }\n  }\n\n  /**\n   * Creates a new `Keypair` instance from secret. This can either be secret key or secret seed depending\n   * on underlying public-key signature system. Currently `Keypair` only supports ed25519.\n   * @param {string} secret secret key (ex. `SDAKFNYEIAORZKKCYRILFQKLLOCNPL5SWJ3YY5NM3ZH6GJSZGXHZEPQS`)\n   * @returns {Keypair}\n   */\n  return _createClass(Keypair, [{\n    key: \"xdrAccountId\",\n    value: function xdrAccountId() {\n      return new _xdr[\"default\"].AccountId.publicKeyTypeEd25519(this._publicKey);\n    }\n  }, {\n    key: \"xdrPublicKey\",\n    value: function xdrPublicKey() {\n      return new _xdr[\"default\"].PublicKey.publicKeyTypeEd25519(this._publicKey);\n    }\n\n    /**\n     * Creates a {@link xdr.MuxedAccount} object from the public key.\n     *\n     * You will get a different type of muxed account depending on whether or not\n     * you pass an ID.\n     *\n     * @param  {string} [id] - stringified integer indicating the underlying muxed\n     *     ID of the new account object\n     *\n     * @return {xdr.MuxedAccount}\n     */\n  }, {\n    key: \"xdrMuxedAccount\",\n    value: function xdrMuxedAccount(id) {\n      if (typeof id !== 'undefined') {\n        if (typeof id !== 'string') {\n          throw new TypeError(\"expected string for ID, got \".concat(_typeof(id)));\n        }\n        return _xdr[\"default\"].MuxedAccount.keyTypeMuxedEd25519(new _xdr[\"default\"].MuxedAccountMed25519({\n          id: _xdr[\"default\"].Uint64.fromString(id),\n          ed25519: this._publicKey\n        }));\n      }\n      return new _xdr[\"default\"].MuxedAccount.keyTypeEd25519(this._publicKey);\n    }\n\n    /**\n     * Returns raw public key\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"rawPublicKey\",\n    value: function rawPublicKey() {\n      return this._publicKey;\n    }\n  }, {\n    key: \"signatureHint\",\n    value: function signatureHint() {\n      var a = this.xdrAccountId().toXDR();\n      return a.slice(a.length - 4);\n    }\n\n    /**\n     * Returns public key associated with this `Keypair` object.\n     * @returns {string}\n     */\n  }, {\n    key: \"publicKey\",\n    value: function publicKey() {\n      return _strkey.StrKey.encodeEd25519PublicKey(this._publicKey);\n    }\n\n    /**\n     * Returns secret key associated with this `Keypair` object\n     * @returns {string}\n     */\n  }, {\n    key: \"secret\",\n    value: function secret() {\n      if (!this._secretSeed) {\n        throw new Error('no secret key available');\n      }\n      if (this.type === 'ed25519') {\n        return _strkey.StrKey.encodeEd25519SecretSeed(this._secretSeed);\n      }\n      throw new Error('Invalid Keypair type');\n    }\n\n    /**\n     * Returns raw secret key.\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"rawSecretKey\",\n    value: function rawSecretKey() {\n      return this._secretSeed;\n    }\n\n    /**\n     * Returns `true` if this `Keypair` object contains secret key and can sign.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"canSign\",\n    value: function canSign() {\n      return !!this._secretKey;\n    }\n\n    /**\n     * Signs data.\n     * @param {Buffer} data Data to sign\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"sign\",\n    value: function sign(data) {\n      if (!this.canSign()) {\n        throw new Error('cannot sign: no secret key available');\n      }\n      return (0, _signing.sign)(data, this._secretKey);\n    }\n\n    /**\n     * Verifies if `signature` for `data` is valid.\n     * @param {Buffer} data Signed data\n     * @param {Buffer} signature Signature\n     * @returns {boolean}\n     */\n  }, {\n    key: \"verify\",\n    value: function verify(data, signature) {\n      return (0, _signing.verify)(data, signature, this._publicKey);\n    }\n\n    /**\n     * Returns the decorated signature (hint+sig) for arbitrary data.\n     *\n     * @param  {Buffer} data  arbitrary data to sign\n     * @return {xdr.DecoratedSignature}   the raw signature structure which can be\n     *     added directly to a transaction envelope\n     *\n     * @see TransactionBase.addDecoratedSignature\n     */\n  }, {\n    key: \"signDecorated\",\n    value: function signDecorated(data) {\n      var signature = this.sign(data);\n      var hint = this.signatureHint();\n      return new _xdr[\"default\"].DecoratedSignature({\n        hint: hint,\n        signature: signature\n      });\n    }\n\n    /**\n     * Returns the raw decorated signature (hint+sig) for a signed payload signer.\n     *\n     *  The hint is defined as the last 4 bytes of the signer key XORed with last\n     *  4 bytes of the payload (zero-left-padded if necessary).\n     *\n     * @param  {Buffer} data    data to both sign and treat as the payload\n     * @return {xdr.DecoratedSignature}\n     *\n     * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0040.md#signature-hint\n     * @see TransactionBase.addDecoratedSignature\n     */\n  }, {\n    key: \"signPayloadDecorated\",\n    value: function signPayloadDecorated(data) {\n      var signature = this.sign(data);\n      var keyHint = this.signatureHint();\n      var hint = Buffer.from(data.slice(-4));\n      if (hint.length < 4) {\n        // append zeroes as needed\n        hint = Buffer.concat([hint, Buffer.alloc(4 - data.length, 0)]);\n      }\n      return new _xdr[\"default\"].DecoratedSignature({\n        hint: hint.map(function (_byte, i) {\n          return _byte ^ keyHint[i];\n        }),\n        signature: signature\n      });\n    }\n  }], [{\n    key: \"fromSecret\",\n    value: function fromSecret(secret) {\n      var rawSecret = _strkey.StrKey.decodeEd25519SecretSeed(secret);\n      return this.fromRawEd25519Seed(rawSecret);\n    }\n\n    /**\n     * Creates a new `Keypair` object from ed25519 secret key seed raw bytes.\n     *\n     * @param {Buffer} rawSeed Raw 32-byte ed25519 secret key seed\n     * @returns {Keypair}\n     */\n  }, {\n    key: \"fromRawEd25519Seed\",\n    value: function fromRawEd25519Seed(rawSeed) {\n      return new this({\n        type: 'ed25519',\n        secretKey: rawSeed\n      });\n    }\n\n    /**\n     * Returns `Keypair` object representing network master key.\n     * @param {string} networkPassphrase passphrase of the target stellar network (e.g. \"Public Global Stellar Network ; September 2015\").\n     * @returns {Keypair}\n     */\n  }, {\n    key: \"master\",\n    value: function master(networkPassphrase) {\n      if (!networkPassphrase) {\n        throw new Error('No network selected. Please pass a network argument, e.g. `Keypair.master(Networks.PUBLIC)`.');\n      }\n      return this.fromRawEd25519Seed((0, _hashing.hash)(networkPassphrase));\n    }\n\n    /**\n     * Creates a new `Keypair` object from public key.\n     * @param {string} publicKey public key (ex. `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`)\n     * @returns {Keypair}\n     */\n  }, {\n    key: \"fromPublicKey\",\n    value: function fromPublicKey(publicKey) {\n      publicKey = _strkey.StrKey.decodeEd25519PublicKey(publicKey);\n      if (publicKey.length !== 32) {\n        throw new Error('Invalid Stellar public key');\n      }\n      return new this({\n        type: 'ed25519',\n        publicKey: publicKey\n      });\n    }\n\n    /**\n     * Create a random `Keypair` object.\n     * @returns {Keypair}\n     */\n  }, {\n    key: \"random\",\n    value: function random() {\n      var secret = _tweetnacl[\"default\"].randomBytes(32);\n      return this.fromRawEd25519Seed(secret);\n    }\n  }]);\n}();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15089, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/asset.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Asset = void 0;\nvar _util = require(\"./util/util\");\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nvar _keypair = require(\"./keypair\");\nvar _strkey = require(\"./strkey\");\nvar _hashing = require(\"./hashing\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Asset class represents an asset, either the native asset (`XLM`)\n * or an asset code / issuer account ID pair.\n *\n * An asset code describes an asset code and issuer pair. In the case of the native\n * asset XLM, the issuer will be null.\n *\n * @constructor\n * @param {string} code - The asset code.\n * @param {string} issuer - The account ID of the issuer.\n */\nvar Asset = exports.Asset = /*#__PURE__*/function () {\n  function Asset(code, issuer) {\n    _classCallCheck(this, Asset);\n    if (!/^[a-zA-Z0-9]{1,12}$/.test(code)) {\n      throw new Error('Asset code is invalid (maximum alphanumeric, 12 characters at max)');\n    }\n    if (String(code).toLowerCase() !== 'xlm' && !issuer) {\n      throw new Error('Issuer cannot be null');\n    }\n    if (issuer && !_strkey.StrKey.isValidEd25519PublicKey(issuer)) {\n      throw new Error('Issuer is invalid');\n    }\n    if (String(code).toLowerCase() === 'xlm') {\n      // transform all xLM, Xlm, etc. variants -> XLM\n      this.code = 'XLM';\n    } else {\n      this.code = code;\n    }\n    this.issuer = issuer;\n  }\n\n  /**\n   * Returns an asset object for the native asset.\n   * @Return {Asset}\n   */\n  return _createClass(Asset, [{\n    key: \"toXDRObject\",\n    value:\n    /**\n     * Returns the xdr.Asset object for this asset.\n     * @returns {xdr.Asset} XDR asset object\n     */\n    function toXDRObject() {\n      return this._toXDRObject(_xdr[\"default\"].Asset);\n    }\n\n    /**\n     * Returns the xdr.ChangeTrustAsset object for this asset.\n     * @returns {xdr.ChangeTrustAsset} XDR asset object\n     */\n  }, {\n    key: \"toChangeTrustXDRObject\",\n    value: function toChangeTrustXDRObject() {\n      return this._toXDRObject(_xdr[\"default\"].ChangeTrustAsset);\n    }\n\n    /**\n     * Returns the xdr.TrustLineAsset object for this asset.\n     * @returns {xdr.TrustLineAsset} XDR asset object\n     */\n  }, {\n    key: \"toTrustLineXDRObject\",\n    value: function toTrustLineXDRObject() {\n      return this._toXDRObject(_xdr[\"default\"].TrustLineAsset);\n    }\n\n    /**\n     * Returns the would-be contract ID (`C...` format) for this asset on a given\n     * network.\n     *\n     * @param {string}    networkPassphrase   indicates which network the contract\n     *    ID should refer to, since every network will have a unique ID for the\n     *    same contract (see {@link Networks} for options)\n     *\n     * @returns {string}  the strkey-encoded (`C...`) contract ID for this asset\n     *\n     * @warning This makes no guarantee that this contract actually *exists*.\n     */\n  }, {\n    key: \"contractId\",\n    value: function contractId(networkPassphrase) {\n      var networkId = (0, _hashing.hash)(Buffer.from(networkPassphrase));\n      var preimage = _xdr[\"default\"].HashIdPreimage.envelopeTypeContractId(new _xdr[\"default\"].HashIdPreimageContractId({\n        networkId: networkId,\n        contractIdPreimage: _xdr[\"default\"].ContractIdPreimage.contractIdPreimageFromAsset(this.toXDRObject())\n      }));\n      return _strkey.StrKey.encodeContract((0, _hashing.hash)(preimage.toXDR()));\n    }\n\n    /**\n     * Returns the xdr object for this asset.\n     * @param {xdr.Asset | xdr.ChangeTrustAsset} xdrAsset - The asset xdr object.\n     * @returns {xdr.Asset | xdr.ChangeTrustAsset | xdr.TrustLineAsset} XDR Asset object\n     */\n  }, {\n    key: \"_toXDRObject\",\n    value: function _toXDRObject() {\n      var xdrAsset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _xdr[\"default\"].Asset;\n      if (this.isNative()) {\n        return xdrAsset.assetTypeNative();\n      }\n      var xdrType;\n      var xdrTypeString;\n      if (this.code.length <= 4) {\n        xdrType = _xdr[\"default\"].AlphaNum4;\n        xdrTypeString = 'assetTypeCreditAlphanum4';\n      } else {\n        xdrType = _xdr[\"default\"].AlphaNum12;\n        xdrTypeString = 'assetTypeCreditAlphanum12';\n      }\n\n      // pad code with null bytes if necessary\n      var padLength = this.code.length <= 4 ? 4 : 12;\n      var paddedCode = this.code.padEnd(padLength, '\\0');\n\n      // eslint-disable-next-line new-cap\n      var assetType = new xdrType({\n        assetCode: paddedCode,\n        issuer: _keypair.Keypair.fromPublicKey(this.issuer).xdrAccountId()\n      });\n      return new xdrAsset(xdrTypeString, assetType);\n    }\n\n    /**\n     * @returns {string} Asset code\n     */\n  }, {\n    key: \"getCode\",\n    value: function getCode() {\n      if (this.code === undefined) {\n        return undefined;\n      }\n      return String(this.code);\n    }\n\n    /**\n     * @returns {string} Asset issuer\n     */\n  }, {\n    key: \"getIssuer\",\n    value: function getIssuer() {\n      if (this.issuer === undefined) {\n        return undefined;\n      }\n      return String(this.issuer);\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {string} Asset type. Can be one of following types:\n     *\n     *  - `native`,\n     *  - `credit_alphanum4`,\n     *  - `credit_alphanum12`, or\n     *  - `unknown` as the error case (which should never occur)\n     */\n  }, {\n    key: \"getAssetType\",\n    value: function getAssetType() {\n      switch (this.getRawAssetType().value) {\n        case _xdr[\"default\"].AssetType.assetTypeNative().value:\n          return 'native';\n        case _xdr[\"default\"].AssetType.assetTypeCreditAlphanum4().value:\n          return 'credit_alphanum4';\n        case _xdr[\"default\"].AssetType.assetTypeCreditAlphanum12().value:\n          return 'credit_alphanum12';\n        default:\n          return 'unknown';\n      }\n    }\n\n    /**\n     * @returns {xdr.AssetType}  the raw XDR representation of the asset type\n     */\n  }, {\n    key: \"getRawAssetType\",\n    value: function getRawAssetType() {\n      if (this.isNative()) {\n        return _xdr[\"default\"].AssetType.assetTypeNative();\n      }\n      if (this.code.length <= 4) {\n        return _xdr[\"default\"].AssetType.assetTypeCreditAlphanum4();\n      }\n      return _xdr[\"default\"].AssetType.assetTypeCreditAlphanum12();\n    }\n\n    /**\n     * @returns {boolean}  true if this asset object is the native asset.\n     */\n  }, {\n    key: \"isNative\",\n    value: function isNative() {\n      return !this.issuer;\n    }\n\n    /**\n     * @param {Asset} asset Asset to compare\n     * @returns {boolean} true if this asset equals the given asset.\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(asset) {\n      return this.code === asset.getCode() && this.issuer === asset.getIssuer();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      if (this.isNative()) {\n        return 'native';\n      }\n      return \"\".concat(this.getCode(), \":\").concat(this.getIssuer());\n    }\n\n    /**\n     * Compares two assets according to the criteria:\n     *\n     *  1. First compare the type (native < alphanum4 < alphanum12).\n     *  2. If the types are equal, compare the assets codes.\n     *  3. If the asset codes are equal, compare the issuers.\n     *\n     * @param   {Asset} assetA - the first asset\n     * @param   {Asset} assetB - the second asset\n     * @returns {number} `-1` if assetA < assetB, `0` if assetA == assetB, `1` if assetA > assetB.\n     *\n     * @static\n     * @memberof Asset\n     */\n  }], [{\n    key: \"native\",\n    value: function _native() {\n      return new Asset('XLM');\n    }\n\n    /**\n     * Returns an asset object from its XDR object representation.\n     * @param {xdr.Asset} assetXdr - The asset xdr object.\n     * @returns {Asset}\n     */\n  }, {\n    key: \"fromOperation\",\n    value: function fromOperation(assetXdr) {\n      var anum;\n      var code;\n      var issuer;\n      switch (assetXdr[\"switch\"]()) {\n        case _xdr[\"default\"].AssetType.assetTypeNative():\n          return this[\"native\"]();\n        case _xdr[\"default\"].AssetType.assetTypeCreditAlphanum4():\n          anum = assetXdr.alphaNum4();\n        /* falls through */\n        case _xdr[\"default\"].AssetType.assetTypeCreditAlphanum12():\n          anum = anum || assetXdr.alphaNum12();\n          issuer = _strkey.StrKey.encodeEd25519PublicKey(anum.issuer().ed25519());\n          code = (0, _util.trimEnd)(anum.assetCode(), '\\0');\n          return new this(code, issuer);\n        default:\n          throw new Error(\"Invalid asset type: \".concat(assetXdr[\"switch\"]().name));\n      }\n    }\n  }, {\n    key: \"compare\",\n    value: function compare(assetA, assetB) {\n      if (!assetA || !(assetA instanceof Asset)) {\n        throw new Error('assetA is invalid');\n      }\n      if (!assetB || !(assetB instanceof Asset)) {\n        throw new Error('assetB is invalid');\n      }\n      if (assetA.equals(assetB)) {\n        return 0;\n      }\n\n      // Compare asset types.\n      var xdrAtype = assetA.getRawAssetType().value;\n      var xdrBtype = assetB.getRawAssetType().value;\n      if (xdrAtype !== xdrBtype) {\n        return xdrAtype < xdrBtype ? -1 : 1;\n      }\n\n      // Compare asset codes.\n      var result = asciiCompare(assetA.getCode(), assetB.getCode());\n      if (result !== 0) {\n        return result;\n      }\n\n      // Compare asset issuers.\n      return asciiCompare(assetA.getIssuer(), assetB.getIssuer());\n    }\n  }]);\n}();\n/**\n * Compares two ASCII strings in lexographic order with uppercase precedence.\n *\n * @param   {string} a - the first string to compare\n * @param   {string} b - the second\n * @returns {number} like all `compare()`s:\n *     -1 if `a < b`, 0 if `a == b`, and 1 if `a > b`\n *\n * @warning No type-checks are done on the parameters\n */\nfunction asciiCompare(a, b) {\n  return Buffer.compare(Buffer.from(a, 'ascii'), Buffer.from(b, 'ascii'));\n}"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15373, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/get_liquidity_pool_id.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquidityPoolFeeV18 = void 0;\nexports.getLiquidityPoolId = getLiquidityPoolId;\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nvar _asset = require(\"./asset\");\nvar _hashing = require(\"./hashing\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n// LiquidityPoolFeeV18 is the default liquidity pool fee in protocol v18. It defaults to 30 base points (0.3%).\nvar LiquidityPoolFeeV18 = exports.LiquidityPoolFeeV18 = 30;\n\n/**\n * getLiquidityPoolId computes the Pool ID for the given assets, fee and pool type.\n *\n * @see [stellar-core getPoolID](https://github.com/stellar/stellar-core/blob/9f3a48c6a8f1aa77b6043a055d0638661f718080/src/ledger/test/LedgerTxnTests.cpp#L3746-L3751)\n *\n * @export\n * @param {string} liquidityPoolType – A string representing the liquidity pool type.\n * @param {object} liquidityPoolParameters        – The liquidity pool parameters.\n * @param {Asset}  liquidityPoolParameters.assetA – The first asset in the Pool, it must respect the rule assetA < assetB.\n * @param {Asset}  liquidityPoolParameters.assetB – The second asset in the Pool, it must respect the rule assetA < assetB.\n * @param {number} liquidityPoolParameters.fee    – The liquidity pool fee. For now the only fee supported is `30`.\n *\n * @return {Buffer} the raw Pool ID buffer, which can be stringfied with `toString('hex')`\n */\nfunction getLiquidityPoolId(liquidityPoolType) {\n  var liquidityPoolParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (liquidityPoolType !== 'constant_product') {\n    throw new Error('liquidityPoolType is invalid');\n  }\n  var assetA = liquidityPoolParameters.assetA,\n    assetB = liquidityPoolParameters.assetB,\n    fee = liquidityPoolParameters.fee;\n  if (!assetA || !(assetA instanceof _asset.Asset)) {\n    throw new Error('assetA is invalid');\n  }\n  if (!assetB || !(assetB instanceof _asset.Asset)) {\n    throw new Error('assetB is invalid');\n  }\n  if (!fee || fee !== LiquidityPoolFeeV18) {\n    throw new Error('fee is invalid');\n  }\n  if (_asset.Asset.compare(assetA, assetB) !== -1) {\n    throw new Error('Assets are not in lexicographic order');\n  }\n  var lpTypeData = _xdr[\"default\"].LiquidityPoolType.liquidityPoolConstantProduct().toXDR();\n  var lpParamsData = new _xdr[\"default\"].LiquidityPoolConstantProductParameters({\n    assetA: assetA.toXDRObject(),\n    assetB: assetB.toXDRObject(),\n    fee: fee\n  }).toXDR();\n  var payload = Buffer.concat([lpTypeData, lpParamsData]);\n  return (0, _hashing.hash)(payload);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,mBAAmB,GAAG,KAAK;AACnC,QAAQ,kBAAkB,GAAG;AAC7B,IAAI,OAAO;AACX,IAAI;AACJ,IAAI;AACJ,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF,+GAA+G;AAC/G,IAAI,sBAAsB,QAAQ,mBAAmB,GAAG;AAExD;;;;;;;;;;;;;CAaC,GACD,SAAS,mBAAmB,iBAAiB;IAC3C,IAAI,0BAA0B,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IACnG,IAAI,sBAAsB,oBAAoB;QAC5C,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,SAAS,wBAAwB,MAAM,EACzC,SAAS,wBAAwB,MAAM,EACvC,MAAM,wBAAwB,GAAG;IACnC,IAAI,CAAC,UAAU,CAAC,CAAC,kBAAkB,OAAO,KAAK,GAAG;QAChD,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,CAAC,UAAU,CAAC,CAAC,kBAAkB,OAAO,KAAK,GAAG;QAChD,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,CAAC,OAAO,QAAQ,qBAAqB;QACvC,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,OAAO,KAAK,CAAC,OAAO,CAAC,QAAQ,YAAY,CAAC,GAAG;QAC/C,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,aAAa,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,4BAA4B,GAAG,KAAK;IACvF,IAAI,eAAe,IAAI,IAAI,CAAC,UAAU,CAAC,sCAAsC,CAAC;QAC5E,QAAQ,OAAO,WAAW;QAC1B,QAAQ,OAAO,WAAW;QAC1B,KAAK;IACP,GAAG,KAAK;IACR,IAAI,UAAU,OAAO,MAAM,CAAC;QAAC;QAAY;KAAa;IACtD,OAAO,CAAC,GAAG,SAAS,IAAI,EAAE;AAC5B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15437, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/transaction_base.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionBase = void 0;\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nvar _hashing = require(\"./hashing\");\nvar _keypair = require(\"./keypair\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * @ignore\n */\nvar TransactionBase = exports.TransactionBase = /*#__PURE__*/function () {\n  function TransactionBase(tx, signatures, fee, networkPassphrase) {\n    _classCallCheck(this, TransactionBase);\n    if (typeof networkPassphrase !== 'string') {\n      throw new Error(\"Invalid passphrase provided to Transaction: expected a string but got a \".concat(_typeof(networkPassphrase)));\n    }\n    this._networkPassphrase = networkPassphrase;\n    this._tx = tx;\n    this._signatures = signatures;\n    this._fee = fee;\n  }\n\n  /**\n   * @type {Array.<xdr.DecoratedSignature>}\n   * @readonly\n   */\n  return _createClass(TransactionBase, [{\n    key: \"signatures\",\n    get: function get() {\n      return this._signatures;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n  }, {\n    key: \"tx\",\n    get: function get() {\n      return this._tx;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"fee\",\n    get: function get() {\n      return this._fee;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"networkPassphrase\",\n    get: function get() {\n      return this._networkPassphrase;\n    },\n    set: function set(networkPassphrase) {\n      this._networkPassphrase = networkPassphrase;\n    }\n\n    /**\n     * Signs the transaction with the given {@link Keypair}.\n     * @param {...Keypair} keypairs Keypairs of signers\n     * @returns {void}\n     */\n  }, {\n    key: \"sign\",\n    value: function sign() {\n      var _this = this;\n      var txHash = this.hash();\n      for (var _len = arguments.length, keypairs = new Array(_len), _key = 0; _key < _len; _key++) {\n        keypairs[_key] = arguments[_key];\n      }\n      keypairs.forEach(function (kp) {\n        var sig = kp.signDecorated(txHash);\n        _this.signatures.push(sig);\n      });\n    }\n\n    /**\n     * Signs a transaction with the given {@link Keypair}. Useful if someone sends\n     * you a transaction XDR for you to sign and return (see\n     * [addSignature](#addSignature) for more information).\n     *\n     * When you get a transaction XDR to sign....\n     * - Instantiate a `Transaction` object with the XDR\n     * - Use {@link Keypair} to generate a keypair object for your Stellar seed.\n     * - Run `getKeypairSignature` with that keypair\n     * - Send back the signature along with your publicKey (not your secret seed!)\n     *\n     * Example:\n     * ```javascript\n     * // `transactionXDR` is a string from the person generating the transaction\n     * const transaction = new Transaction(transactionXDR, networkPassphrase);\n     * const keypair = Keypair.fromSecret(myStellarSeed);\n     * return transaction.getKeypairSignature(keypair);\n     * ```\n     *\n     * @param {Keypair} keypair Keypair of signer\n     * @returns {string} Signature string\n     */\n  }, {\n    key: \"getKeypairSignature\",\n    value: function getKeypairSignature(keypair) {\n      return keypair.sign(this.hash()).toString('base64');\n    }\n\n    /**\n     * Add a signature to the transaction. Useful when a party wants to pre-sign\n     * a transaction but doesn't want to give access to their secret keys.\n     * This will also verify whether the signature is valid.\n     *\n     * Here's how you would use this feature to solicit multiple signatures.\n     * - Use `TransactionBuilder` to build a new transaction.\n     * - Make sure to set a long enough timeout on that transaction to give your\n     * signers enough time to sign!\n     * - Once you build the transaction, use `transaction.toXDR()` to get the\n     * base64-encoded XDR string.\n     * - _Warning!_ Once you've built this transaction, don't submit any other\n     * transactions onto your account! Doing so will invalidate this pre-compiled\n     * transaction!\n     * - Send this XDR string to your other parties. They can use the instructions\n     * for [getKeypairSignature](#getKeypairSignature) to sign the transaction.\n     * - They should send you back their `publicKey` and the `signature` string\n     * from [getKeypairSignature](#getKeypairSignature), both of which you pass to\n     * this function.\n     *\n     * @param {string} publicKey The public key of the signer\n     * @param {string} signature The base64 value of the signature XDR\n     * @returns {void}\n     */\n  }, {\n    key: \"addSignature\",\n    value: function addSignature() {\n      var publicKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      if (!signature || typeof signature !== 'string') {\n        throw new Error('Invalid signature');\n      }\n      if (!publicKey || typeof publicKey !== 'string') {\n        throw new Error('Invalid publicKey');\n      }\n      var keypair;\n      var hint;\n      var signatureBuffer = Buffer.from(signature, 'base64');\n      try {\n        keypair = _keypair.Keypair.fromPublicKey(publicKey);\n        hint = keypair.signatureHint();\n      } catch (e) {\n        throw new Error('Invalid publicKey');\n      }\n      if (!keypair.verify(this.hash(), signatureBuffer)) {\n        throw new Error('Invalid signature');\n      }\n      this.signatures.push(new _xdr[\"default\"].DecoratedSignature({\n        hint: hint,\n        signature: signatureBuffer\n      }));\n    }\n\n    /**\n     * Add a decorated signature directly to the transaction envelope.\n     *\n     * @param {xdr.DecoratedSignature} signature    raw signature to add\n     * @returns {void}\n     *\n     * @see Keypair.signDecorated\n     * @see Keypair.signPayloadDecorated\n     */\n  }, {\n    key: \"addDecoratedSignature\",\n    value: function addDecoratedSignature(signature) {\n      this.signatures.push(signature);\n    }\n\n    /**\n     * Add `hashX` signer preimage as signature.\n     * @param {Buffer|String} preimage Preimage of hash used as signer\n     * @returns {void}\n     */\n  }, {\n    key: \"signHashX\",\n    value: function signHashX(preimage) {\n      if (typeof preimage === 'string') {\n        preimage = Buffer.from(preimage, 'hex');\n      }\n      if (preimage.length > 64) {\n        throw new Error('preimage cannnot be longer than 64 bytes');\n      }\n      var signature = preimage;\n      var hashX = (0, _hashing.hash)(preimage);\n      var hint = hashX.slice(hashX.length - 4);\n      this.signatures.push(new _xdr[\"default\"].DecoratedSignature({\n        hint: hint,\n        signature: signature\n      }));\n    }\n\n    /**\n     * Returns a hash for this transaction, suitable for signing.\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return (0, _hashing.hash)(this.signatureBase());\n    }\n  }, {\n    key: \"signatureBase\",\n    value: function signatureBase() {\n      throw new Error('Implement in subclass');\n    }\n  }, {\n    key: \"toEnvelope\",\n    value: function toEnvelope() {\n      throw new Error('Implement in subclass');\n    }\n\n    /**\n     * Get the transaction envelope as a base64-encoded string\n     * @returns {string} XDR string\n     */\n  }, {\n    key: \"toXDR\",\n    value: function toXDR() {\n      return this.toEnvelope().toXDR().toString('base64');\n    }\n  }]);\n}();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15643, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/util/bignumber.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _bignumber = _interopRequireDefault(require(\"bignumber.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nvar BigNumber = _bignumber[\"default\"].clone();\nBigNumber.DEBUG = true; // gives us exceptions on bad constructor values\nvar _default = exports[\"default\"] = BigNumber;"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,OAAO,CAAC,UAAU,GAAG,KAAK;AAC1B,IAAI,aAAa;AACjB,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF,IAAI,YAAY,UAAU,CAAC,UAAU,CAAC,KAAK;AAC3C,UAAU,KAAK,GAAG,MAAM,gDAAgD;AACxE,IAAI,WAAW,OAAO,CAAC,UAAU,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15662, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/util/continued_fraction.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.best_r = best_r;\nvar _bignumber = _interopRequireDefault(require(\"./bignumber\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n// eslint-disable-next-line no-bitwise\nvar MAX_INT = (1 << 31 >>> 0) - 1;\n\n/**\n * Calculates and returns the best rational approximation of the given real number.\n * @private\n * @param {string|number|BigNumber} rawNumber Real number\n * @throws Error Throws `Error` when the best rational approximation cannot be found.\n * @returns {array} first element is n (numerator), second element is d (denominator)\n */\nfunction best_r(rawNumber) {\n  var number = new _bignumber[\"default\"](rawNumber);\n  var a;\n  var f;\n  var fractions = [[new _bignumber[\"default\"](0), new _bignumber[\"default\"](1)], [new _bignumber[\"default\"](1), new _bignumber[\"default\"](0)]];\n  var i = 2;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (number.gt(MAX_INT)) {\n      break;\n    }\n    a = number.integerValue(_bignumber[\"default\"].ROUND_FLOOR);\n    f = number.minus(a);\n    var h = a.times(fractions[i - 1][0]).plus(fractions[i - 2][0]);\n    var k = a.times(fractions[i - 1][1]).plus(fractions[i - 2][1]);\n    if (h.gt(MAX_INT) || k.gt(MAX_INT)) {\n      break;\n    }\n    fractions.push([h, k]);\n    if (f.eq(0)) {\n      break;\n    }\n    number = new _bignumber[\"default\"](1).div(f);\n    i += 1;\n  }\n  var _fractions = _slicedToArray(fractions[fractions.length - 1], 2),\n    n = _fractions[0],\n    d = _fractions[1];\n  if (n.isZero() || d.isZero()) {\n    throw new Error(\"Couldn't find approximation\");\n  }\n  return [n.toNumber(), d.toNumber()];\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,MAAM,GAAG;AACjB,IAAI,aAAa;AACjB,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF,SAAS,eAAe,CAAC,EAAE,CAAC;IAAI,OAAO,gBAAgB,MAAM,sBAAsB,GAAG,MAAM,4BAA4B,GAAG,MAAM;AAAoB;AACrJ,SAAS;IAAqB,MAAM,IAAI,UAAU;AAA8I;AAChM,SAAS,4BAA4B,CAAC,EAAE,CAAC;IAAI,IAAI,GAAG;QAAE,IAAI,YAAY,OAAO,GAAG,OAAO,kBAAkB,GAAG;QAAI,IAAI,IAAI,CAAA,CAAC,CAAA,EAAE,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;QAAI,OAAO,aAAa,KAAK,EAAE,WAAW,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,IAAI,GAAG,UAAU,KAAK,UAAU,IAAI,MAAM,IAAI,CAAC,KAAK,gBAAgB,KAAK,2CAA2C,IAAI,CAAC,KAAK,kBAAkB,GAAG,KAAK,KAAK;IAAG;AAAE;AACzX,SAAS,kBAAkB,CAAC,EAAE,CAAC;IAAI,CAAC,QAAQ,KAAK,IAAI,EAAE,MAAM,KAAK,CAAC,IAAI,EAAE,MAAM;IAAG,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,IAAI,IAAI,GAAG,IAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;IAAE,OAAO;AAAG;AACnJ,SAAS,sBAAsB,CAAC,EAAE,CAAC;IAAI,IAAI,IAAI,QAAQ,IAAI,OAAO,eAAe,OAAO,UAAU,CAAC,CAAC,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa;IAAE,IAAI,QAAQ,GAAG;QAAE,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,EAAE,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC;QAAG,IAAI;YAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,MAAM,GAAG;gBAAE,IAAI,OAAO,OAAO,GAAG;gBAAQ,IAAI,CAAC;YAAG,OAAO,MAAO,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,KAAK,CAAC,EAAE,IAAI,CAAC,EAAE,KAAK,GAAG,EAAE,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC;QAAI,EAAE,OAAO,GAAG;YAAE,IAAI,CAAC,GAAG,IAAI;QAAG,SAAU;YAAE,IAAI;gBAAE,IAAI,CAAC,KAAK,QAAQ,CAAC,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,IAAI,OAAO,OAAO,CAAC,GAAG;YAAQ,SAAU;gBAAE,IAAI,GAAG,MAAM;YAAG;QAAE;QAAE,OAAO;IAAG;AAAE;AACzhB,SAAS,gBAAgB,CAAC;IAAI,IAAI,MAAM,OAAO,CAAC,IAAI,OAAO;AAAG;AAC9D,sCAAsC;AACtC,IAAI,UAAU,CAAC,KAAK,OAAO,CAAC,IAAI;AAEhC;;;;;;CAMC,GACD,SAAS,OAAO,SAAS;IACvB,IAAI,SAAS,IAAI,UAAU,CAAC,UAAU,CAAC;IACvC,IAAI;IACJ,IAAI;IACJ,IAAI,YAAY;QAAC;YAAC,IAAI,UAAU,CAAC,UAAU,CAAC;YAAI,IAAI,UAAU,CAAC,UAAU,CAAC;SAAG;QAAE;YAAC,IAAI,UAAU,CAAC,UAAU,CAAC;YAAI,IAAI,UAAU,CAAC,UAAU,CAAC;SAAG;KAAC;IAC5I,IAAI,IAAI;IAER,iDAAiD;IACjD,MAAO,KAAM;QACX,IAAI,OAAO,EAAE,CAAC,UAAU;YACtB;QACF;QACA,IAAI,OAAO,YAAY,CAAC,UAAU,CAAC,UAAU,CAAC,WAAW;QACzD,IAAI,OAAO,KAAK,CAAC;QACjB,IAAI,IAAI,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,EAAE;QAC7D,IAAI,IAAI,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,EAAE;QAC7D,IAAI,EAAE,EAAE,CAAC,YAAY,EAAE,EAAE,CAAC,UAAU;YAClC;QACF;QACA,UAAU,IAAI,CAAC;YAAC;YAAG;SAAE;QACrB,IAAI,EAAE,EAAE,CAAC,IAAI;YACX;QACF;QACA,SAAS,IAAI,UAAU,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;QAC1C,KAAK;IACP;IACA,IAAI,aAAa,eAAe,SAAS,CAAC,UAAU,MAAM,GAAG,EAAE,EAAE,IAC/D,IAAI,UAAU,CAAC,EAAE,EACjB,IAAI,UAAU,CAAC,EAAE;IACnB,IAAI,EAAE,MAAM,MAAM,EAAE,MAAM,IAAI;QAC5B,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;QAAC,EAAE,QAAQ;QAAI,EAAE,QAAQ;KAAG;AACrC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15774, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/liquidity_pool_asset.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquidityPoolAsset = void 0;\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nvar _asset = require(\"./asset\");\nvar _get_liquidity_pool_id = require(\"./get_liquidity_pool_id\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * LiquidityPoolAsset class represents a liquidity pool trustline change.\n *\n * @constructor\n * @param {Asset} assetA – The first asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.\n * @param {Asset} assetB – The second asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.\n * @param {number} fee – The liquidity pool fee. For now the only fee supported is `30`.\n */\nvar LiquidityPoolAsset = exports.LiquidityPoolAsset = /*#__PURE__*/function () {\n  function LiquidityPoolAsset(assetA, assetB, fee) {\n    _classCallCheck(this, LiquidityPoolAsset);\n    if (!assetA || !(assetA instanceof _asset.Asset)) {\n      throw new Error('assetA is invalid');\n    }\n    if (!assetB || !(assetB instanceof _asset.Asset)) {\n      throw new Error('assetB is invalid');\n    }\n    if (_asset.Asset.compare(assetA, assetB) !== -1) {\n      throw new Error('Assets are not in lexicographic order');\n    }\n    if (!fee || fee !== _get_liquidity_pool_id.LiquidityPoolFeeV18) {\n      throw new Error('fee is invalid');\n    }\n    this.assetA = assetA;\n    this.assetB = assetB;\n    this.fee = fee;\n  }\n\n  /**\n   * Returns a liquidity pool asset object from its XDR ChangeTrustAsset object\n   * representation.\n   * @param {xdr.ChangeTrustAsset} ctAssetXdr - The asset XDR object.\n   * @returns {LiquidityPoolAsset}\n   */\n  return _createClass(LiquidityPoolAsset, [{\n    key: \"toXDRObject\",\n    value:\n    /**\n     * Returns the `xdr.ChangeTrustAsset` object for this liquidity pool asset.\n     *\n     * Note: To convert from an {@link Asset `Asset`} to `xdr.ChangeTrustAsset`\n     * please refer to the\n     * {@link Asset.toChangeTrustXDRObject `Asset.toChangeTrustXDRObject`} method.\n     *\n     * @returns {xdr.ChangeTrustAsset} XDR ChangeTrustAsset object.\n     */\n    function toXDRObject() {\n      var lpConstantProductParamsXdr = new _xdr[\"default\"].LiquidityPoolConstantProductParameters({\n        assetA: this.assetA.toXDRObject(),\n        assetB: this.assetB.toXDRObject(),\n        fee: this.fee\n      });\n      var lpParamsXdr = new _xdr[\"default\"].LiquidityPoolParameters('liquidityPoolConstantProduct', lpConstantProductParamsXdr);\n      return new _xdr[\"default\"].ChangeTrustAsset('assetTypePoolShare', lpParamsXdr);\n    }\n\n    /**\n     * @returns {LiquidityPoolParameters} Liquidity pool parameters.\n     */\n  }, {\n    key: \"getLiquidityPoolParameters\",\n    value: function getLiquidityPoolParameters() {\n      return _objectSpread(_objectSpread({}, this), {}, {\n        assetA: this.assetA,\n        assetB: this.assetB,\n        fee: this.fee\n      });\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {AssetType.liquidityPoolShares} asset type. Can only be `liquidity_pool_shares`.\n     */\n  }, {\n    key: \"getAssetType\",\n    value: function getAssetType() {\n      return 'liquidity_pool_shares';\n    }\n\n    /**\n     * @param {LiquidityPoolAsset} other the LiquidityPoolAsset to compare\n     * @returns {boolean} `true` if this asset equals the given asset.\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.assetA.equals(other.assetA) && this.assetB.equals(other.assetB) && this.fee === other.fee;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var poolId = (0, _get_liquidity_pool_id.getLiquidityPoolId)('constant_product', this.getLiquidityPoolParameters()).toString('hex');\n      return \"liquidity_pool:\".concat(poolId);\n    }\n  }], [{\n    key: \"fromOperation\",\n    value: function fromOperation(ctAssetXdr) {\n      var assetType = ctAssetXdr[\"switch\"]();\n      if (assetType === _xdr[\"default\"].AssetType.assetTypePoolShare()) {\n        var liquidityPoolParameters = ctAssetXdr.liquidityPool().constantProduct();\n        return new this(_asset.Asset.fromOperation(liquidityPoolParameters.assetA()), _asset.Asset.fromOperation(liquidityPoolParameters.assetB()), liquidityPoolParameters.fee());\n      }\n      throw new Error(\"Invalid asset type: \".concat(assetType.name));\n    }\n  }]);\n}();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15952, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/claimant.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Claimant = void 0;\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nvar _keypair = require(\"./keypair\");\nvar _strkey = require(\"./strkey\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Claimant class represents an xdr.Claimant\n *\n * The claim predicate is optional, it defaults to unconditional if none is specified.\n *\n * @constructor\n * @param {string} destination - The destination account ID.\n * @param {xdr.ClaimPredicate} [predicate] - The claim predicate.\n */\nvar Claimant = exports.Claimant = /*#__PURE__*/function () {\n  function Claimant(destination, predicate) {\n    _classCallCheck(this, Claimant);\n    if (destination && !_strkey.StrKey.isValidEd25519PublicKey(destination)) {\n      throw new Error('Destination is invalid');\n    }\n    this._destination = destination;\n    if (!predicate) {\n      this._predicate = _xdr[\"default\"].ClaimPredicate.claimPredicateUnconditional();\n    } else if (predicate instanceof _xdr[\"default\"].ClaimPredicate) {\n      this._predicate = predicate;\n    } else {\n      throw new Error('Predicate should be an xdr.ClaimPredicate');\n    }\n  }\n\n  /**\n   * Returns an unconditional claim predicate\n   * @Return {xdr.ClaimPredicate}\n   */\n  return _createClass(Claimant, [{\n    key: \"toXDRObject\",\n    value:\n    /**\n     * Returns the xdr object for this claimant.\n     * @returns {xdr.Claimant} XDR Claimant object\n     */\n    function toXDRObject() {\n      var claimant = new _xdr[\"default\"].ClaimantV0({\n        destination: _keypair.Keypair.fromPublicKey(this._destination).xdrAccountId(),\n        predicate: this._predicate\n      });\n      return _xdr[\"default\"].Claimant.claimantTypeV0(claimant);\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"destination\",\n    get: function get() {\n      return this._destination;\n    },\n    set: function set(value) {\n      throw new Error('Claimant is immutable');\n    }\n\n    /**\n     * @type {xdr.ClaimPredicate}\n     * @readonly\n     */\n  }, {\n    key: \"predicate\",\n    get: function get() {\n      return this._predicate;\n    },\n    set: function set(value) {\n      throw new Error('Claimant is immutable');\n    }\n  }], [{\n    key: \"predicateUnconditional\",\n    value: function predicateUnconditional() {\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateUnconditional();\n    }\n\n    /**\n     * Returns an `and` claim predicate\n     * @param {xdr.ClaimPredicate} left an xdr.ClaimPredicate\n     * @param {xdr.ClaimPredicate} right an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: \"predicateAnd\",\n    value: function predicateAnd(left, right) {\n      if (!(left instanceof _xdr[\"default\"].ClaimPredicate)) {\n        throw new Error('left Predicate should be an xdr.ClaimPredicate');\n      }\n      if (!(right instanceof _xdr[\"default\"].ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateAnd([left, right]);\n    }\n\n    /**\n     * Returns an `or` claim predicate\n     * @param {xdr.ClaimPredicate} left an xdr.ClaimPredicate\n     * @param {xdr.ClaimPredicate} right an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: \"predicateOr\",\n    value: function predicateOr(left, right) {\n      if (!(left instanceof _xdr[\"default\"].ClaimPredicate)) {\n        throw new Error('left Predicate should be an xdr.ClaimPredicate');\n      }\n      if (!(right instanceof _xdr[\"default\"].ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateOr([left, right]);\n    }\n\n    /**\n     * Returns a `not` claim predicate\n     * @param {xdr.ClaimPredicate} predicate an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: \"predicateNot\",\n    value: function predicateNot(predicate) {\n      if (!(predicate instanceof _xdr[\"default\"].ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateNot(predicate);\n    }\n\n    /**\n     * Returns a `BeforeAbsoluteTime` claim predicate\n     *\n     * This predicate will be fulfilled if the closing time of the ledger that\n     * includes the CreateClaimableBalance operation is less than this (absolute)\n     * Unix timestamp (expressed in seconds).\n     *\n     * @param {string} absBefore Unix epoch (in seconds) as a string\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: \"predicateBeforeAbsoluteTime\",\n    value: function predicateBeforeAbsoluteTime(absBefore) {\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateBeforeAbsoluteTime(_xdr[\"default\"].Int64.fromString(absBefore));\n    }\n\n    /**\n     * Returns a `BeforeRelativeTime` claim predicate\n     *\n     * This predicate will be fulfilled if the closing time of the ledger that\n     * includes the CreateClaimableBalance operation plus this relative time delta\n     * (in seconds) is less than the current time.\n     *\n     * @param {strings} seconds seconds since closeTime of the ledger in which the ClaimableBalanceEntry was created (as string)\n     * @Return {xdr.ClaimPredicate}\n     */\n  }, {\n    key: \"predicateBeforeRelativeTime\",\n    value: function predicateBeforeRelativeTime(seconds) {\n      return _xdr[\"default\"].ClaimPredicate.claimPredicateBeforeRelativeTime(_xdr[\"default\"].Int64.fromString(seconds));\n    }\n\n    /**\n     * Returns a claimant object from its XDR object representation.\n     * @param {xdr.Claimant} claimantXdr - The claimant xdr object.\n     * @returns {Claimant}\n     */\n  }, {\n    key: \"fromXDR\",\n    value: function fromXDR(claimantXdr) {\n      var value;\n      switch (claimantXdr[\"switch\"]()) {\n        case _xdr[\"default\"].ClaimantType.claimantTypeV0():\n          value = claimantXdr.v0();\n          return new this(_strkey.StrKey.encodeEd25519PublicKey(value.destination().ed25519()), value.predicate());\n        default:\n          throw new Error(\"Invalid claimant type: \".concat(claimantXdr[\"switch\"]().name));\n      }\n    }\n  }]);\n}();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16137, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/liquidity_pool_id.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquidityPoolId = void 0;\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * LiquidityPoolId class represents the asset referenced by a trustline to a\n * liquidity pool.\n *\n * @constructor\n * @param {string} liquidityPoolId - The ID of the liquidity pool in string 'hex'.\n */\nvar LiquidityPoolId = exports.LiquidityPoolId = /*#__PURE__*/function () {\n  function LiquidityPoolId(liquidityPoolId) {\n    _classCallCheck(this, LiquidityPoolId);\n    if (!liquidityPoolId) {\n      throw new Error('liquidityPoolId cannot be empty');\n    }\n    if (!/^[a-f0-9]{64}$/.test(liquidityPoolId)) {\n      throw new Error('Liquidity pool ID is not a valid hash');\n    }\n    this.liquidityPoolId = liquidityPoolId;\n  }\n\n  /**\n   * Returns a liquidity pool ID object from its xdr.TrustLineAsset representation.\n   * @param {xdr.TrustLineAsset} tlAssetXdr - The asset XDR object.\n   * @returns {LiquidityPoolId}\n   */\n  return _createClass(LiquidityPoolId, [{\n    key: \"toXDRObject\",\n    value:\n    /**\n     * Returns the `xdr.TrustLineAsset` object for this liquidity pool ID.\n     *\n     * Note: To convert from {@link Asset `Asset`} to `xdr.TrustLineAsset` please\n     * refer to the\n     * {@link Asset.toTrustLineXDRObject `Asset.toTrustLineXDRObject`} method.\n     *\n     * @returns {xdr.TrustLineAsset} XDR LiquidityPoolId object\n     */\n    function toXDRObject() {\n      var xdrPoolId = _xdr[\"default\"].PoolId.fromXDR(this.liquidityPoolId, 'hex');\n      return new _xdr[\"default\"].TrustLineAsset('assetTypePoolShare', xdrPoolId);\n    }\n\n    /**\n     * @returns {string} Liquidity pool ID.\n     */\n  }, {\n    key: \"getLiquidityPoolId\",\n    value: function getLiquidityPoolId() {\n      return String(this.liquidityPoolId);\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {AssetType.liquidityPoolShares} asset type. Can only be `liquidity_pool_shares`.\n     */\n  }, {\n    key: \"getAssetType\",\n    value: function getAssetType() {\n      return 'liquidity_pool_shares';\n    }\n\n    /**\n     * @param {LiquidityPoolId} asset LiquidityPoolId to compare.\n     * @returns {boolean} `true` if this asset equals the given asset.\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(asset) {\n      return this.liquidityPoolId === asset.getLiquidityPoolId();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"liquidity_pool:\".concat(this.liquidityPoolId);\n    }\n  }], [{\n    key: \"fromOperation\",\n    value: function fromOperation(tlAssetXdr) {\n      var assetType = tlAssetXdr[\"switch\"]();\n      if (assetType === _xdr[\"default\"].AssetType.assetTypePoolShare()) {\n        var liquidityPoolId = tlAssetXdr.liquidityPoolId().toString('hex');\n        return new this(liquidityPoolId);\n      }\n      throw new Error(\"Invalid asset type: \".concat(assetType.name));\n    }\n  }]);\n}();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16264, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/manage_sell_offer.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.manageSellOffer = manageSellOffer;\nvar _jsXdr = require(\"@stellar/js-xdr\");\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Returns a XDR ManageSellOfferOp. A \"manage sell offer\" operation creates, updates, or\n * deletes an offer.\n * @function\n * @alias Operation.manageSellOffer\n * @param {object} opts Options object\n * @param {Asset} opts.selling - What you're selling.\n * @param {Asset} opts.buying - What you're buying.\n * @param {string} opts.amount - The total amount you're selling. If 0, deletes the offer.\n * @param {number|string|BigNumber|Object} opts.price - Price of 1 unit of `selling` in terms of `buying`.\n * @param {number} opts.price.n - If `opts.price` is an object: the price numerator\n * @param {number} opts.price.d - If `opts.price` is an object: the price denominator\n * @param {number|string} [opts.offerId ] - If `0`, will create a new offer (default). Otherwise, edits an exisiting offer.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n * @throws {Error} Throws `Error` when the best rational approximation of `price` cannot be found.\n * @returns {xdr.ManageSellOfferOp} Manage Sell Offer operation\n */\nfunction manageSellOffer(opts) {\n  var attributes = {};\n  attributes.selling = opts.selling.toXDRObject();\n  attributes.buying = opts.buying.toXDRObject();\n  if (!this.isValidAmount(opts.amount, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n  if (opts.price === undefined) {\n    throw new TypeError('price argument is required');\n  }\n  attributes.price = this._toXDRPrice(opts.price);\n  if (opts.offerId !== undefined) {\n    opts.offerId = opts.offerId.toString();\n  } else {\n    opts.offerId = '0';\n  }\n  attributes.offerId = _jsXdr.Hyper.fromString(opts.offerId);\n  var manageSellOfferOp = new _xdr[\"default\"].ManageSellOfferOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.manageSellOffer(manageSellOfferOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,eAAe,GAAG;AAC1B,IAAI;AACJ,IAAI,OAAO;AACX,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;;;;;CAgBC,GACD,SAAS,gBAAgB,IAAI;IAC3B,IAAI,aAAa,CAAC;IAClB,WAAW,OAAO,GAAG,KAAK,OAAO,CAAC,WAAW;IAC7C,WAAW,MAAM,GAAG,KAAK,MAAM,CAAC,WAAW;IAC3C,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,MAAM,EAAE,OAAO;QAC1C,MAAM,IAAI,UAAU,IAAI,CAAC,gCAAgC,CAAC;IAC5D;IACA,WAAW,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,MAAM;IACjD,IAAI,KAAK,KAAK,KAAK,WAAW;QAC5B,MAAM,IAAI,UAAU;IACtB;IACA,WAAW,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,KAAK;IAC9C,IAAI,KAAK,OAAO,KAAK,WAAW;QAC9B,KAAK,OAAO,GAAG,KAAK,OAAO,CAAC,QAAQ;IACtC,OAAO;QACL,KAAK,OAAO,GAAG;IACjB;IACA,WAAW,OAAO,GAAG,OAAO,KAAK,CAAC,UAAU,CAAC,KAAK,OAAO;IACzD,IAAI,oBAAoB,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC;IAC9D,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,eAAe,CAAC;IAClE,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16321, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/create_passive_sell_offer.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPassiveSellOffer = createPassiveSellOffer;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Returns a XDR CreatePasiveSellOfferOp. A \"create passive offer\" operation creates an\n * offer that won't consume a counter offer that exactly matches this offer. This is\n * useful for offers just used as 1:1 exchanges for path payments. Use manage offer\n * to manage this offer after using this operation to create it.\n * @function\n * @alias Operation.createPassiveSellOffer\n * @param {object} opts Options object\n * @param {Asset} opts.selling - What you're selling.\n * @param {Asset} opts.buying - What you're buying.\n * @param {string} opts.amount - The total amount you're selling. If 0, deletes the offer.\n * @param {number|string|BigNumber|Object} opts.price - Price of 1 unit of `selling` in terms of `buying`.\n * @param {number} opts.price.n - If `opts.price` is an object: the price numerator\n * @param {number} opts.price.d - If `opts.price` is an object: the price denominator\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n * @throws {Error} Throws `Error` when the best rational approximation of `price` cannot be found.\n * @returns {xdr.CreatePassiveSellOfferOp} Create Passive Sell Offer operation\n */\nfunction createPassiveSellOffer(opts) {\n  var attributes = {};\n  attributes.selling = opts.selling.toXDRObject();\n  attributes.buying = opts.buying.toXDRObject();\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n  if (opts.price === undefined) {\n    throw new TypeError('price argument is required');\n  }\n  attributes.price = this._toXDRPrice(opts.price);\n  var createPassiveSellOfferOp = new _xdr[\"default\"].CreatePassiveSellOfferOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.createPassiveSellOffer(createPassiveSellOfferOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,sBAAsB,GAAG;AACjC,IAAI,OAAO;AACX,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;;;;;;CAiBC,GACD,SAAS,uBAAuB,IAAI;IAClC,IAAI,aAAa,CAAC;IAClB,WAAW,OAAO,GAAG,KAAK,OAAO,CAAC,WAAW;IAC7C,WAAW,MAAM,GAAG,KAAK,MAAM,CAAC,WAAW;IAC3C,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,MAAM,GAAG;QACpC,MAAM,IAAI,UAAU,IAAI,CAAC,gCAAgC,CAAC;IAC5D;IACA,WAAW,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,MAAM;IACjD,IAAI,KAAK,KAAK,KAAK,WAAW;QAC5B,MAAM,IAAI,UAAU;IACtB;IACA,WAAW,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,KAAK;IAC9C,IAAI,2BAA2B,IAAI,IAAI,CAAC,UAAU,CAAC,wBAAwB,CAAC;IAC5E,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,sBAAsB,CAAC;IACzE,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16372, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/util/decode_encode_muxed_account.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeAddressToMuxedAccount = decodeAddressToMuxedAccount;\nexports.encodeMuxedAccount = encodeMuxedAccount;\nexports.encodeMuxedAccountToAddress = encodeMuxedAccountToAddress;\nexports.extractBaseAddress = extractBaseAddress;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nvar _strkey = require(\"../strkey\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Converts a Stellar address (in G... or M... form) to an `xdr.MuxedAccount`\n * structure, using the ed25519 representation when possible.\n *\n * This supports full muxed accounts, where an `M...` address will resolve to\n * both its underlying `G...` address and an integer ID.\n *\n * @param   {string}  address   G... or M... address to encode into XDR\n * @returns {xdr.MuxedAccount}  a muxed account object for this address string\n */\nfunction decodeAddressToMuxedAccount(address) {\n  if (_strkey.StrKey.isValidMed25519PublicKey(address)) {\n    return _decodeAddressFullyToMuxedAccount(address);\n  }\n  return _xdr[\"default\"].MuxedAccount.keyTypeEd25519(_strkey.StrKey.decodeEd25519PublicKey(address));\n}\n\n/**\n * Converts an xdr.MuxedAccount to its StrKey representation.\n *\n * This returns its \"M...\" string representation if there is a muxing ID within\n * the object and returns the \"G...\" representation otherwise.\n *\n * @param   {xdr.MuxedAccount} muxedAccount   Raw account to stringify\n * @returns {string} Stringified G... (corresponding to the underlying pubkey)\n *     or M... address (corresponding to both the key and the muxed ID)\n *\n * @see https://stellar.org/protocol/sep-23\n */\nfunction encodeMuxedAccountToAddress(muxedAccount) {\n  if (muxedAccount[\"switch\"]().value === _xdr[\"default\"].CryptoKeyType.keyTypeMuxedEd25519().value) {\n    return _encodeMuxedAccountFullyToAddress(muxedAccount);\n  }\n  return _strkey.StrKey.encodeEd25519PublicKey(muxedAccount.ed25519());\n}\n\n/**\n * Transform a Stellar address (G...) and an ID into its XDR representation.\n *\n * @param  {string} address   - a Stellar G... address\n * @param  {string} id        - a Uint64 ID represented as a string\n *\n * @return {xdr.MuxedAccount} - XDR representation of the above muxed account\n */\nfunction encodeMuxedAccount(address, id) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(address)) {\n    throw new Error('address should be a Stellar account ID (G...)');\n  }\n  if (typeof id !== 'string') {\n    throw new Error('id should be a string representing a number (uint64)');\n  }\n  return _xdr[\"default\"].MuxedAccount.keyTypeMuxedEd25519(new _xdr[\"default\"].MuxedAccountMed25519({\n    id: _xdr[\"default\"].Uint64.fromString(id),\n    ed25519: _strkey.StrKey.decodeEd25519PublicKey(address)\n  }));\n}\n\n/**\n * Extracts the underlying base (G...) address from an M-address.\n * @param  {string} address   an account address (either M... or G...)\n * @return {string} a Stellar public key address (G...)\n */\nfunction extractBaseAddress(address) {\n  if (_strkey.StrKey.isValidEd25519PublicKey(address)) {\n    return address;\n  }\n  if (!_strkey.StrKey.isValidMed25519PublicKey(address)) {\n    throw new TypeError(\"expected muxed account (M...), got \".concat(address));\n  }\n  var muxedAccount = decodeAddressToMuxedAccount(address);\n  return _strkey.StrKey.encodeEd25519PublicKey(muxedAccount.med25519().ed25519());\n}\n\n// Decodes an \"M...\" account ID into its MuxedAccount object representation.\nfunction _decodeAddressFullyToMuxedAccount(address) {\n  var rawBytes = _strkey.StrKey.decodeMed25519PublicKey(address);\n\n  // Decoding M... addresses cannot be done through a simple\n  // MuxedAccountMed25519.fromXDR() call, because the definition is:\n  //\n  //    constructor(attributes: { id: Uint64; ed25519: Buffer });\n  //\n  // Note the ID is the first attribute. However, the ID comes *last* in the\n  // stringified (base32-encoded) address itself (it's the last 8-byte suffix).\n  // The `fromXDR()` method interprets bytes in order, so we need to parse out\n  // the raw binary into its requisite parts, i.e. use the MuxedAccountMed25519\n  // constructor directly.\n  //\n  // Refer to https://github.com/stellar/go/blob/master/xdr/muxed_account.go#L26\n  // for the Golang implementation of the M... parsing.\n  return _xdr[\"default\"].MuxedAccount.keyTypeMuxedEd25519(new _xdr[\"default\"].MuxedAccountMed25519({\n    id: _xdr[\"default\"].Uint64.fromXDR(rawBytes.subarray(-8)),\n    ed25519: rawBytes.subarray(0, -8)\n  }));\n}\n\n// Converts an xdr.MuxedAccount into its *true* \"M...\" string representation.\nfunction _encodeMuxedAccountFullyToAddress(muxedAccount) {\n  if (muxedAccount[\"switch\"]() === _xdr[\"default\"].CryptoKeyType.keyTypeEd25519()) {\n    return encodeMuxedAccountToAddress(muxedAccount);\n  }\n  var muxed = muxedAccount.med25519();\n  return _strkey.StrKey.encodeMed25519PublicKey(Buffer.concat([muxed.ed25519(), muxed.id().toXDR('raw')]));\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,2BAA2B,GAAG;AACtC,QAAQ,kBAAkB,GAAG;AAC7B,QAAQ,2BAA2B,GAAG;AACtC,QAAQ,kBAAkB,GAAG;AAC7B,IAAI,OAAO;AACX,IAAI;AACJ,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;CASC,GACD,SAAS,4BAA4B,OAAO;IAC1C,IAAI,QAAQ,MAAM,CAAC,wBAAwB,CAAC,UAAU;QACpD,OAAO,kCAAkC;IAC3C;IACA,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,cAAc,CAAC,QAAQ,MAAM,CAAC,sBAAsB,CAAC;AAC3F;AAEA;;;;;;;;;;;CAWC,GACD,SAAS,4BAA4B,YAAY;IAC/C,IAAI,YAAY,CAAC,SAAS,GAAG,KAAK,KAAK,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,mBAAmB,GAAG,KAAK,EAAE;QAChG,OAAO,kCAAkC;IAC3C;IACA,OAAO,QAAQ,MAAM,CAAC,sBAAsB,CAAC,aAAa,OAAO;AACnE;AAEA;;;;;;;CAOC,GACD,SAAS,mBAAmB,OAAO,EAAE,EAAE;IACrC,IAAI,CAAC,QAAQ,MAAM,CAAC,uBAAuB,CAAC,UAAU;QACpD,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,OAAO,OAAO,UAAU;QAC1B,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,mBAAmB,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC;QAC/F,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC;QACtC,SAAS,QAAQ,MAAM,CAAC,sBAAsB,CAAC;IACjD;AACF;AAEA;;;;CAIC,GACD,SAAS,mBAAmB,OAAO;IACjC,IAAI,QAAQ,MAAM,CAAC,uBAAuB,CAAC,UAAU;QACnD,OAAO;IACT;IACA,IAAI,CAAC,QAAQ,MAAM,CAAC,wBAAwB,CAAC,UAAU;QACrD,MAAM,IAAI,UAAU,sCAAsC,MAAM,CAAC;IACnE;IACA,IAAI,eAAe,4BAA4B;IAC/C,OAAO,QAAQ,MAAM,CAAC,sBAAsB,CAAC,aAAa,QAAQ,GAAG,OAAO;AAC9E;AAEA,4EAA4E;AAC5E,SAAS,kCAAkC,OAAO;IAChD,IAAI,WAAW,QAAQ,MAAM,CAAC,uBAAuB,CAAC;IAEtD,0DAA0D;IAC1D,kEAAkE;IAClE,EAAE;IACF,+DAA+D;IAC/D,EAAE;IACF,0EAA0E;IAC1E,6EAA6E;IAC7E,4EAA4E;IAC5E,6EAA6E;IAC7E,wBAAwB;IACxB,EAAE;IACF,8EAA8E;IAC9E,qDAAqD;IACrD,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,mBAAmB,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC;QAC/F,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,QAAQ,CAAC,CAAC;QACtD,SAAS,SAAS,QAAQ,CAAC,GAAG,CAAC;IACjC;AACF;AAEA,6EAA6E;AAC7E,SAAS,kCAAkC,YAAY;IACrD,IAAI,YAAY,CAAC,SAAS,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,cAAc,IAAI;QAC/E,OAAO,4BAA4B;IACrC;IACA,IAAI,QAAQ,aAAa,QAAQ;IACjC,OAAO,QAAQ,MAAM,CAAC,uBAAuB,CAAC,OAAO,MAAM,CAAC;QAAC,MAAM,OAAO;QAAI,MAAM,EAAE,GAAG,KAAK,CAAC;KAAO;AACxG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16489, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/account_merge.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accountMerge = accountMerge;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nvar _decode_encode_muxed_account = require(\"../util/decode_encode_muxed_account\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Transfers native balance to destination account.\n *\n * @function\n * @alias Operation.accountMerge\n *\n * @param {object} opts - options object\n * @param {string} opts.destination - destination to merge the source account into\n * @param {string} [opts.source]    - operation source account (defaults to\n *     transaction source)\n *\n * @returns {xdr.Operation} an Account Merge operation (xdr.AccountMergeOp)\n */\nfunction accountMerge(opts) {\n  var opAttributes = {};\n  try {\n    opAttributes.body = _xdr[\"default\"].OperationBody.accountMerge((0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination));\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,YAAY,GAAG;AACvB,IAAI,OAAO;AACX,IAAI;AACJ,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;CAYC,GACD,SAAS,aAAa,IAAI;IACxB,IAAI,eAAe,CAAC;IACpB,IAAI;QACF,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,GAAG,6BAA6B,2BAA2B,EAAE,KAAK,WAAW;IAC/I,EAAE,OAAO,GAAG;QACV,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16528, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/allow_trust.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.allowTrust = allowTrust;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nvar _keypair = require(\"../keypair\");\nvar _strkey = require(\"../strkey\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @deprecated since v5.0\n *\n * Returns an XDR AllowTrustOp. An \"allow trust\" operation authorizes another\n * account to hold your account's credit for a given asset.\n *\n * @function\n * @alias Operation.allowTrust\n *\n * @param {object} opts Options object\n * @param {string} opts.trustor - The trusting account (the one being authorized)\n * @param {string} opts.assetCode - The asset code being authorized.\n * @param {(0|1|2)} opts.authorize - `1` to authorize, `2` to authorize to maintain liabilities, and `0` to deauthorize.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n *\n * @returns {xdr.AllowTrustOp} Allow Trust operation\n */\nfunction allowTrust(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.trustor)) {\n    throw new Error('trustor is invalid');\n  }\n  var attributes = {};\n  attributes.trustor = _keypair.Keypair.fromPublicKey(opts.trustor).xdrAccountId();\n  if (opts.assetCode.length <= 4) {\n    var code = opts.assetCode.padEnd(4, '\\0');\n    attributes.asset = _xdr[\"default\"].AssetCode.assetTypeCreditAlphanum4(code);\n  } else if (opts.assetCode.length <= 12) {\n    var _code = opts.assetCode.padEnd(12, '\\0');\n    attributes.asset = _xdr[\"default\"].AssetCode.assetTypeCreditAlphanum12(_code);\n  } else {\n    throw new Error('Asset code must be 12 characters at max.');\n  }\n  if (typeof opts.authorize === 'boolean') {\n    if (opts.authorize) {\n      attributes.authorize = _xdr[\"default\"].TrustLineFlags.authorizedFlag().value;\n    } else {\n      attributes.authorize = 0;\n    }\n  } else {\n    attributes.authorize = opts.authorize;\n  }\n  var allowTrustOp = new _xdr[\"default\"].AllowTrustOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.allowTrust(allowTrustOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,UAAU,GAAG;AACrB,IAAI,OAAO;AACX,IAAI;AACJ,IAAI;AACJ,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;;;;;CAgBC,GACD,SAAS,WAAW,IAAI;IACtB,IAAI,CAAC,QAAQ,MAAM,CAAC,uBAAuB,CAAC,KAAK,OAAO,GAAG;QACzD,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,aAAa,CAAC;IAClB,WAAW,OAAO,GAAG,SAAS,OAAO,CAAC,aAAa,CAAC,KAAK,OAAO,EAAE,YAAY;IAC9E,IAAI,KAAK,SAAS,CAAC,MAAM,IAAI,GAAG;QAC9B,IAAI,OAAO,KAAK,SAAS,CAAC,MAAM,CAAC,GAAG;QACpC,WAAW,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,wBAAwB,CAAC;IACxE,OAAO,IAAI,KAAK,SAAS,CAAC,MAAM,IAAI,IAAI;QACtC,IAAI,QAAQ,KAAK,SAAS,CAAC,MAAM,CAAC,IAAI;QACtC,WAAW,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,yBAAyB,CAAC;IACzE,OAAO;QACL,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,OAAO,KAAK,SAAS,KAAK,WAAW;QACvC,IAAI,KAAK,SAAS,EAAE;YAClB,WAAW,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,GAAG,KAAK;QAC9E,OAAO;YACL,WAAW,SAAS,GAAG;QACzB;IACF,OAAO;QACL,WAAW,SAAS,GAAG,KAAK,SAAS;IACvC;IACA,IAAI,eAAe,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC;IACpD,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,UAAU,CAAC;IAC7D,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16592, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/bump_sequence.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bumpSequence = bumpSequence;\nvar _jsXdr = require(\"@stellar/js-xdr\");\nvar _bignumber = _interopRequireDefault(require(\"../util/bignumber\"));\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * This operation bumps sequence number.\n * @function\n * @alias Operation.bumpSequence\n * @param {object} opts Options object\n * @param {string} opts.bumpTo - Sequence number to bump to.\n * @param {string} [opts.source] - The optional source account.\n * @returns {xdr.BumpSequenceOp} Operation\n */\nfunction bumpSequence(opts) {\n  var attributes = {};\n  if (typeof opts.bumpTo !== 'string') {\n    throw new Error('bumpTo must be a string');\n  }\n  try {\n    // eslint-disable-next-line no-new\n    new _bignumber[\"default\"](opts.bumpTo);\n  } catch (e) {\n    throw new Error('bumpTo must be a stringified number');\n  }\n  attributes.bumpTo = _jsXdr.Hyper.fromString(opts.bumpTo);\n  var bumpSequenceOp = new _xdr[\"default\"].BumpSequenceOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.bumpSequence(bumpSequenceOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,YAAY,GAAG;AACvB,IAAI;AACJ,IAAI,aAAa;AACjB,IAAI,OAAO;AACX,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;CAQC,GACD,SAAS,aAAa,IAAI;IACxB,IAAI,aAAa,CAAC;IAClB,IAAI,OAAO,KAAK,MAAM,KAAK,UAAU;QACnC,MAAM,IAAI,MAAM;IAClB;IACA,IAAI;QACF,kCAAkC;QAClC,IAAI,UAAU,CAAC,UAAU,CAAC,KAAK,MAAM;IACvC,EAAE,OAAO,GAAG;QACV,MAAM,IAAI,MAAM;IAClB;IACA,WAAW,MAAM,GAAG,OAAO,KAAK,CAAC,UAAU,CAAC,KAAK,MAAM;IACvD,IAAI,iBAAiB,IAAI,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC;IACxD,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,YAAY,CAAC;IAC/D,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16636, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/change_trust.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.changeTrust = changeTrust;\nvar _jsXdr = require(\"@stellar/js-xdr\");\nvar _bignumber = _interopRequireDefault(require(\"../util/bignumber\"));\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nvar _asset = require(\"../asset\");\nvar _liquidity_pool_asset = require(\"../liquidity_pool_asset\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nvar MAX_INT64 = '9223372036854775807';\n\n/**\n * Returns an XDR ChangeTrustOp. A \"change trust\" operation adds, removes, or updates a\n * trust line for a given asset from the source account to another.\n * @function\n * @alias Operation.changeTrust\n * @param {object} opts Options object\n * @param {Asset | LiquidityPoolAsset} opts.asset - The asset for the trust line.\n * @param {string} [opts.limit] - The limit for the asset, defaults to max int64.\n *                                If the limit is set to \"0\" it deletes the trustline.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n * @returns {xdr.ChangeTrustOp} Change Trust operation\n */\nfunction changeTrust(opts) {\n  var attributes = {};\n  if (opts.asset instanceof _asset.Asset) {\n    attributes.line = opts.asset.toChangeTrustXDRObject();\n  } else if (opts.asset instanceof _liquidity_pool_asset.LiquidityPoolAsset) {\n    attributes.line = opts.asset.toXDRObject();\n  } else {\n    throw new TypeError('asset must be Asset or LiquidityPoolAsset');\n  }\n  if (opts.limit !== undefined && !this.isValidAmount(opts.limit, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('limit'));\n  }\n  if (opts.limit) {\n    attributes.limit = this._toXDRAmount(opts.limit);\n  } else {\n    attributes.limit = _jsXdr.Hyper.fromString(new _bignumber[\"default\"](MAX_INT64).toString());\n  }\n  if (opts.source) {\n    attributes.source = opts.source.masterKeypair;\n  }\n  var changeTrustOP = new _xdr[\"default\"].ChangeTrustOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.changeTrust(changeTrustOP);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,WAAW,GAAG;AACtB,IAAI;AACJ,IAAI,aAAa;AACjB,IAAI,OAAO;AACX,IAAI;AACJ,IAAI;AACJ,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF,IAAI,YAAY;AAEhB;;;;;;;;;;;CAWC,GACD,SAAS,YAAY,IAAI;IACvB,IAAI,aAAa,CAAC;IAClB,IAAI,KAAK,KAAK,YAAY,OAAO,KAAK,EAAE;QACtC,WAAW,IAAI,GAAG,KAAK,KAAK,CAAC,sBAAsB;IACrD,OAAO,IAAI,KAAK,KAAK,YAAY,sBAAsB,kBAAkB,EAAE;QACzE,WAAW,IAAI,GAAG,KAAK,KAAK,CAAC,WAAW;IAC1C,OAAO;QACL,MAAM,IAAI,UAAU;IACtB;IACA,IAAI,KAAK,KAAK,KAAK,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,KAAK,EAAE,OAAO;QACrE,MAAM,IAAI,UAAU,IAAI,CAAC,gCAAgC,CAAC;IAC5D;IACA,IAAI,KAAK,KAAK,EAAE;QACd,WAAW,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,KAAK;IACjD,OAAO;QACL,WAAW,KAAK,GAAG,OAAO,KAAK,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,UAAU,CAAC,WAAW,QAAQ;IAC1F;IACA,IAAI,KAAK,MAAM,EAAE;QACf,WAAW,MAAM,GAAG,KAAK,MAAM,CAAC,aAAa;IAC/C;IACA,IAAI,gBAAgB,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;IACtD,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,WAAW,CAAC;IAC9D,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16694, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/create_account.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAccount = createAccount;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nvar _keypair = require(\"../keypair\");\nvar _strkey = require(\"../strkey\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create and fund a non existent account.\n * @function\n * @alias Operation.createAccount\n * @param {object} opts Options object\n * @param {string} opts.destination - Destination account ID to create an account for.\n * @param {string} opts.startingBalance - Amount in XLM the account should be funded for. Must be greater\n *                                   than the [reserve balance amount](https://developers.stellar.org/docs/glossary/fees/).\n * @param {string} [opts.source] - The source account for the payment. Defaults to the transaction's source account.\n * @returns {xdr.CreateAccountOp} Create account operation\n */\nfunction createAccount(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.destination)) {\n    throw new Error('destination is invalid');\n  }\n  if (!this.isValidAmount(opts.startingBalance, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('startingBalance'));\n  }\n  var attributes = {};\n  attributes.destination = _keypair.Keypair.fromPublicKey(opts.destination).xdrAccountId();\n  attributes.startingBalance = this._toXDRAmount(opts.startingBalance);\n  var createAccountOp = new _xdr[\"default\"].CreateAccountOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.createAccount(createAccountOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,aAAa,GAAG;AACxB,IAAI,OAAO;AACX,IAAI;AACJ,IAAI;AACJ,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;CAUC,GACD,SAAS,cAAc,IAAI;IACzB,IAAI,CAAC,QAAQ,MAAM,CAAC,uBAAuB,CAAC,KAAK,WAAW,GAAG;QAC7D,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,eAAe,EAAE,OAAO;QACnD,MAAM,IAAI,UAAU,IAAI,CAAC,gCAAgC,CAAC;IAC5D;IACA,IAAI,aAAa,CAAC;IAClB,WAAW,WAAW,GAAG,SAAS,OAAO,CAAC,aAAa,CAAC,KAAK,WAAW,EAAE,YAAY;IACtF,WAAW,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,eAAe;IACnE,IAAI,kBAAkB,IAAI,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC;IAC1D,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC;IAChE,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16738, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/create_claimable_balance.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createClaimableBalance = createClaimableBalance;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nvar _asset = require(\"../asset\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create a new claimable balance operation.\n *\n * @function\n * @alias Operation.createClaimableBalance\n *\n * @param {object} opts Options object\n * @param {Asset} opts.asset - The asset for the claimable balance.\n * @param {string} opts.amount - Amount.\n * @param {Claimant[]} opts.claimants - An array of Claimants\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation} Create claimable balance operation\n *\n * @example\n * const asset = new Asset(\n *   'USD',\n *   'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n * );\n * const amount = '100.0000000';\n * const claimants = [\n *   new Claimant(\n *     'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ',\n *      Claimant.predicateBeforeAbsoluteTime(\"4102444800000\")\n *   )\n * ];\n *\n * const op = Operation.createClaimableBalance({\n *   asset,\n *   amount,\n *   claimants\n * });\n *\n */\nfunction createClaimableBalance(opts) {\n  if (!(opts.asset instanceof _asset.Asset)) {\n    throw new Error('must provide an asset for create claimable balance operation');\n  }\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  if (!Array.isArray(opts.claimants) || opts.claimants.length === 0) {\n    throw new Error('must provide at least one claimant');\n  }\n  var attributes = {};\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.amount = this._toXDRAmount(opts.amount);\n  attributes.claimants = Object.values(opts.claimants).map(function (c) {\n    return c.toXDRObject();\n  });\n  var createClaimableBalanceOp = new _xdr[\"default\"].CreateClaimableBalanceOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.createClaimableBalance(createClaimableBalanceOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,sBAAsB,GAAG;AACjC,IAAI,OAAO;AACX,IAAI;AACJ,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiCC,GACD,SAAS,uBAAuB,IAAI;IAClC,IAAI,CAAC,CAAC,KAAK,KAAK,YAAY,OAAO,KAAK,GAAG;QACzC,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,MAAM,GAAG;QACpC,MAAM,IAAI,UAAU,IAAI,CAAC,gCAAgC,CAAC;IAC5D;IACA,IAAI,CAAC,MAAM,OAAO,CAAC,KAAK,SAAS,KAAK,KAAK,SAAS,CAAC,MAAM,KAAK,GAAG;QACjE,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,aAAa,CAAC;IAClB,WAAW,KAAK,GAAG,KAAK,KAAK,CAAC,WAAW;IACzC,WAAW,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,MAAM;IACjD,WAAW,SAAS,GAAG,OAAO,MAAM,CAAC,KAAK,SAAS,EAAE,GAAG,CAAC,SAAU,CAAC;QAClE,OAAO,EAAE,WAAW;IACtB;IACA,IAAI,2BAA2B,IAAI,IAAI,CAAC,UAAU,CAAC,wBAAwB,CAAC;IAC5E,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,sBAAsB,CAAC;IACzE,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16810, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/claim_claimable_balance.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.claimClaimableBalance = claimClaimableBalance;\nexports.validateClaimableBalanceId = validateClaimableBalanceId;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create a new claim claimable balance operation.\n * @function\n * @alias Operation.claimClaimableBalance\n * @param {object} opts Options object\n * @param {string} opts.balanceId - The claimable balance id to be claimed.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} Claim claimable balance operation\n *\n * @example\n * const op = Operation.claimClaimableBalance({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n */\nfunction claimClaimableBalance() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  validateClaimableBalanceId(opts.balanceId);\n  var attributes = {};\n  attributes.balanceId = _xdr[\"default\"].ClaimableBalanceId.fromXDR(opts.balanceId, 'hex');\n  var claimClaimableBalanceOp = new _xdr[\"default\"].ClaimClaimableBalanceOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.claimClaimableBalance(claimClaimableBalanceOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\nfunction validateClaimableBalanceId(balanceId) {\n  if (typeof balanceId !== 'string' || balanceId.length !== 8 + 64 /* 8b discriminant + 64b string */) {\n    throw new Error('must provide a valid claimable balance id');\n  }\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,qBAAqB,GAAG;AAChC,QAAQ,0BAA0B,GAAG;AACrC,IAAI,OAAO;AACX,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;;;CAcC,GACD,SAAS;IACP,IAAI,OAAO,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAChF,2BAA2B,KAAK,SAAS;IACzC,IAAI,aAAa,CAAC;IAClB,WAAW,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC,KAAK,SAAS,EAAE;IAClF,IAAI,0BAA0B,IAAI,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC;IAC1E,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,qBAAqB,CAAC;IACxE,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC;AACA,SAAS,2BAA2B,SAAS;IAC3C,IAAI,OAAO,cAAc,YAAY,UAAU,MAAM,KAAK,IAAI,GAAG,gCAAgC,KAAI;QACnG,MAAM,IAAI,MAAM;IAClB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16857, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/clawback_claimable_balance.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clawbackClaimableBalance = clawbackClaimableBalance;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nvar _claim_claimable_balance = require(\"./claim_claimable_balance\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a clawback operation for a claimable balance.\n *\n * @function\n * @alias Operation.clawbackClaimableBalance\n * @param {object} opts - Options object\n * @param {string} opts.balanceId - The claimable balance ID to be clawed back.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @return {xdr.ClawbackClaimableBalanceOp}\n *\n * @example\n * const op = Operation.clawbackClaimableBalance({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n * @link https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#clawback-claimable-balance-operation\n */\nfunction clawbackClaimableBalance() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  (0, _claim_claimable_balance.validateClaimableBalanceId)(opts.balanceId);\n  var attributes = {\n    balanceId: _xdr[\"default\"].ClaimableBalanceId.fromXDR(opts.balanceId, 'hex')\n  };\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.clawbackClaimableBalance(new _xdr[\"default\"].ClawbackClaimableBalanceOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,wBAAwB,GAAG;AACnC,IAAI,OAAO;AACX,IAAI;AACJ,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;;;;;;CAiBC,GACD,SAAS;IACP,IAAI,OAAO,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAChF,CAAC,GAAG,yBAAyB,0BAA0B,EAAE,KAAK,SAAS;IACvE,IAAI,aAAa;QACf,WAAW,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC,KAAK,SAAS,EAAE;IACxE;IACA,IAAI,eAAe;QACjB,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,wBAAwB,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,0BAA0B,CAAC;IAC9G;IACA,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16903, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/inflation.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inflation = inflation;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * This operation generates the inflation.\n * @function\n * @alias Operation.inflation\n * @param {object} [opts] Options object\n * @param {string} [opts.source] - The optional source account.\n * @returns {xdr.InflationOp} Inflation operation\n */\nfunction inflation() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.inflation();\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,SAAS,GAAG;AACpB,IAAI,OAAO;AACX,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;CAOC,GACD,SAAS;IACP,IAAI,OAAO,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAChF,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS;IAC3D,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16933, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/manage_data.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.manageData = manageData;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * This operation adds data entry to the ledger.\n * @function\n * @alias Operation.manageData\n * @param {object} opts Options object\n * @param {string} opts.name - The name of the data entry.\n * @param {string|Buffer} opts.value - The value of the data entry.\n * @param {string} [opts.source] - The optional source account.\n * @returns {xdr.ManageDataOp} Manage Data operation\n */\nfunction manageData(opts) {\n  var attributes = {};\n  if (!(typeof opts.name === 'string' && opts.name.length <= 64)) {\n    throw new Error('name must be a string, up to 64 characters');\n  }\n  attributes.dataName = opts.name;\n  if (typeof opts.value !== 'string' && !Buffer.isBuffer(opts.value) && opts.value !== null) {\n    throw new Error('value must be a string, Buffer or null');\n  }\n  if (typeof opts.value === 'string') {\n    attributes.dataValue = Buffer.from(opts.value);\n  } else {\n    attributes.dataValue = opts.value;\n  }\n  if (attributes.dataValue !== null && attributes.dataValue.length > 64) {\n    throw new Error('value cannot be longer that 64 bytes');\n  }\n  var manageDataOp = new _xdr[\"default\"].ManageDataOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.manageData(manageDataOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,UAAU,GAAG;AACrB,IAAI,OAAO;AACX,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;CASC,GACD,SAAS,WAAW,IAAI;IACtB,IAAI,aAAa,CAAC;IAClB,IAAI,CAAC,CAAC,OAAO,KAAK,IAAI,KAAK,YAAY,KAAK,IAAI,CAAC,MAAM,IAAI,EAAE,GAAG;QAC9D,MAAM,IAAI,MAAM;IAClB;IACA,WAAW,QAAQ,GAAG,KAAK,IAAI;IAC/B,IAAI,OAAO,KAAK,KAAK,KAAK,YAAY,CAAC,OAAO,QAAQ,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM;QACzF,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,OAAO,KAAK,KAAK,KAAK,UAAU;QAClC,WAAW,SAAS,GAAG,OAAO,IAAI,CAAC,KAAK,KAAK;IAC/C,OAAO;QACL,WAAW,SAAS,GAAG,KAAK,KAAK;IACnC;IACA,IAAI,WAAW,SAAS,KAAK,QAAQ,WAAW,SAAS,CAAC,MAAM,GAAG,IAAI;QACrE,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,eAAe,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC;IACpD,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,UAAU,CAAC;IAC7D,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16981, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/manage_buy_offer.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.manageBuyOffer = manageBuyOffer;\nvar _jsXdr = require(\"@stellar/js-xdr\");\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Returns a XDR ManageBuyOfferOp. A \"manage buy offer\" operation creates, updates, or\n * deletes a buy offer.\n * @function\n * @alias Operation.manageBuyOffer\n * @param {object} opts Options object\n * @param {Asset} opts.selling - What you're selling.\n * @param {Asset} opts.buying - What you're buying.\n * @param {string} opts.buyAmount - The total amount you're buying. If 0, deletes the offer.\n * @param {number|string|BigNumber|Object} opts.price - Price of 1 unit of `buying` in terms of `selling`.\n * @param {number} opts.price.n - If `opts.price` is an object: the price numerator\n * @param {number} opts.price.d - If `opts.price` is an object: the price denominator\n * @param {number|string} [opts.offerId ] - If `0`, will create a new offer (default). Otherwise, edits an exisiting offer.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n * @throws {Error} Throws `Error` when the best rational approximation of `price` cannot be found.\n * @returns {xdr.ManageBuyOfferOp} Manage Buy Offer operation\n */\nfunction manageBuyOffer(opts) {\n  var attributes = {};\n  attributes.selling = opts.selling.toXDRObject();\n  attributes.buying = opts.buying.toXDRObject();\n  if (!this.isValidAmount(opts.buyAmount, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('buyAmount'));\n  }\n  attributes.buyAmount = this._toXDRAmount(opts.buyAmount);\n  if (opts.price === undefined) {\n    throw new TypeError('price argument is required');\n  }\n  attributes.price = this._toXDRPrice(opts.price);\n  if (opts.offerId !== undefined) {\n    opts.offerId = opts.offerId.toString();\n  } else {\n    opts.offerId = '0';\n  }\n  attributes.offerId = _jsXdr.Hyper.fromString(opts.offerId);\n  var manageBuyOfferOp = new _xdr[\"default\"].ManageBuyOfferOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.manageBuyOffer(manageBuyOfferOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,cAAc,GAAG;AACzB,IAAI;AACJ,IAAI,OAAO;AACX,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;;;;;CAgBC,GACD,SAAS,eAAe,IAAI;IAC1B,IAAI,aAAa,CAAC;IAClB,WAAW,OAAO,GAAG,KAAK,OAAO,CAAC,WAAW;IAC7C,WAAW,MAAM,GAAG,KAAK,MAAM,CAAC,WAAW;IAC3C,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,SAAS,EAAE,OAAO;QAC7C,MAAM,IAAI,UAAU,IAAI,CAAC,gCAAgC,CAAC;IAC5D;IACA,WAAW,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,SAAS;IACvD,IAAI,KAAK,KAAK,KAAK,WAAW;QAC5B,MAAM,IAAI,UAAU;IACtB;IACA,WAAW,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,KAAK;IAC9C,IAAI,KAAK,OAAO,KAAK,WAAW;QAC9B,KAAK,OAAO,GAAG,KAAK,OAAO,CAAC,QAAQ;IACtC,OAAO;QACL,KAAK,OAAO,GAAG;IACjB;IACA,WAAW,OAAO,GAAG,OAAO,KAAK,CAAC,UAAU,CAAC,KAAK,OAAO;IACzD,IAAI,mBAAmB,IAAI,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC;IAC5D,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,cAAc,CAAC;IACjE,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17038, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/path_payment_strict_receive.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pathPaymentStrictReceive = pathPaymentStrictReceive;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nvar _decode_encode_muxed_account = require(\"../util/decode_encode_muxed_account\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a PathPaymentStrictReceive operation.\n *\n * A `PathPaymentStrictReceive` operation sends the specified amount to the\n * destination account. It credits the destination with `destAmount` of\n * `destAsset`, while debiting at most `sendMax` of `sendAsset` from the source.\n * The transfer optionally occurs through a path. XLM payments create the\n * destination account if it does not exist.\n *\n * @function\n * @alias Operation.pathPaymentStrictReceive\n * @see https://developers.stellar.org/docs/start/list-of-operations/#path-payment-strict-receive\n *\n * @param {object}  opts - Options object\n * @param {Asset}   opts.sendAsset    - asset to pay with\n * @param {string}  opts.sendMax      - maximum amount of sendAsset to send\n * @param {string}  opts.destination  - destination account to send to\n * @param {Asset}   opts.destAsset    - asset the destination will receive\n * @param {string}  opts.destAmount   - amount the destination receives\n * @param {Asset[]} opts.path         - array of Asset objects to use as the path\n *\n * @param {string}  [opts.source]     - The source account for the payment.\n *     Defaults to the transaction's source account.\n *\n * @returns {xdr.PathPaymentStrictReceiveOp} the resulting path payment op\n */\nfunction pathPaymentStrictReceive(opts) {\n  switch (true) {\n    case !opts.sendAsset:\n      throw new Error('Must specify a send asset');\n    case !this.isValidAmount(opts.sendMax):\n      throw new TypeError(this.constructAmountRequirementsError('sendMax'));\n    case !opts.destAsset:\n      throw new Error('Must provide a destAsset for a payment operation');\n    case !this.isValidAmount(opts.destAmount):\n      throw new TypeError(this.constructAmountRequirementsError('destAmount'));\n    default:\n      break;\n  }\n  var attributes = {};\n  attributes.sendAsset = opts.sendAsset.toXDRObject();\n  attributes.sendMax = this._toXDRAmount(opts.sendMax);\n  try {\n    attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination);\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n  attributes.destAsset = opts.destAsset.toXDRObject();\n  attributes.destAmount = this._toXDRAmount(opts.destAmount);\n  var path = opts.path ? opts.path : [];\n  attributes.path = path.map(function (x) {\n    return x.toXDRObject();\n  });\n  var payment = new _xdr[\"default\"].PathPaymentStrictReceiveOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.pathPaymentStrictReceive(payment);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,wBAAwB,GAAG;AACnC,IAAI,OAAO;AACX,IAAI;AACJ,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;;;;;;;;;;;;;;CAyBC,GACD,SAAS,yBAAyB,IAAI;IACpC,OAAQ;QACN,KAAK,CAAC,KAAK,SAAS;YAClB,MAAM,IAAI,MAAM;QAClB,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,OAAO;YACnC,MAAM,IAAI,UAAU,IAAI,CAAC,gCAAgC,CAAC;QAC5D,KAAK,CAAC,KAAK,SAAS;YAClB,MAAM,IAAI,MAAM;QAClB,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,UAAU;YACtC,MAAM,IAAI,UAAU,IAAI,CAAC,gCAAgC,CAAC;QAC5D;YACE;IACJ;IACA,IAAI,aAAa,CAAC;IAClB,WAAW,SAAS,GAAG,KAAK,SAAS,CAAC,WAAW;IACjD,WAAW,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,OAAO;IACnD,IAAI;QACF,WAAW,WAAW,GAAG,CAAC,GAAG,6BAA6B,2BAA2B,EAAE,KAAK,WAAW;IACzG,EAAE,OAAO,GAAG;QACV,MAAM,IAAI,MAAM;IAClB;IACA,WAAW,SAAS,GAAG,KAAK,SAAS,CAAC,WAAW;IACjD,WAAW,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,UAAU;IACzD,IAAI,OAAO,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,EAAE;IACrC,WAAW,IAAI,GAAG,KAAK,GAAG,CAAC,SAAU,CAAC;QACpC,OAAO,EAAE,WAAW;IACtB;IACA,IAAI,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,0BAA0B,CAAC;IAC7D,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,wBAAwB,CAAC;IAC3E,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17113, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/path_payment_strict_send.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pathPaymentStrictSend = pathPaymentStrictSend;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nvar _decode_encode_muxed_account = require(\"../util/decode_encode_muxed_account\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a PathPaymentStrictSend operation.\n *\n * A `PathPaymentStrictSend` operation sends the specified amount to the\n * destination account crediting at least `destMin` of `destAsset`, optionally\n * through a path. XLM payments create the destination account if it does not\n * exist.\n *\n * @function\n * @alias Operation.pathPaymentStrictSend\n * @see https://developers.stellar.org/docs/start/list-of-operations/#path-payment-strict-send\n *\n * @param {object}  opts - Options object\n * @param {Asset}   opts.sendAsset    - asset to pay with\n * @param {string}  opts.sendAmount   - amount of sendAsset to send (excluding fees)\n * @param {string}  opts.destination  - destination account to send to\n * @param {Asset}   opts.destAsset    - asset the destination will receive\n * @param {string}  opts.destMin      - minimum amount of destAsset to be receive\n * @param {Asset[]} opts.path         - array of Asset objects to use as the path\n *\n * @param {string}  [opts.source]     - The source account for the payment.\n *     Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   the resulting path payment operation\n *     (xdr.PathPaymentStrictSendOp)\n */\nfunction pathPaymentStrictSend(opts) {\n  switch (true) {\n    case !opts.sendAsset:\n      throw new Error('Must specify a send asset');\n    case !this.isValidAmount(opts.sendAmount):\n      throw new TypeError(this.constructAmountRequirementsError('sendAmount'));\n    case !opts.destAsset:\n      throw new Error('Must provide a destAsset for a payment operation');\n    case !this.isValidAmount(opts.destMin):\n      throw new TypeError(this.constructAmountRequirementsError('destMin'));\n    default:\n      break;\n  }\n  var attributes = {};\n  attributes.sendAsset = opts.sendAsset.toXDRObject();\n  attributes.sendAmount = this._toXDRAmount(opts.sendAmount);\n  try {\n    attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination);\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n  attributes.destAsset = opts.destAsset.toXDRObject();\n  attributes.destMin = this._toXDRAmount(opts.destMin);\n  var path = opts.path ? opts.path : [];\n  attributes.path = path.map(function (x) {\n    return x.toXDRObject();\n  });\n  var payment = new _xdr[\"default\"].PathPaymentStrictSendOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.pathPaymentStrictSend(payment);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,qBAAqB,GAAG;AAChC,IAAI,OAAO;AACX,IAAI;AACJ,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;;;;;;;;;;;;;;CAyBC,GACD,SAAS,sBAAsB,IAAI;IACjC,OAAQ;QACN,KAAK,CAAC,KAAK,SAAS;YAClB,MAAM,IAAI,MAAM;QAClB,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,UAAU;YACtC,MAAM,IAAI,UAAU,IAAI,CAAC,gCAAgC,CAAC;QAC5D,KAAK,CAAC,KAAK,SAAS;YAClB,MAAM,IAAI,MAAM;QAClB,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,OAAO;YACnC,MAAM,IAAI,UAAU,IAAI,CAAC,gCAAgC,CAAC;QAC5D;YACE;IACJ;IACA,IAAI,aAAa,CAAC;IAClB,WAAW,SAAS,GAAG,KAAK,SAAS,CAAC,WAAW;IACjD,WAAW,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,UAAU;IACzD,IAAI;QACF,WAAW,WAAW,GAAG,CAAC,GAAG,6BAA6B,2BAA2B,EAAE,KAAK,WAAW;IACzG,EAAE,OAAO,GAAG;QACV,MAAM,IAAI,MAAM;IAClB;IACA,WAAW,SAAS,GAAG,KAAK,SAAS,CAAC,WAAW;IACjD,WAAW,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,OAAO;IACnD,IAAI,OAAO,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,EAAE;IACrC,WAAW,IAAI,GAAG,KAAK,GAAG,CAAC,SAAU,CAAC;QACpC,OAAO,EAAE,WAAW;IACtB;IACA,IAAI,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC;IAC1D,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,qBAAqB,CAAC;IACxE,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17188, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/payment.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.payment = payment;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nvar _decode_encode_muxed_account = require(\"../util/decode_encode_muxed_account\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create a payment operation.\n *\n * @function\n * @alias Operation.payment\n * @see https://developers.stellar.org/docs/start/list-of-operations/#payment\n *\n * @param {object}  opts - Options object\n * @param {string}  opts.destination  - destination account ID\n * @param {Asset}   opts.asset        - asset to send\n * @param {string}  opts.amount       - amount to send\n *\n * @param {string}  [opts.source]     - The source account for the payment.\n *     Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   The resulting payment operation (xdr.PaymentOp)\n */\nfunction payment(opts) {\n  if (!opts.asset) {\n    throw new Error('Must provide an asset for a payment operation');\n  }\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  var attributes = {};\n  try {\n    attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination);\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.amount = this._toXDRAmount(opts.amount);\n  var paymentOp = new _xdr[\"default\"].PaymentOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.payment(paymentOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,OAAO,GAAG;AAClB,IAAI,OAAO;AACX,IAAI;AACJ,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;;;;;CAgBC,GACD,SAAS,QAAQ,IAAI;IACnB,IAAI,CAAC,KAAK,KAAK,EAAE;QACf,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,MAAM,GAAG;QACpC,MAAM,IAAI,UAAU,IAAI,CAAC,gCAAgC,CAAC;IAC5D;IACA,IAAI,aAAa,CAAC;IAClB,IAAI;QACF,WAAW,WAAW,GAAG,CAAC,GAAG,6BAA6B,2BAA2B,EAAE,KAAK,WAAW;IACzG,EAAE,OAAO,GAAG;QACV,MAAM,IAAI,MAAM;IAClB;IACA,WAAW,KAAK,GAAG,KAAK,KAAK,CAAC,WAAW;IACzC,WAAW,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,MAAM;IACjD,IAAI,YAAY,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;IAC9C,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,OAAO,CAAC;IAC1D,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17242, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/set_options.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setOptions = setOptions;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nvar _keypair = require(\"../keypair\");\nvar _strkey = require(\"../strkey\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/* eslint-disable no-param-reassign */\n\nfunction weightCheckFunction(value, name) {\n  if (value >= 0 && value <= 255) {\n    return true;\n  }\n  throw new Error(\"\".concat(name, \" value must be between 0 and 255\"));\n}\n\n/**\n * Returns an XDR SetOptionsOp. A \"set options\" operations set or clear account flags,\n * set the account's inflation destination, and/or add new signers to the account.\n * The flags used in `opts.clearFlags` and `opts.setFlags` can be the following:\n *   - `{@link AuthRequiredFlag}`\n *   - `{@link AuthRevocableFlag}`\n *   - `{@link AuthImmutableFlag}`\n *   - `{@link AuthClawbackEnabledFlag}`\n *\n * It's possible to set/clear multiple flags at once using logical or.\n *\n * @function\n * @alias Operation.setOptions\n *\n * @param {object} opts Options object\n * @param {string} [opts.inflationDest] - Set this account ID as the account's inflation destination.\n * @param {(number|string)} [opts.clearFlags] - Bitmap integer for which account flags to clear.\n * @param {(number|string)} [opts.setFlags] - Bitmap integer for which account flags to set.\n * @param {number|string} [opts.masterWeight] - The master key weight.\n * @param {number|string} [opts.lowThreshold] - The sum weight for the low threshold.\n * @param {number|string} [opts.medThreshold] - The sum weight for the medium threshold.\n * @param {number|string} [opts.highThreshold] - The sum weight for the high threshold.\n * @param {object} [opts.signer] - Add or remove a signer from the account. The signer is\n *                                 deleted if the weight is 0. Only one of `ed25519PublicKey`, `sha256Hash`, `preAuthTx` should be defined.\n * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.\n * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string) of preimage that will unlock funds. Preimage should be used as signature of future transaction.\n * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction that will unlock funds.\n * @param {string} [opts.signer.ed25519SignedPayload] - Signed payload signer (ed25519 public key + raw payload) for atomic transaction signature disclosure.\n * @param {number|string} [opts.signer.weight] - The weight of the new signer (0 to delete or 1-255)\n * @param {string} [opts.homeDomain] - sets the home domain used for reverse federation lookup.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n *\n * @returns {xdr.SetOptionsOp}  XDR operation\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nfunction setOptions(opts) {\n  var attributes = {};\n  if (opts.inflationDest) {\n    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.inflationDest)) {\n      throw new Error('inflationDest is invalid');\n    }\n    attributes.inflationDest = _keypair.Keypair.fromPublicKey(opts.inflationDest).xdrAccountId();\n  }\n  attributes.clearFlags = this._checkUnsignedIntValue('clearFlags', opts.clearFlags);\n  attributes.setFlags = this._checkUnsignedIntValue('setFlags', opts.setFlags);\n  attributes.masterWeight = this._checkUnsignedIntValue('masterWeight', opts.masterWeight, weightCheckFunction);\n  attributes.lowThreshold = this._checkUnsignedIntValue('lowThreshold', opts.lowThreshold, weightCheckFunction);\n  attributes.medThreshold = this._checkUnsignedIntValue('medThreshold', opts.medThreshold, weightCheckFunction);\n  attributes.highThreshold = this._checkUnsignedIntValue('highThreshold', opts.highThreshold, weightCheckFunction);\n  if (opts.homeDomain !== undefined && typeof opts.homeDomain !== 'string') {\n    throw new TypeError('homeDomain argument must be of type String');\n  }\n  attributes.homeDomain = opts.homeDomain;\n  if (opts.signer) {\n    var weight = this._checkUnsignedIntValue('signer.weight', opts.signer.weight, weightCheckFunction);\n    var key;\n    var setValues = 0;\n    if (opts.signer.ed25519PublicKey) {\n      if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {\n        throw new Error('signer.ed25519PublicKey is invalid.');\n      }\n      var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey);\n\n      // eslint-disable-next-line new-cap\n      key = new _xdr[\"default\"].SignerKey.signerKeyTypeEd25519(rawKey);\n      setValues += 1;\n    }\n    if (opts.signer.preAuthTx) {\n      if (typeof opts.signer.preAuthTx === 'string') {\n        opts.signer.preAuthTx = Buffer.from(opts.signer.preAuthTx, 'hex');\n      }\n      if (!(Buffer.isBuffer(opts.signer.preAuthTx) && opts.signer.preAuthTx.length === 32)) {\n        throw new Error('signer.preAuthTx must be 32 bytes Buffer.');\n      }\n\n      // eslint-disable-next-line new-cap\n      key = new _xdr[\"default\"].SignerKey.signerKeyTypePreAuthTx(opts.signer.preAuthTx);\n      setValues += 1;\n    }\n    if (opts.signer.sha256Hash) {\n      if (typeof opts.signer.sha256Hash === 'string') {\n        opts.signer.sha256Hash = Buffer.from(opts.signer.sha256Hash, 'hex');\n      }\n      if (!(Buffer.isBuffer(opts.signer.sha256Hash) && opts.signer.sha256Hash.length === 32)) {\n        throw new Error('signer.sha256Hash must be 32 bytes Buffer.');\n      }\n\n      // eslint-disable-next-line new-cap\n      key = new _xdr[\"default\"].SignerKey.signerKeyTypeHashX(opts.signer.sha256Hash);\n      setValues += 1;\n    }\n    if (opts.signer.ed25519SignedPayload) {\n      if (!_strkey.StrKey.isValidSignedPayload(opts.signer.ed25519SignedPayload)) {\n        throw new Error('signer.ed25519SignedPayload is invalid.');\n      }\n      var _rawKey = _strkey.StrKey.decodeSignedPayload(opts.signer.ed25519SignedPayload);\n      var signedPayloadXdr = _xdr[\"default\"].SignerKeyEd25519SignedPayload.fromXDR(_rawKey);\n\n      // eslint-disable-next-line new-cap\n      key = _xdr[\"default\"].SignerKey.signerKeyTypeEd25519SignedPayload(signedPayloadXdr);\n      setValues += 1;\n    }\n    if (setValues !== 1) {\n      throw new Error('Signer object must contain exactly one of signer.ed25519PublicKey, signer.sha256Hash, signer.preAuthTx.');\n    }\n    attributes.signer = new _xdr[\"default\"].Signer({\n      key: key,\n      weight: weight\n    });\n  }\n  var setOptionsOp = new _xdr[\"default\"].SetOptionsOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.setOptions(setOptionsOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17377, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/begin_sponsoring_future_reserves.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.beginSponsoringFutureReserves = beginSponsoringFutureReserves;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nvar _strkey = require(\"../strkey\");\nvar _keypair = require(\"../keypair\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create a \"begin sponsoring future reserves\" operation.\n * @function\n * @alias Operation.beginSponsoringFutureReserves\n * @param {object} opts Options object\n * @param {string} opts.sponsoredId - The sponsored account id.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.beginSponsoringFutureReserves({\n *   sponsoredId: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n * });\n *\n */\nfunction beginSponsoringFutureReserves() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.sponsoredId)) {\n    throw new Error('sponsoredId is invalid');\n  }\n  var op = new _xdr[\"default\"].BeginSponsoringFutureReservesOp({\n    sponsoredId: _keypair.Keypair.fromPublicKey(opts.sponsoredId).xdrAccountId()\n  });\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.beginSponsoringFutureReserves(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,6BAA6B,GAAG;AACxC,IAAI,OAAO;AACX,IAAI;AACJ,IAAI;AACJ,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;;;CAcC,GACD,SAAS;IACP,IAAI,OAAO,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAChF,IAAI,CAAC,QAAQ,MAAM,CAAC,uBAAuB,CAAC,KAAK,WAAW,GAAG;QAC7D,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,+BAA+B,CAAC;QAC3D,aAAa,SAAS,OAAO,CAAC,aAAa,CAAC,KAAK,WAAW,EAAE,YAAY;IAC5E;IACA,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,6BAA6B,CAAC;IAChF,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17422, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/end_sponsoring_future_reserves.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.endSponsoringFutureReserves = endSponsoringFutureReserves;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create an \"end sponsoring future reserves\" operation.\n * @function\n * @alias Operation.endSponsoringFutureReserves\n * @param {object} opts Options object\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.endSponsoringFutureReserves();\n *\n */\nfunction endSponsoringFutureReserves() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.endSponsoringFutureReserves();\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,2BAA2B,GAAG;AACtC,IAAI,OAAO;AACX,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;CAWC,GACD,SAAS;IACP,IAAI,OAAO,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAChF,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,2BAA2B;IAC7E,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17456, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/revoke_sponsorship.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.revokeAccountSponsorship = revokeAccountSponsorship;\nexports.revokeClaimableBalanceSponsorship = revokeClaimableBalanceSponsorship;\nexports.revokeDataSponsorship = revokeDataSponsorship;\nexports.revokeLiquidityPoolSponsorship = revokeLiquidityPoolSponsorship;\nexports.revokeOfferSponsorship = revokeOfferSponsorship;\nexports.revokeSignerSponsorship = revokeSignerSponsorship;\nexports.revokeTrustlineSponsorship = revokeTrustlineSponsorship;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nvar _strkey = require(\"../strkey\");\nvar _keypair = require(\"../keypair\");\nvar _asset = require(\"../asset\");\nvar _liquidity_pool_id = require(\"../liquidity_pool_id\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Create a \"revoke sponsorship\" operation for an account.\n *\n * @function\n * @alias Operation.revokeAccountSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The sponsored account ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeAccountSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n * });\n *\n */\nfunction revokeAccountSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.account(new _xdr[\"default\"].LedgerKeyAccount({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId()\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a trustline.\n *\n * @function\n * @alias Operation.revokeTrustlineSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the trustline.\n * @param {Asset | LiquidityPoolId} opts.asset - The trustline asset.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeTrustlineSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   asset: new StellarBase.LiquidityPoolId(\n *     'USDUSD',\n *     'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n *   )\n * });\n *\n */\nfunction revokeTrustlineSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  var asset;\n  if (opts.asset instanceof _asset.Asset) {\n    asset = opts.asset.toTrustLineXDRObject();\n  } else if (opts.asset instanceof _liquidity_pool_id.LiquidityPoolId) {\n    asset = opts.asset.toXDRObject();\n  } else {\n    throw new TypeError('asset must be an Asset or LiquidityPoolId');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.trustline(new _xdr[\"default\"].LedgerKeyTrustLine({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    asset: asset\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for an offer.\n *\n * @function\n * @alias Operation.revokeOfferSponsorship\n * @param {object} opts Options object\n * @param {string} opts.seller - The account ID which created the offer.\n * @param {string} opts.offerId - The offer ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeOfferSponsorship({\n *   seller: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   offerId: '1234'\n * });\n *\n */\nfunction revokeOfferSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.seller)) {\n    throw new Error('seller is invalid');\n  }\n  if (typeof opts.offerId !== 'string') {\n    throw new Error('offerId is invalid');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.offer(new _xdr[\"default\"].LedgerKeyOffer({\n    sellerId: _keypair.Keypair.fromPublicKey(opts.seller).xdrAccountId(),\n    offerId: _xdr[\"default\"].Int64.fromString(opts.offerId)\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a data entry.\n *\n * @function\n * @alias Operation.revokeDataSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the data entry.\n * @param {string} opts.name - The name of the data entry\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeDataSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   name: 'foo'\n * });\n *\n */\nfunction revokeDataSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  if (typeof opts.name !== 'string' || opts.name.length > 64) {\n    throw new Error('name must be a string, up to 64 characters');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.data(new _xdr[\"default\"].LedgerKeyData({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    dataName: opts.name\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a claimable balance.\n *\n * @function\n * @alias Operation.revokeClaimableBalanceSponsorship\n * @param {object} opts Options object\n * @param {string} opts.balanceId - The sponsored claimable balance ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeClaimableBalanceSponsorship({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n */\nfunction revokeClaimableBalanceSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (typeof opts.balanceId !== 'string') {\n    throw new Error('balanceId is invalid');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.claimableBalance(new _xdr[\"default\"].LedgerKeyClaimableBalance({\n    balanceId: _xdr[\"default\"].ClaimableBalanceId.fromXDR(opts.balanceId, 'hex')\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Creates a \"revoke sponsorship\" operation for a liquidity pool.\n *\n * @function\n * @alias Operation.revokeLiquidityPoolSponsorship\n * @param {object} opts – Options object.\n * @param {string} opts.liquidityPoolId - The sponsored liquidity pool ID in 'hex' string.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr Operation.\n *\n * @example\n * const op = Operation.revokeLiquidityPoolSponsorship({\n *   liquidityPoolId: 'dd7b1ab831c273310ddbec6f97870aa83c2fbd78ce22aded37ecbf4f3380fac7',\n * });\n *\n */\nfunction revokeLiquidityPoolSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (typeof opts.liquidityPoolId !== 'string') {\n    throw new Error('liquidityPoolId is invalid');\n  }\n  var ledgerKey = _xdr[\"default\"].LedgerKey.liquidityPool(new _xdr[\"default\"].LedgerKeyLiquidityPool({\n    liquidityPoolId: _xdr[\"default\"].PoolId.fromXDR(opts.liquidityPoolId, 'hex')\n  }));\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.revokeSponsorship(op)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a signer.\n *\n * @function\n * @alias Operation.revokeSignerSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID where the signer sponsorship is being removed from.\n * @param {object} opts.signer - The signer whose sponsorship is being removed.\n * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.\n * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string).\n * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeSignerSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   signer: {\n *     ed25519PublicKey: 'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ'\n *   }\n * })\n *\n */\nfunction revokeSignerSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  var key;\n  if (opts.signer.ed25519PublicKey) {\n    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {\n      throw new Error('signer.ed25519PublicKey is invalid.');\n    }\n    var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey);\n    key = new _xdr[\"default\"].SignerKey.signerKeyTypeEd25519(rawKey);\n  } else if (opts.signer.preAuthTx) {\n    var buffer;\n    if (typeof opts.signer.preAuthTx === 'string') {\n      buffer = Buffer.from(opts.signer.preAuthTx, 'hex');\n    } else {\n      buffer = opts.signer.preAuthTx;\n    }\n    if (!(Buffer.isBuffer(buffer) && buffer.length === 32)) {\n      throw new Error('signer.preAuthTx must be 32 bytes Buffer.');\n    }\n    key = new _xdr[\"default\"].SignerKey.signerKeyTypePreAuthTx(buffer);\n  } else if (opts.signer.sha256Hash) {\n    var _buffer;\n    if (typeof opts.signer.sha256Hash === 'string') {\n      _buffer = Buffer.from(opts.signer.sha256Hash, 'hex');\n    } else {\n      _buffer = opts.signer.sha256Hash;\n    }\n    if (!(Buffer.isBuffer(_buffer) && _buffer.length === 32)) {\n      throw new Error('signer.sha256Hash must be 32 bytes Buffer.');\n    }\n    key = new _xdr[\"default\"].SignerKey.signerKeyTypeHashX(_buffer);\n  } else {\n    throw new Error('signer is invalid');\n  }\n  var signer = new _xdr[\"default\"].RevokeSponsorshipOpSigner({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    signerKey: key\n  });\n  var op = _xdr[\"default\"].RevokeSponsorshipOp.revokeSponsorshipSigner(signer);\n  var opAttributes = {};\n  opAttributes.body = _xdr[\"default\"].OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,wBAAwB,GAAG;AACnC,QAAQ,iCAAiC,GAAG;AAC5C,QAAQ,qBAAqB,GAAG;AAChC,QAAQ,8BAA8B,GAAG;AACzC,QAAQ,sBAAsB,GAAG;AACjC,QAAQ,uBAAuB,GAAG;AAClC,QAAQ,0BAA0B,GAAG;AACrC,IAAI,OAAO;AACX,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;;;;CAeC,GACD,SAAS;IACP,IAAI,OAAO,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAChF,IAAI,CAAC,QAAQ,MAAM,CAAC,uBAAuB,CAAC,KAAK,OAAO,GAAG;QACzD,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,YAAY,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC;QACrF,WAAW,SAAS,OAAO,CAAC,aAAa,CAAC,KAAK,OAAO,EAAE,YAAY;IACtE;IACA,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,4BAA4B,CAAC;IAC1E,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,iBAAiB,CAAC;IACpE,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC;AAEA;;;;;;;;;;;;;;;;;;;;CAoBC,GACD,SAAS;IACP,IAAI,OAAO,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAChF,IAAI,CAAC,QAAQ,MAAM,CAAC,uBAAuB,CAAC,KAAK,OAAO,GAAG;QACzD,MAAM,IAAI,MAAM;IAClB;IACA,IAAI;IACJ,IAAI,KAAK,KAAK,YAAY,OAAO,KAAK,EAAE;QACtC,QAAQ,KAAK,KAAK,CAAC,oBAAoB;IACzC,OAAO,IAAI,KAAK,KAAK,YAAY,mBAAmB,eAAe,EAAE;QACnE,QAAQ,KAAK,KAAK,CAAC,WAAW;IAChC,OAAO;QACL,MAAM,IAAI,UAAU;IACtB;IACA,IAAI,YAAY,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC;QACzF,WAAW,SAAS,OAAO,CAAC,aAAa,CAAC,KAAK,OAAO,EAAE,YAAY;QACpE,OAAO;IACT;IACA,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,4BAA4B,CAAC;IAC1E,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,iBAAiB,CAAC;IACpE,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC;AAEA;;;;;;;;;;;;;;;;;CAiBC,GACD,SAAS;IACP,IAAI,OAAO,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAChF,IAAI,CAAC,QAAQ,MAAM,CAAC,uBAAuB,CAAC,KAAK,MAAM,GAAG;QACxD,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,OAAO,KAAK,OAAO,KAAK,UAAU;QACpC,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,YAAY,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC;QACjF,UAAU,SAAS,OAAO,CAAC,aAAa,CAAC,KAAK,MAAM,EAAE,YAAY;QAClE,SAAS,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,OAAO;IACxD;IACA,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,4BAA4B,CAAC;IAC1E,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,iBAAiB,CAAC;IACpE,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC;AAEA;;;;;;;;;;;;;;;;;CAiBC,GACD,SAAS;IACP,IAAI,OAAO,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAChF,IAAI,CAAC,QAAQ,MAAM,CAAC,uBAAuB,CAAC,KAAK,OAAO,GAAG;QACzD,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,OAAO,KAAK,IAAI,KAAK,YAAY,KAAK,IAAI,CAAC,MAAM,GAAG,IAAI;QAC1D,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,YAAY,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QAC/E,WAAW,SAAS,OAAO,CAAC,aAAa,CAAC,KAAK,OAAO,EAAE,YAAY;QACpE,UAAU,KAAK,IAAI;IACrB;IACA,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,4BAA4B,CAAC;IAC1E,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,iBAAiB,CAAC;IACpE,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC;AAEA;;;;;;;;;;;;;;;CAeC,GACD,SAAS;IACP,IAAI,OAAO,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAChF,IAAI,OAAO,KAAK,SAAS,KAAK,UAAU;QACtC,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,YAAY,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC;QACvG,WAAW,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC,KAAK,SAAS,EAAE;IACxE;IACA,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,4BAA4B,CAAC;IAC1E,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,iBAAiB,CAAC;IACpE,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC;AAEA;;;;;;;;;;;;;;;CAeC,GACD,SAAS;IACP,IAAI,OAAO,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAChF,IAAI,OAAO,KAAK,eAAe,KAAK,UAAU;QAC5C,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,YAAY,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC;QACjG,iBAAiB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,eAAe,EAAE;IACxE;IACA,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,4BAA4B,CAAC;IAC1E,IAAI,eAAe;QACjB,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,iBAAiB,CAAC;IACxD;IACA,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC;AAEA;;;;;;;;;;;;;;;;;;;;;;CAsBC,GACD,SAAS;IACP,IAAI,OAAO,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAChF,IAAI,CAAC,QAAQ,MAAM,CAAC,uBAAuB,CAAC,KAAK,OAAO,GAAG;QACzD,MAAM,IAAI,MAAM;IAClB;IACA,IAAI;IACJ,IAAI,KAAK,MAAM,CAAC,gBAAgB,EAAE;QAChC,IAAI,CAAC,QAAQ,MAAM,CAAC,uBAAuB,CAAC,KAAK,MAAM,CAAC,gBAAgB,GAAG;YACzE,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,SAAS,QAAQ,MAAM,CAAC,sBAAsB,CAAC,KAAK,MAAM,CAAC,gBAAgB;QAC/E,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,oBAAoB,CAAC;IAC3D,OAAO,IAAI,KAAK,MAAM,CAAC,SAAS,EAAE;QAChC,IAAI;QACJ,IAAI,OAAO,KAAK,MAAM,CAAC,SAAS,KAAK,UAAU;YAC7C,SAAS,OAAO,IAAI,CAAC,KAAK,MAAM,CAAC,SAAS,EAAE;QAC9C,OAAO;YACL,SAAS,KAAK,MAAM,CAAC,SAAS;QAChC;QACA,IAAI,CAAC,CAAC,OAAO,QAAQ,CAAC,WAAW,OAAO,MAAM,KAAK,EAAE,GAAG;YACtD,MAAM,IAAI,MAAM;QAClB;QACA,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,sBAAsB,CAAC;IAC7D,OAAO,IAAI,KAAK,MAAM,CAAC,UAAU,EAAE;QACjC,IAAI;QACJ,IAAI,OAAO,KAAK,MAAM,CAAC,UAAU,KAAK,UAAU;YAC9C,UAAU,OAAO,IAAI,CAAC,KAAK,MAAM,CAAC,UAAU,EAAE;QAChD,OAAO;YACL,UAAU,KAAK,MAAM,CAAC,UAAU;QAClC;QACA,IAAI,CAAC,CAAC,OAAO,QAAQ,CAAC,YAAY,QAAQ,MAAM,KAAK,EAAE,GAAG;YACxD,MAAM,IAAI,MAAM;QAClB;QACA,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,CAAC;IACzD,OAAO;QACL,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,SAAS,IAAI,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC;QACzD,WAAW,SAAS,OAAO,CAAC,aAAa,CAAC,KAAK,OAAO,EAAE,YAAY;QACpE,WAAW;IACb;IACA,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,uBAAuB,CAAC;IACrE,IAAI,eAAe,CAAC;IACpB,aAAa,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,iBAAiB,CAAC;IACpE,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17752, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/clawback.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clawback = clawback;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nvar _decode_encode_muxed_account = require(\"../util/decode_encode_muxed_account\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a clawback operation.\n *\n * @function\n * @alias Operation.clawback\n *\n * @param {object} opts - Options object\n * @param {Asset}  opts.asset   - The asset being clawed back.\n * @param {string} opts.amount  - The amount of the asset to claw back.\n * @param {string} opts.from    - The public key of the (optionally-muxed)\n *     account to claw back from.\n *\n * @param {string} [opts.source] - The source account for the operation.\n *     Defaults to the transaction's source account.\n *\n * @return {xdr.ClawbackOp}\n *\n * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#clawback-operation\n */\nfunction clawback(opts) {\n  var attributes = {};\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n  attributes.asset = opts.asset.toXDRObject();\n  try {\n    attributes.from = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.from);\n  } catch (e) {\n    throw new Error('from address is invalid');\n  }\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.clawback(new _xdr[\"default\"].ClawbackOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,QAAQ,GAAG;AACnB,IAAI,OAAO;AACX,IAAI;AACJ,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;;;;;;;CAkBC,GACD,SAAS,SAAS,IAAI;IACpB,IAAI,aAAa,CAAC;IAClB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,MAAM,GAAG;QACpC,MAAM,IAAI,UAAU,IAAI,CAAC,gCAAgC,CAAC;IAC5D;IACA,WAAW,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,MAAM;IACjD,WAAW,KAAK,GAAG,KAAK,KAAK,CAAC,WAAW;IACzC,IAAI;QACF,WAAW,IAAI,GAAG,CAAC,GAAG,6BAA6B,2BAA2B,EAAE,KAAK,IAAI;IAC3F,EAAE,OAAO,GAAG;QACV,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,eAAe;QACjB,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;IAC9E;IACA,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17805, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/set_trustline_flags.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setTrustLineFlags = setTrustLineFlags;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nvar _keypair = require(\"../keypair\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/**\n * Creates a trustline flag configuring operation.\n *\n * For the flags, set them to true to enable them and false to disable them. Any\n * unmodified operations will be marked `undefined` in the result.\n *\n * Note that you can only **clear** the clawbackEnabled flag set; it must be set\n * account-wide via operations.SetOptions (setting\n * xdr.AccountFlags.clawbackEnabled).\n *\n * @function\n * @alias Operation.setTrustLineFlags\n *\n * @param {object} opts - Options object\n * @param {string} opts.trustor     - the account whose trustline this is\n * @param {Asset}  opts.asset       - the asset on the trustline\n * @param {object} opts.flags       - the set of flags to modify\n *\n * @param {bool}   [opts.flags.authorized]  - authorize account to perform\n *     transactions with its credit\n * @param {bool}   [opts.flags.authorizedToMaintainLiabilities] - authorize\n *     account to maintain and reduce liabilities for its credit\n * @param {bool}   [opts.flags.clawbackEnabled] - stop claimable balances on\n *     this trustlines from having clawbacks enabled (this flag can only be set\n *     to false!)\n * @param {string} [opts.source] - The source account for the operation.\n *                                 Defaults to the transaction's source account.\n *\n * @note You must include at least one flag.\n *\n * @return {xdr.SetTrustLineFlagsOp}\n *\n * @link xdr.AccountFlags\n * @link xdr.TrustLineFlags\n * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#set-trustline-flags-operation\n * @see https://developers.stellar.org/docs/start/list-of-operations/#set-options\n */\nfunction setTrustLineFlags() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var attributes = {};\n  if (_typeof(opts.flags) !== 'object' || Object.keys(opts.flags).length === 0) {\n    throw new Error('opts.flags must be a map of boolean flags to modify');\n  }\n  var mapping = {\n    authorized: _xdr[\"default\"].TrustLineFlags.authorizedFlag(),\n    authorizedToMaintainLiabilities: _xdr[\"default\"].TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),\n    clawbackEnabled: _xdr[\"default\"].TrustLineFlags.trustlineClawbackEnabledFlag()\n  };\n\n  /* eslint no-bitwise: \"off\" */\n  var clearFlag = 0;\n  var setFlag = 0;\n  Object.keys(opts.flags).forEach(function (flagName) {\n    if (!Object.prototype.hasOwnProperty.call(mapping, flagName)) {\n      throw new Error(\"unsupported flag name specified: \".concat(flagName));\n    }\n    var flagValue = opts.flags[flagName];\n    var bit = mapping[flagName].value;\n    if (flagValue === true) {\n      setFlag |= bit;\n    } else if (flagValue === false) {\n      clearFlag |= bit;\n    }\n  });\n  attributes.trustor = _keypair.Keypair.fromPublicKey(opts.trustor).xdrAccountId();\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.clearFlags = clearFlag;\n  attributes.setFlags = setFlag;\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.setTrustLineFlags(new _xdr[\"default\"].SetTrustLineFlagsOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,iBAAiB,GAAG;AAC5B,IAAI,OAAO;AACX,IAAI;AACJ,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF,SAAS,QAAQ,CAAC;IAAI;IAA2B,OAAO,UAAU,cAAc,OAAO,UAAU,YAAY,OAAO,OAAO,QAAQ,GAAG,SAAU,CAAC;QAAI,OAAO,OAAO;IAAG,IAAI,SAAU,CAAC;QAAI,OAAO,KAAK,cAAc,OAAO,UAAU,EAAE,WAAW,KAAK,UAAU,MAAM,OAAO,SAAS,GAAG,WAAW,OAAO;IAAG,GAAG,QAAQ;AAAI;AAC7T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoCC,GACD,SAAS;IACP,IAAI,OAAO,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAChF,IAAI,aAAa,CAAC;IAClB,IAAI,QAAQ,KAAK,KAAK,MAAM,YAAY,OAAO,IAAI,CAAC,KAAK,KAAK,EAAE,MAAM,KAAK,GAAG;QAC5E,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,UAAU;QACZ,YAAY,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc;QACzD,iCAAiC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,mCAAmC;QACnG,iBAAiB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,4BAA4B;IAC9E;IAEA,4BAA4B,GAC5B,IAAI,YAAY;IAChB,IAAI,UAAU;IACd,OAAO,IAAI,CAAC,KAAK,KAAK,EAAE,OAAO,CAAC,SAAU,QAAQ;QAChD,IAAI,CAAC,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,WAAW;YAC5D,MAAM,IAAI,MAAM,oCAAoC,MAAM,CAAC;QAC7D;QACA,IAAI,YAAY,KAAK,KAAK,CAAC,SAAS;QACpC,IAAI,MAAM,OAAO,CAAC,SAAS,CAAC,KAAK;QACjC,IAAI,cAAc,MAAM;YACtB,WAAW;QACb,OAAO,IAAI,cAAc,OAAO;YAC9B,aAAa;QACf;IACF;IACA,WAAW,OAAO,GAAG,SAAS,OAAO,CAAC,aAAa,CAAC,KAAK,OAAO,EAAE,YAAY;IAC9E,WAAW,KAAK,GAAG,KAAK,KAAK,CAAC,WAAW;IACzC,WAAW,UAAU,GAAG;IACxB,WAAW,QAAQ,GAAG;IACtB,IAAI,eAAe;QACjB,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC;IAChG;IACA,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17901, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/liquidity_pool_deposit.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.liquidityPoolDeposit = liquidityPoolDeposit;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a liquidity pool deposit operation.\n *\n * @function\n * @alias Operation.liquidityPoolDeposit\n * @see https://developers.stellar.org/docs/start/list-of-operations/#liquidity-pool-deposit\n *\n * @param {object} opts - Options object\n * @param {string} opts.liquidityPoolId - The liquidity pool ID.\n * @param {string} opts.maxAmountA - Maximum amount of first asset to deposit.\n * @param {string} opts.maxAmountB - Maximum amount of second asset to deposit.\n * @param {number|string|BigNumber|Object} opts.minPrice -  Minimum depositA/depositB price.\n * @param {number} opts.minPrice.n - If `opts.minPrice` is an object: the price numerator\n * @param {number} opts.minPrice.d - If `opts.minPrice` is an object: the price denominator\n * @param {number|string|BigNumber|Object} opts.maxPrice -  Maximum depositA/depositB price.\n * @param {number} opts.maxPrice.n - If `opts.maxPrice` is an object: the price numerator\n * @param {number} opts.maxPrice.d - If `opts.maxPrice` is an object: the price denominator\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation} The resulting operation (xdr.LiquidityPoolDepositOp).\n */\nfunction liquidityPoolDeposit() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var liquidityPoolId = opts.liquidityPoolId,\n    maxAmountA = opts.maxAmountA,\n    maxAmountB = opts.maxAmountB,\n    minPrice = opts.minPrice,\n    maxPrice = opts.maxPrice;\n  var attributes = {};\n  if (!liquidityPoolId) {\n    throw new TypeError('liquidityPoolId argument is required');\n  }\n  attributes.liquidityPoolId = _xdr[\"default\"].PoolId.fromXDR(liquidityPoolId, 'hex');\n  if (!this.isValidAmount(maxAmountA, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('maxAmountA'));\n  }\n  attributes.maxAmountA = this._toXDRAmount(maxAmountA);\n  if (!this.isValidAmount(maxAmountB, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('maxAmountB'));\n  }\n  attributes.maxAmountB = this._toXDRAmount(maxAmountB);\n  if (minPrice === undefined) {\n    throw new TypeError('minPrice argument is required');\n  }\n  attributes.minPrice = this._toXDRPrice(minPrice);\n  if (maxPrice === undefined) {\n    throw new TypeError('maxPrice argument is required');\n  }\n  attributes.maxPrice = this._toXDRPrice(maxPrice);\n  var liquidityPoolDepositOp = new _xdr[\"default\"].LiquidityPoolDepositOp(attributes);\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.liquidityPoolDeposit(liquidityPoolDepositOp)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,oBAAoB,GAAG;AAC/B,IAAI,OAAO;AACX,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;;;;;;;;;CAoBC,GACD,SAAS;IACP,IAAI,OAAO,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAChF,IAAI,kBAAkB,KAAK,eAAe,EACxC,aAAa,KAAK,UAAU,EAC5B,aAAa,KAAK,UAAU,EAC5B,WAAW,KAAK,QAAQ,EACxB,WAAW,KAAK,QAAQ;IAC1B,IAAI,aAAa,CAAC;IAClB,IAAI,CAAC,iBAAiB;QACpB,MAAM,IAAI,UAAU;IACtB;IACA,WAAW,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,iBAAiB;IAC7E,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,OAAO;QACzC,MAAM,IAAI,UAAU,IAAI,CAAC,gCAAgC,CAAC;IAC5D;IACA,WAAW,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC;IAC1C,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,OAAO;QACzC,MAAM,IAAI,UAAU,IAAI,CAAC,gCAAgC,CAAC;IAC5D;IACA,WAAW,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC;IAC1C,IAAI,aAAa,WAAW;QAC1B,MAAM,IAAI,UAAU;IACtB;IACA,WAAW,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;IACvC,IAAI,aAAa,WAAW;QAC1B,MAAM,IAAI,UAAU;IACtB;IACA,WAAW,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;IACvC,IAAI,yBAAyB,IAAI,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC;IACxE,IAAI,eAAe;QACjB,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,oBAAoB,CAAC;IAC3D;IACA,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17968, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/liquidity_pool_withdraw.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.liquidityPoolWithdraw = liquidityPoolWithdraw;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Creates a liquidity pool withdraw operation.\n *\n * @function\n * @alias Operation.liquidityPoolWithdraw\n * @see https://developers.stellar.org/docs/start/list-of-operations/#liquidity-pool-withdraw\n *\n * @param {object} opts - Options object\n * @param {string} opts.liquidityPoolId - The liquidity pool ID.\n * @param {string} opts.amount - Amount of pool shares to withdraw.\n * @param {string} opts.minAmountA - Minimum amount of first asset to withdraw.\n * @param {string} opts.minAmountB - Minimum amount of second asset to withdraw.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   The resulting operation (xdr.LiquidityPoolWithdrawOp).\n */\nfunction liquidityPoolWithdraw() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var attributes = {};\n  if (!opts.liquidityPoolId) {\n    throw new TypeError('liquidityPoolId argument is required');\n  }\n  attributes.liquidityPoolId = _xdr[\"default\"].PoolId.fromXDR(opts.liquidityPoolId, 'hex');\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n  if (!this.isValidAmount(opts.minAmountA, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('minAmountA'));\n  }\n  attributes.minAmountA = this._toXDRAmount(opts.minAmountA);\n  if (!this.isValidAmount(opts.minAmountB, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('minAmountB'));\n  }\n  attributes.minAmountB = this._toXDRAmount(opts.minAmountB);\n  var liquidityPoolWithdrawOp = new _xdr[\"default\"].LiquidityPoolWithdrawOp(attributes);\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.liquidityPoolWithdraw(liquidityPoolWithdrawOp)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,qBAAqB,GAAG;AAChC,IAAI,OAAO;AACX,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;;;;CAeC,GACD,SAAS;IACP,IAAI,OAAO,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAChF,IAAI,aAAa,CAAC;IAClB,IAAI,CAAC,KAAK,eAAe,EAAE;QACzB,MAAM,IAAI,UAAU;IACtB;IACA,WAAW,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,eAAe,EAAE;IAClF,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,MAAM,GAAG;QACpC,MAAM,IAAI,UAAU,IAAI,CAAC,gCAAgC,CAAC;IAC5D;IACA,WAAW,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,MAAM;IACjD,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,UAAU,EAAE,OAAO;QAC9C,MAAM,IAAI,UAAU,IAAI,CAAC,gCAAgC,CAAC;IAC5D;IACA,WAAW,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,UAAU;IACzD,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,UAAU,EAAE,OAAO;QAC9C,MAAM,IAAI,UAAU,IAAI,CAAC,gCAAgC,CAAC;IAC5D;IACA,WAAW,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,UAAU;IACzD,IAAI,0BAA0B,IAAI,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC;IAC1E,IAAI,eAAe;QACjB,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,qBAAqB,CAAC;IAC5D;IACA,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 18025, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/address.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Address = void 0;\nvar _strkey = require(\"./strkey\");\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Create a new Address object.\n *\n * `Address` represents a single address in the Stellar network. An address can\n * represent an account or a contract.\n *\n * @constructor\n *\n * @param {string} address - ID of the account (ex.\n *     `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`). If you\n *     provide a muxed account address, this will throw; use {@link\n *     MuxedAccount} instead.\n */\nvar Address = exports.Address = /*#__PURE__*/function () {\n  function Address(address) {\n    _classCallCheck(this, Address);\n    if (_strkey.StrKey.isValidEd25519PublicKey(address)) {\n      this._type = 'account';\n      this._key = _strkey.StrKey.decodeEd25519PublicKey(address);\n    } else if (_strkey.StrKey.isValidContract(address)) {\n      this._type = 'contract';\n      this._key = _strkey.StrKey.decodeContract(address);\n    } else {\n      throw new Error(\"Unsupported address type: \".concat(address));\n    }\n  }\n\n  /**\n   * Parses a string and returns an Address object.\n   *\n   * @param {string} address - The address to parse. ex. `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`\n   * @returns {Address}\n   */\n  return _createClass(Address, [{\n    key: \"toString\",\n    value:\n    /**\n     * Serialize an address to string.\n     *\n     * @returns {string}\n     */\n    function toString() {\n      switch (this._type) {\n        case 'account':\n          return _strkey.StrKey.encodeEd25519PublicKey(this._key);\n        case 'contract':\n          return _strkey.StrKey.encodeContract(this._key);\n        default:\n          throw new Error('Unsupported address type');\n      }\n    }\n\n    /**\n     * Convert this Address to an xdr.ScVal type.\n     *\n     * @returns {xdr.ScVal}\n     */\n  }, {\n    key: \"toScVal\",\n    value: function toScVal() {\n      return _xdr[\"default\"].ScVal.scvAddress(this.toScAddress());\n    }\n\n    /**\n     * Convert this Address to an xdr.ScAddress type.\n     *\n     * @returns {xdr.ScAddress}\n     */\n  }, {\n    key: \"toScAddress\",\n    value: function toScAddress() {\n      switch (this._type) {\n        case 'account':\n          return _xdr[\"default\"].ScAddress.scAddressTypeAccount(_xdr[\"default\"].PublicKey.publicKeyTypeEd25519(this._key));\n        case 'contract':\n          return _xdr[\"default\"].ScAddress.scAddressTypeContract(this._key);\n        default:\n          throw new Error('Unsupported address type');\n      }\n    }\n\n    /**\n     * Return the raw public key bytes for this address.\n     *\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      return this._key;\n    }\n  }], [{\n    key: \"fromString\",\n    value: function fromString(address) {\n      return new Address(address);\n    }\n\n    /**\n     * Creates a new account Address object from a buffer of raw bytes.\n     *\n     * @param {Buffer} buffer - The bytes of an address to parse.\n     * @returns {Address}\n     */\n  }, {\n    key: \"account\",\n    value: function account(buffer) {\n      return new Address(_strkey.StrKey.encodeEd25519PublicKey(buffer));\n    }\n\n    /**\n     * Creates a new contract Address object from a buffer of raw bytes.\n     *\n     * @param {Buffer} buffer - The bytes of an address to parse.\n     * @returns {Address}\n     */\n  }, {\n    key: \"contract\",\n    value: function contract(buffer) {\n      return new Address(_strkey.StrKey.encodeContract(buffer));\n    }\n\n    /**\n     * Convert this from an xdr.ScVal type\n     *\n     * @param {xdr.ScVal} scVal - The xdr.ScVal type to parse\n     * @returns {Address}\n     */\n  }, {\n    key: \"fromScVal\",\n    value: function fromScVal(scVal) {\n      return Address.fromScAddress(scVal.address());\n    }\n\n    /**\n     * Convert this from an xdr.ScAddress type\n     *\n     * @param {xdr.ScAddress} scAddress - The xdr.ScAddress type to parse\n     * @returns {Address}\n     */\n  }, {\n    key: \"fromScAddress\",\n    value: function fromScAddress(scAddress) {\n      switch (scAddress[\"switch\"]().value) {\n        case _xdr[\"default\"].ScAddressType.scAddressTypeAccount().value:\n          return Address.account(scAddress.accountId().ed25519());\n        case _xdr[\"default\"].ScAddressType.scAddressTypeContract().value:\n          return Address.contract(scAddress.contractId());\n        default:\n          throw new Error('Unsupported address type');\n      }\n    }\n  }]);\n}();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 18191, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/invoke_host_function.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCustomContract = createCustomContract;\nexports.createStellarAssetContract = createStellarAssetContract;\nexports.invokeContractFunction = invokeContractFunction;\nexports.invokeHostFunction = invokeHostFunction;\nexports.uploadContractWasm = uploadContractWasm;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nvar _keypair = require(\"../keypair\");\nvar _address = require(\"../address\");\nvar _asset = require(\"../asset\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n/**\n * Invokes a single smart contract host function.\n *\n * @function\n * @alias Operation.invokeHostFunction\n *\n * @param {object} opts - options object\n * @param {xdr.HostFunction} opts.func - host function to execute (with its\n *    wrapped parameters)\n * @param {xdr.SorobanAuthorizationEntry[]} [opts.auth] - list outlining the\n *    tree of authorizations required for the call\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Invoke Host Function operation\n *    (xdr.InvokeHostFunctionOp)\n *\n * @see https://soroban.stellar.org/docs/fundamentals-and-concepts/invoking-contracts-with-transactions#function\n * @see Operation.invokeContractFunction\n * @see Operation.createCustomContract\n * @see Operation.createStellarAssetContract\n * @see Operation.uploadContractWasm\n * @see Contract.call\n */\nfunction invokeHostFunction(opts) {\n  if (!opts.func) {\n    throw new TypeError(\"host function invocation ('func') required (got \".concat(JSON.stringify(opts), \")\"));\n  }\n  var invokeHostFunctionOp = new _xdr[\"default\"].InvokeHostFunctionOp({\n    hostFunction: opts.func,\n    auth: opts.auth || []\n  });\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.invokeHostFunction(invokeHostFunctionOp)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}\n\n/**\n * Returns an operation that invokes a contract function.\n *\n * @function\n * @alias Operation.invokeContractFunction\n *\n * @param {any}         opts - the set of parameters\n * @param {string}      opts.contract - a strkey-fied contract address (`C...`)\n * @param {string}      opts.function - the name of the contract fn to invoke\n * @param {xdr.ScVal[]} opts.args - parameters to pass to the function\n *    invocation (try {@link nativeToScVal} or {@link ScInt} to make building\n *    these easier)\n * @param {xdr.SorobanAuthorizationEntry[]} [opts.auth] - an optional list\n *    outlining the tree of authorizations required for the call\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Invoke Host Function operation\n *    (xdr.InvokeHostFunctionOp)\n *\n * @see Operation.invokeHostFunction\n * @see Contract.call\n * @see Address\n */\nfunction invokeContractFunction(opts) {\n  var c = new _address.Address(opts.contract);\n  if (c._type !== 'contract') {\n    throw new TypeError(\"expected contract strkey instance, got \".concat(c));\n  }\n  return this.invokeHostFunction({\n    source: opts.source,\n    auth: opts.auth,\n    func: _xdr[\"default\"].HostFunction.hostFunctionTypeInvokeContract(new _xdr[\"default\"].InvokeContractArgs({\n      contractAddress: c.toScAddress(),\n      functionName: opts[\"function\"],\n      args: opts.args\n    }))\n  });\n}\n\n/**\n * Returns an operation that creates a custom WASM contract and atomically\n * invokes its constructor.\n *\n * @function\n * @alias Operation.createCustomContract\n *\n * @param {any}     opts - the set of parameters\n * @param {Address} opts.address - the contract uploader address\n * @param {Uint8Array|Buffer}  opts.wasmHash - the SHA-256 hash of the contract\n *    WASM you're uploading (see {@link hash} and\n *    {@link Operation.uploadContractWasm})\n * @param {xdr.ScVal[]} [opts.constructorArgs] - the optional parameters to pass\n *    to the constructor of this contract (see {@link nativeToScVal} for ways to\n *    easily create these parameters from native JS values)\n * @param {Uint8Array|Buffer} [opts.salt] - an optional, 32-byte salt to\n *    distinguish deployment instances of the same wasm from the same user (if\n *    omitted, one will be generated for you)\n * @param {xdr.SorobanAuthorizationEntry[]} [opts.auth] - an optional list\n *    outlining the tree of authorizations required for the call\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Invoke Host Function operation\n *    (xdr.InvokeHostFunctionOp)\n *\n * @see\n * https://soroban.stellar.org/docs/fundamentals-and-concepts/invoking-contracts-with-transactions#function\n */\nfunction createCustomContract(opts) {\n  var _opts$constructorArgs;\n  var salt = Buffer.from(opts.salt || getSalty());\n  if (!opts.wasmHash || opts.wasmHash.length !== 32) {\n    throw new TypeError(\"expected hash(contract WASM) in 'opts.wasmHash', got \".concat(opts.wasmHash));\n  }\n  if (salt.length !== 32) {\n    throw new TypeError(\"expected 32-byte salt in 'opts.salt', got \".concat(opts.wasmHash));\n  }\n  return this.invokeHostFunction({\n    source: opts.source,\n    auth: opts.auth,\n    func: _xdr[\"default\"].HostFunction.hostFunctionTypeCreateContractV2(new _xdr[\"default\"].CreateContractArgsV2({\n      executable: _xdr[\"default\"].ContractExecutable.contractExecutableWasm(Buffer.from(opts.wasmHash)),\n      contractIdPreimage: _xdr[\"default\"].ContractIdPreimage.contractIdPreimageFromAddress(new _xdr[\"default\"].ContractIdPreimageFromAddress({\n        address: opts.address.toScAddress(),\n        salt: salt\n      })),\n      constructorArgs: (_opts$constructorArgs = opts.constructorArgs) !== null && _opts$constructorArgs !== void 0 ? _opts$constructorArgs : []\n    }))\n  });\n}\n\n/**\n * Returns an operation that wraps a Stellar asset into a token contract.\n *\n * @function\n * @alias Operation.createStellarAssetContract\n *\n * @param {any}          opts - the set of parameters\n * @param {Asset|string} opts.asset - the Stellar asset to wrap, either as an\n *    {@link Asset} object or in canonical form (SEP-11, `code:issuer`)\n * @param {xdr.SorobanAuthorizationEntry[]} [opts.auth] - an optional list\n *    outlining the tree of authorizations required for the call\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Invoke Host Function operation\n *    (xdr.InvokeHostFunctionOp)\n *\n * @see https://stellar.org/protocol/sep-11#alphanum4-alphanum12\n * @see\n * https://soroban.stellar.org/docs/fundamentals-and-concepts/invoking-contracts-with-transactions\n * @see\n * https://soroban.stellar.org/docs/advanced-tutorials/stellar-asset-contract\n * @see Operation.invokeHostFunction\n */\nfunction createStellarAssetContract(opts) {\n  var asset = opts.asset;\n  if (typeof asset === 'string') {\n    var _asset$split = asset.split(':'),\n      _asset$split2 = _slicedToArray(_asset$split, 2),\n      code = _asset$split2[0],\n      issuer = _asset$split2[1];\n    asset = new _asset.Asset(code, issuer); // handles 'xlm' by default\n  }\n  if (!(asset instanceof _asset.Asset)) {\n    throw new TypeError(\"expected Asset in 'opts.asset', got \".concat(asset));\n  }\n  return this.invokeHostFunction({\n    source: opts.source,\n    auth: opts.auth,\n    func: _xdr[\"default\"].HostFunction.hostFunctionTypeCreateContract(new _xdr[\"default\"].CreateContractArgs({\n      executable: _xdr[\"default\"].ContractExecutable.contractExecutableStellarAsset(),\n      contractIdPreimage: _xdr[\"default\"].ContractIdPreimage.contractIdPreimageFromAsset(asset.toXDRObject())\n    }))\n  });\n}\n\n/**\n * Returns an operation that uploads WASM for a contract.\n *\n * @function\n * @alias Operation.uploadContractWasm\n *\n * @param {any}               opts - the set of parameters\n * @param {Uint8Array|Buffer} opts.wasm - a WASM blob to upload to the ledger\n * @param {xdr.SorobanAuthorizationEntry[]} [opts.auth] - an optional list\n *    outlining the tree of authorizations required for the call\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Invoke Host Function operation\n *    (xdr.InvokeHostFunctionOp)\n *\n * @see\n * https://soroban.stellar.org/docs/fundamentals-and-concepts/invoking-contracts-with-transactions#function\n */\nfunction uploadContractWasm(opts) {\n  return this.invokeHostFunction({\n    source: opts.source,\n    auth: opts.auth,\n    func: _xdr[\"default\"].HostFunction.hostFunctionTypeUploadContractWasm(Buffer.from(opts.wasm) // coalesce so we can drop `Buffer` someday\n    )\n  });\n}\n\n/** @returns {Buffer} a random 256-bit \"salt\" value. */\nfunction getSalty() {\n  return _keypair.Keypair.random().xdrPublicKey().value(); // ed25519 is 256 bits, too\n}"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 18446, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/extend_footprint_ttl.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendFootprintTtl = extendFootprintTtl;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Builds an operation to bump the time-to-live (TTL) of the ledger keys. The\n * keys for extension have to be provided in the read-only footprint of\n * the transaction.\n *\n * The only parameter of the operation itself is the new minimum TTL for\n * all the provided entries. If an entry already has a higher TTL, then it\n * will just be skipped.\n *\n * TTL is the number of ledgers from the current ledger (exclusive) until\n * the last ledger the entry is still considered alive (inclusive). Thus\n * the exact ledger until the entries will live will only be determined\n * when transaction has been applied.\n *\n * The footprint has to be specified in the transaction. See\n * {@link TransactionBuilder}'s `opts.sorobanData` parameter, which is a\n * {@link xdr.SorobanTransactionData} instance that contains fee data & resource\n * usage as part of {@link xdr.SorobanResources}.\n *\n * @function\n * @alias Operation.extendFootprintTtl\n *\n * @param {object} opts - object holding operation parameters\n * @param {number} opts.extendTo - the minimum TTL that all the entries in\n *    the read-only footprint will have\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} an Extend Footprint TTL operation\n *    (xdr.ExtendFootprintTTLOp)\n */\nfunction extendFootprintTtl(opts) {\n  var _opts$extendTo;\n  if (((_opts$extendTo = opts.extendTo) !== null && _opts$extendTo !== void 0 ? _opts$extendTo : -1) <= 0) {\n    throw new RangeError('extendTo has to be positive');\n  }\n  var extendFootprintOp = new _xdr[\"default\"].ExtendFootprintTtlOp({\n    ext: new _xdr[\"default\"].ExtensionPoint(0),\n    extendTo: opts.extendTo\n  });\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.extendFootprintTtl(extendFootprintOp)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,kBAAkB,GAAG;AAC7B,IAAI,OAAO;AACX,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6BC,GACD,SAAS,mBAAmB,IAAI;IAC9B,IAAI;IACJ,IAAI,CAAC,CAAC,iBAAiB,KAAK,QAAQ,MAAM,QAAQ,mBAAmB,KAAK,IAAI,iBAAiB,CAAC,CAAC,KAAK,GAAG;QACvG,MAAM,IAAI,WAAW;IACvB;IACA,IAAI,oBAAoB,IAAI,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC;QAC/D,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC;QACxC,UAAU,KAAK,QAAQ;IACzB;IACA,IAAI,eAAe;QACjB,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,kBAAkB,CAAC;IACzD;IACA,IAAI,CAAC,gBAAgB,CAAC,cAAc;IACpC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 18506, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/restore_footprint.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.restoreFootprint = restoreFootprint;\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Builds an operation to restore the archived ledger entries specified\n * by the ledger keys.\n *\n * The ledger keys to restore are specified separately from the operation\n * in read-write footprint of the transaction.\n *\n * It takes no parameters because the relevant footprint is derived from the\n * transaction itself. See {@link TransactionBuilder}'s `opts.sorobanData`\n * parameter (or {@link TransactionBuilder.setSorobanData} /\n * {@link TransactionBuilder.setLedgerKeys}), which is a\n * {@link xdr.SorobanTransactionData} instance that contains fee data & resource\n * usage as part of {@link xdr.SorobanTransactionData}.\n *\n * @function\n * @alias Operation.restoreFootprint\n *\n * @param {object} [opts] - an optional set of parameters\n * @param {string} [opts.source] - an optional source account\n *\n * @returns {xdr.Operation} a Bump Footprint Expiration operation\n *    (xdr.RestoreFootprintOp)\n */\nfunction restoreFootprint() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var op = new _xdr[\"default\"].RestoreFootprintOp({\n    ext: new _xdr[\"default\"].ExtensionPoint(0)\n  });\n  var opAttributes = {\n    body: _xdr[\"default\"].OperationBody.restoreFootprint(op)\n  };\n  this.setSourceAccount(opAttributes, opts !== null && opts !== void 0 ? opts : {});\n  return new _xdr[\"default\"].Operation(opAttributes);\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,gBAAgB,GAAG;AAC3B,IAAI,OAAO;AACX,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF;;;;;;;;;;;;;;;;;;;;;;CAsBC,GACD,SAAS;IACP,IAAI,OAAO,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAChF,IAAI,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC;QAC9C,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC;IAC1C;IACA,IAAI,eAAe;QACjB,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,gBAAgB,CAAC;IACvD;IACA,IAAI,CAAC,gBAAgB,CAAC,cAAc,SAAS,QAAQ,SAAS,KAAK,IAAI,OAAO,CAAC;IAC/E,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AACvC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 18555, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operations/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"accountMerge\", {\n  enumerable: true,\n  get: function get() {\n    return _account_merge.accountMerge;\n  }\n});\nObject.defineProperty(exports, \"allowTrust\", {\n  enumerable: true,\n  get: function get() {\n    return _allow_trust.allowTrust;\n  }\n});\nObject.defineProperty(exports, \"beginSponsoringFutureReserves\", {\n  enumerable: true,\n  get: function get() {\n    return _begin_sponsoring_future_reserves.beginSponsoringFutureReserves;\n  }\n});\nObject.defineProperty(exports, \"bumpSequence\", {\n  enumerable: true,\n  get: function get() {\n    return _bump_sequence.bumpSequence;\n  }\n});\nObject.defineProperty(exports, \"changeTrust\", {\n  enumerable: true,\n  get: function get() {\n    return _change_trust.changeTrust;\n  }\n});\nObject.defineProperty(exports, \"claimClaimableBalance\", {\n  enumerable: true,\n  get: function get() {\n    return _claim_claimable_balance.claimClaimableBalance;\n  }\n});\nObject.defineProperty(exports, \"clawback\", {\n  enumerable: true,\n  get: function get() {\n    return _clawback.clawback;\n  }\n});\nObject.defineProperty(exports, \"clawbackClaimableBalance\", {\n  enumerable: true,\n  get: function get() {\n    return _clawback_claimable_balance.clawbackClaimableBalance;\n  }\n});\nObject.defineProperty(exports, \"createAccount\", {\n  enumerable: true,\n  get: function get() {\n    return _create_account.createAccount;\n  }\n});\nObject.defineProperty(exports, \"createClaimableBalance\", {\n  enumerable: true,\n  get: function get() {\n    return _create_claimable_balance.createClaimableBalance;\n  }\n});\nObject.defineProperty(exports, \"createCustomContract\", {\n  enumerable: true,\n  get: function get() {\n    return _invoke_host_function.createCustomContract;\n  }\n});\nObject.defineProperty(exports, \"createPassiveSellOffer\", {\n  enumerable: true,\n  get: function get() {\n    return _create_passive_sell_offer.createPassiveSellOffer;\n  }\n});\nObject.defineProperty(exports, \"createStellarAssetContract\", {\n  enumerable: true,\n  get: function get() {\n    return _invoke_host_function.createStellarAssetContract;\n  }\n});\nObject.defineProperty(exports, \"endSponsoringFutureReserves\", {\n  enumerable: true,\n  get: function get() {\n    return _end_sponsoring_future_reserves.endSponsoringFutureReserves;\n  }\n});\nObject.defineProperty(exports, \"extendFootprintTtl\", {\n  enumerable: true,\n  get: function get() {\n    return _extend_footprint_ttl.extendFootprintTtl;\n  }\n});\nObject.defineProperty(exports, \"inflation\", {\n  enumerable: true,\n  get: function get() {\n    return _inflation.inflation;\n  }\n});\nObject.defineProperty(exports, \"invokeContractFunction\", {\n  enumerable: true,\n  get: function get() {\n    return _invoke_host_function.invokeContractFunction;\n  }\n});\nObject.defineProperty(exports, \"invokeHostFunction\", {\n  enumerable: true,\n  get: function get() {\n    return _invoke_host_function.invokeHostFunction;\n  }\n});\nObject.defineProperty(exports, \"liquidityPoolDeposit\", {\n  enumerable: true,\n  get: function get() {\n    return _liquidity_pool_deposit.liquidityPoolDeposit;\n  }\n});\nObject.defineProperty(exports, \"liquidityPoolWithdraw\", {\n  enumerable: true,\n  get: function get() {\n    return _liquidity_pool_withdraw.liquidityPoolWithdraw;\n  }\n});\nObject.defineProperty(exports, \"manageBuyOffer\", {\n  enumerable: true,\n  get: function get() {\n    return _manage_buy_offer.manageBuyOffer;\n  }\n});\nObject.defineProperty(exports, \"manageData\", {\n  enumerable: true,\n  get: function get() {\n    return _manage_data.manageData;\n  }\n});\nObject.defineProperty(exports, \"manageSellOffer\", {\n  enumerable: true,\n  get: function get() {\n    return _manage_sell_offer.manageSellOffer;\n  }\n});\nObject.defineProperty(exports, \"pathPaymentStrictReceive\", {\n  enumerable: true,\n  get: function get() {\n    return _path_payment_strict_receive.pathPaymentStrictReceive;\n  }\n});\nObject.defineProperty(exports, \"pathPaymentStrictSend\", {\n  enumerable: true,\n  get: function get() {\n    return _path_payment_strict_send.pathPaymentStrictSend;\n  }\n});\nObject.defineProperty(exports, \"payment\", {\n  enumerable: true,\n  get: function get() {\n    return _payment.payment;\n  }\n});\nObject.defineProperty(exports, \"restoreFootprint\", {\n  enumerable: true,\n  get: function get() {\n    return _restore_footprint.restoreFootprint;\n  }\n});\nObject.defineProperty(exports, \"revokeAccountSponsorship\", {\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeAccountSponsorship;\n  }\n});\nObject.defineProperty(exports, \"revokeClaimableBalanceSponsorship\", {\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeClaimableBalanceSponsorship;\n  }\n});\nObject.defineProperty(exports, \"revokeDataSponsorship\", {\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeDataSponsorship;\n  }\n});\nObject.defineProperty(exports, \"revokeLiquidityPoolSponsorship\", {\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeLiquidityPoolSponsorship;\n  }\n});\nObject.defineProperty(exports, \"revokeOfferSponsorship\", {\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeOfferSponsorship;\n  }\n});\nObject.defineProperty(exports, \"revokeSignerSponsorship\", {\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeSignerSponsorship;\n  }\n});\nObject.defineProperty(exports, \"revokeTrustlineSponsorship\", {\n  enumerable: true,\n  get: function get() {\n    return _revoke_sponsorship.revokeTrustlineSponsorship;\n  }\n});\nObject.defineProperty(exports, \"setOptions\", {\n  enumerable: true,\n  get: function get() {\n    return _set_options.setOptions;\n  }\n});\nObject.defineProperty(exports, \"setTrustLineFlags\", {\n  enumerable: true,\n  get: function get() {\n    return _set_trustline_flags.setTrustLineFlags;\n  }\n});\nObject.defineProperty(exports, \"uploadContractWasm\", {\n  enumerable: true,\n  get: function get() {\n    return _invoke_host_function.uploadContractWasm;\n  }\n});\nvar _manage_sell_offer = require(\"./manage_sell_offer\");\nvar _create_passive_sell_offer = require(\"./create_passive_sell_offer\");\nvar _account_merge = require(\"./account_merge\");\nvar _allow_trust = require(\"./allow_trust\");\nvar _bump_sequence = require(\"./bump_sequence\");\nvar _change_trust = require(\"./change_trust\");\nvar _create_account = require(\"./create_account\");\nvar _create_claimable_balance = require(\"./create_claimable_balance\");\nvar _claim_claimable_balance = require(\"./claim_claimable_balance\");\nvar _clawback_claimable_balance = require(\"./clawback_claimable_balance\");\nvar _inflation = require(\"./inflation\");\nvar _manage_data = require(\"./manage_data\");\nvar _manage_buy_offer = require(\"./manage_buy_offer\");\nvar _path_payment_strict_receive = require(\"./path_payment_strict_receive\");\nvar _path_payment_strict_send = require(\"./path_payment_strict_send\");\nvar _payment = require(\"./payment\");\nvar _set_options = require(\"./set_options\");\nvar _begin_sponsoring_future_reserves = require(\"./begin_sponsoring_future_reserves\");\nvar _end_sponsoring_future_reserves = require(\"./end_sponsoring_future_reserves\");\nvar _revoke_sponsorship = require(\"./revoke_sponsorship\");\nvar _clawback = require(\"./clawback\");\nvar _set_trustline_flags = require(\"./set_trustline_flags\");\nvar _liquidity_pool_deposit = require(\"./liquidity_pool_deposit\");\nvar _liquidity_pool_withdraw = require(\"./liquidity_pool_withdraw\");\nvar _invoke_host_function = require(\"./invoke_host_function\");\nvar _extend_footprint_ttl = require(\"./extend_footprint_ttl\");\nvar _restore_footprint = require(\"./restore_footprint\");"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 18813, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/operation.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Operation = exports.AuthRevocableFlag = exports.AuthRequiredFlag = exports.AuthImmutableFlag = exports.AuthClawbackEnabledFlag = void 0;\nvar _jsXdr = require(\"@stellar/js-xdr\");\nvar _bignumber = _interopRequireDefault(require(\"./util/bignumber\"));\nvar _util = require(\"./util/util\");\nvar _continued_fraction = require(\"./util/continued_fraction\");\nvar _asset = require(\"./asset\");\nvar _liquidity_pool_asset = require(\"./liquidity_pool_asset\");\nvar _claimant = require(\"./claimant\");\nvar _strkey = require(\"./strkey\");\nvar _liquidity_pool_id = require(\"./liquidity_pool_id\");\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nvar ops = _interopRequireWildcard(require(\"./operations\"));\nvar _decode_encode_muxed_account = require(\"./util/decode_encode_muxed_account\");\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return { \"default\": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n[\"default\"] = e, t && t.set(e, n), n; }\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); } /* eslint-disable no-bitwise */\nvar ONE = 10000000;\nvar MAX_INT64 = '9223372036854775807';\n\n/**\n * When set using `{@link Operation.setOptions}` option, requires the issuing\n * account to give other accounts permission before they can hold the issuing\n * account’s credit.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthRequiredFlag = exports.AuthRequiredFlag = 1 << 0;\n/**\n * When set using `{@link Operation.setOptions}` option, allows the issuing\n * account to revoke its credit held by other accounts.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthRevocableFlag = exports.AuthRevocableFlag = 1 << 1;\n/**\n * When set using `{@link Operation.setOptions}` option, then none of the\n * authorization flags can be set and the account can never be deleted.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthImmutableFlag = exports.AuthImmutableFlag = 1 << 2;\n\n/**\n * When set using `{@link Operation.setOptions}` option, then any trustlines\n * created by this account can have a ClawbackOp operation submitted for the\n * corresponding asset.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthClawbackEnabledFlag = exports.AuthClawbackEnabledFlag = 1 << 3;\n\n/**\n * `Operation` class represents\n * [operations](https://developers.stellar.org/docs/glossary/operations/) in\n * Stellar network.\n *\n * Use one of static methods to create operations:\n * * `{@link Operation.createAccount}`\n * * `{@link Operation.payment}`\n * * `{@link Operation.pathPaymentStrictReceive}`\n * * `{@link Operation.pathPaymentStrictSend}`\n * * `{@link Operation.manageSellOffer}`\n * * `{@link Operation.manageBuyOffer}`\n * * `{@link Operation.createPassiveSellOffer}`\n * * `{@link Operation.setOptions}`\n * * `{@link Operation.changeTrust}`\n * * `{@link Operation.allowTrust}`\n * * `{@link Operation.accountMerge}`\n * * `{@link Operation.inflation}`\n * * `{@link Operation.manageData}`\n * * `{@link Operation.bumpSequence}`\n * * `{@link Operation.createClaimableBalance}`\n * * `{@link Operation.claimClaimableBalance}`\n * * `{@link Operation.beginSponsoringFutureReserves}`\n * * `{@link Operation.endSponsoringFutureReserves}`\n * * `{@link Operation.revokeAccountSponsorship}`\n * * `{@link Operation.revokeTrustlineSponsorship}`\n * * `{@link Operation.revokeOfferSponsorship}`\n * * `{@link Operation.revokeDataSponsorship}`\n * * `{@link Operation.revokeClaimableBalanceSponsorship}`\n * * `{@link Operation.revokeLiquidityPoolSponsorship}`\n * * `{@link Operation.revokeSignerSponsorship}`\n * * `{@link Operation.clawback}`\n * * `{@link Operation.clawbackClaimableBalance}`\n * * `{@link Operation.setTrustLineFlags}`\n * * `{@link Operation.liquidityPoolDeposit}`\n * * `{@link Operation.liquidityPoolWithdraw}`\n * * `{@link Operation.invokeHostFunction}`, which has the following additional\n *   \"pseudo-operations\" that make building host functions easier:\n *   - `{@link Operation.createStellarAssetContract}`\n *   - `{@link Operation.invokeContractFunction}`\n *   - `{@link Operation.createCustomContract}`\n *   - `{@link Operation.uploadContractWasm}`\n * * `{@link Operation.extendFootprintTtlOp}`\n * * `{@link Operation.restoreFootprint}`\n *\n * @class Operation\n */\nvar Operation = exports.Operation = /*#__PURE__*/function () {\n  function Operation() {\n    _classCallCheck(this, Operation);\n  }\n  return _createClass(Operation, null, [{\n    key: \"setSourceAccount\",\n    value: function setSourceAccount(opAttributes, opts) {\n      if (opts.source) {\n        try {\n          opAttributes.sourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.source);\n        } catch (e) {\n          throw new Error('Source address is invalid');\n        }\n      }\n    }\n\n    /**\n     * Deconstructs the raw XDR operation object into the structured object that\n     * was used to create the operation (i.e. the `opts` parameter to most ops).\n     *\n     * @param {xdr.Operation}   operation - An XDR Operation.\n     * @return {Operation}\n     */\n  }, {\n    key: \"fromXDRObject\",\n    value: function fromXDRObject(operation) {\n      var result = {};\n      if (operation.sourceAccount()) {\n        result.source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(operation.sourceAccount());\n      }\n      var attrs = operation.body().value();\n      var operationName = operation.body()[\"switch\"]().name;\n      switch (operationName) {\n        case 'createAccount':\n          {\n            result.type = 'createAccount';\n            result.destination = accountIdtoAddress(attrs.destination());\n            result.startingBalance = this._fromXDRAmount(attrs.startingBalance());\n            break;\n          }\n        case 'payment':\n          {\n            result.type = 'payment';\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            break;\n          }\n        case 'pathPaymentStrictReceive':\n          {\n            result.type = 'pathPaymentStrictReceive';\n            result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());\n            result.sendMax = this._fromXDRAmount(attrs.sendMax());\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());\n            result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());\n            result.destAmount = this._fromXDRAmount(attrs.destAmount());\n            result.path = [];\n            var path = attrs.path();\n\n            // note that Object.values isn't supported by node 6!\n            Object.keys(path).forEach(function (pathKey) {\n              result.path.push(_asset.Asset.fromOperation(path[pathKey]));\n            });\n            break;\n          }\n        case 'pathPaymentStrictSend':\n          {\n            result.type = 'pathPaymentStrictSend';\n            result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());\n            result.sendAmount = this._fromXDRAmount(attrs.sendAmount());\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());\n            result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());\n            result.destMin = this._fromXDRAmount(attrs.destMin());\n            result.path = [];\n            var _path = attrs.path();\n\n            // note that Object.values isn't supported by node 6!\n            Object.keys(_path).forEach(function (pathKey) {\n              result.path.push(_asset.Asset.fromOperation(_path[pathKey]));\n            });\n            break;\n          }\n        case 'changeTrust':\n          {\n            result.type = 'changeTrust';\n            switch (attrs.line()[\"switch\"]()) {\n              case _xdr[\"default\"].AssetType.assetTypePoolShare():\n                result.line = _liquidity_pool_asset.LiquidityPoolAsset.fromOperation(attrs.line());\n                break;\n              default:\n                result.line = _asset.Asset.fromOperation(attrs.line());\n                break;\n            }\n            result.limit = this._fromXDRAmount(attrs.limit());\n            break;\n          }\n        case 'allowTrust':\n          {\n            result.type = 'allowTrust';\n            result.trustor = accountIdtoAddress(attrs.trustor());\n            result.assetCode = attrs.asset().value().toString();\n            result.assetCode = (0, _util.trimEnd)(result.assetCode, '\\0');\n            result.authorize = attrs.authorize();\n            break;\n          }\n        case 'setOptions':\n          {\n            result.type = 'setOptions';\n            if (attrs.inflationDest()) {\n              result.inflationDest = accountIdtoAddress(attrs.inflationDest());\n            }\n            result.clearFlags = attrs.clearFlags();\n            result.setFlags = attrs.setFlags();\n            result.masterWeight = attrs.masterWeight();\n            result.lowThreshold = attrs.lowThreshold();\n            result.medThreshold = attrs.medThreshold();\n            result.highThreshold = attrs.highThreshold();\n            // home_domain is checked by iscntrl in stellar-core\n            result.homeDomain = attrs.homeDomain() !== undefined ? attrs.homeDomain().toString('ascii') : undefined;\n            if (attrs.signer()) {\n              var signer = {};\n              var arm = attrs.signer().key().arm();\n              if (arm === 'ed25519') {\n                signer.ed25519PublicKey = accountIdtoAddress(attrs.signer().key());\n              } else if (arm === 'preAuthTx') {\n                signer.preAuthTx = attrs.signer().key().preAuthTx();\n              } else if (arm === 'hashX') {\n                signer.sha256Hash = attrs.signer().key().hashX();\n              } else if (arm === 'ed25519SignedPayload') {\n                var signedPayload = attrs.signer().key().ed25519SignedPayload();\n                signer.ed25519SignedPayload = _strkey.StrKey.encodeSignedPayload(signedPayload.toXDR());\n              }\n              signer.weight = attrs.signer().weight();\n              result.signer = signer;\n            }\n            break;\n          }\n        // the next case intentionally falls through!\n        case 'manageOffer':\n        case 'manageSellOffer':\n          {\n            result.type = 'manageSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n        case 'manageBuyOffer':\n          {\n            result.type = 'manageBuyOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.buyAmount = this._fromXDRAmount(attrs.buyAmount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n        // the next case intentionally falls through!\n        case 'createPassiveOffer':\n        case 'createPassiveSellOffer':\n          {\n            result.type = 'createPassiveSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            break;\n          }\n        case 'accountMerge':\n          {\n            result.type = 'accountMerge';\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs);\n            break;\n          }\n        case 'manageData':\n          {\n            result.type = 'manageData';\n            // manage_data.name is checked by iscntrl in stellar-core\n            result.name = attrs.dataName().toString('ascii');\n            result.value = attrs.dataValue();\n            break;\n          }\n        case 'inflation':\n          {\n            result.type = 'inflation';\n            break;\n          }\n        case 'bumpSequence':\n          {\n            result.type = 'bumpSequence';\n            result.bumpTo = attrs.bumpTo().toString();\n            break;\n          }\n        case 'createClaimableBalance':\n          {\n            result.type = 'createClaimableBalance';\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.claimants = [];\n            attrs.claimants().forEach(function (claimant) {\n              result.claimants.push(_claimant.Claimant.fromXDR(claimant));\n            });\n            break;\n          }\n        case 'claimClaimableBalance':\n          {\n            result.type = 'claimClaimableBalance';\n            result.balanceId = attrs.toXDR('hex');\n            break;\n          }\n        case 'beginSponsoringFutureReserves':\n          {\n            result.type = 'beginSponsoringFutureReserves';\n            result.sponsoredId = accountIdtoAddress(attrs.sponsoredId());\n            break;\n          }\n        case 'endSponsoringFutureReserves':\n          {\n            result.type = 'endSponsoringFutureReserves';\n            break;\n          }\n        case 'revokeSponsorship':\n          {\n            extractRevokeSponshipDetails(attrs, result);\n            break;\n          }\n        case 'clawback':\n          {\n            result.type = 'clawback';\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.from = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.from());\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            break;\n          }\n        case 'clawbackClaimableBalance':\n          {\n            result.type = 'clawbackClaimableBalance';\n            result.balanceId = attrs.toXDR('hex');\n            break;\n          }\n        case 'setTrustLineFlags':\n          {\n            result.type = 'setTrustLineFlags';\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.trustor = accountIdtoAddress(attrs.trustor());\n\n            // Convert from the integer-bitwised flag into a sensible object that\n            // indicates true/false for each flag that's on/off.\n            var clears = attrs.clearFlags();\n            var sets = attrs.setFlags();\n            var mapping = {\n              authorized: _xdr[\"default\"].TrustLineFlags.authorizedFlag(),\n              authorizedToMaintainLiabilities: _xdr[\"default\"].TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),\n              clawbackEnabled: _xdr[\"default\"].TrustLineFlags.trustlineClawbackEnabledFlag()\n            };\n            var getFlagValue = function getFlagValue(key) {\n              var bit = mapping[key].value;\n              if (sets & bit) {\n                return true;\n              }\n              if (clears & bit) {\n                return false;\n              }\n              return undefined;\n            };\n            result.flags = {};\n            Object.keys(mapping).forEach(function (flagName) {\n              result.flags[flagName] = getFlagValue(flagName);\n            });\n            break;\n          }\n        case 'liquidityPoolDeposit':\n          {\n            result.type = 'liquidityPoolDeposit';\n            result.liquidityPoolId = attrs.liquidityPoolId().toString('hex');\n            result.maxAmountA = this._fromXDRAmount(attrs.maxAmountA());\n            result.maxAmountB = this._fromXDRAmount(attrs.maxAmountB());\n            result.minPrice = this._fromXDRPrice(attrs.minPrice());\n            result.maxPrice = this._fromXDRPrice(attrs.maxPrice());\n            break;\n          }\n        case 'liquidityPoolWithdraw':\n          {\n            result.type = 'liquidityPoolWithdraw';\n            result.liquidityPoolId = attrs.liquidityPoolId().toString('hex');\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.minAmountA = this._fromXDRAmount(attrs.minAmountA());\n            result.minAmountB = this._fromXDRAmount(attrs.minAmountB());\n            break;\n          }\n        case 'invokeHostFunction':\n          {\n            var _attrs$auth;\n            result.type = 'invokeHostFunction';\n            result.func = attrs.hostFunction();\n            result.auth = (_attrs$auth = attrs.auth()) !== null && _attrs$auth !== void 0 ? _attrs$auth : [];\n            break;\n          }\n        case 'extendFootprintTtl':\n          {\n            result.type = 'extendFootprintTtl';\n            result.extendTo = attrs.extendTo();\n            break;\n          }\n        case 'restoreFootprint':\n          {\n            result.type = 'restoreFootprint';\n            break;\n          }\n        default:\n          {\n            throw new Error(\"Unknown operation: \".concat(operationName));\n          }\n      }\n      return result;\n    }\n\n    /**\n     * Validates that a given amount is possible for a Stellar asset.\n     *\n     * Specifically, this means that the amount is well, a valid number, but also\n     * that it is within the int64 range and has no more than 7 decimal levels of\n     * precision.\n     *\n     * Note that while smart contracts allow larger amounts, this is oriented\n     * towards validating the standard Stellar operations.\n     *\n     * @param {string}  value       the amount to validate\n     * @param {boolean} allowZero   optionally, whether or not zero is valid (default: no)\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValidAmount\",\n    value: function isValidAmount(value) {\n      var allowZero = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (typeof value !== 'string') {\n        return false;\n      }\n      var amount;\n      try {\n        amount = new _bignumber[\"default\"](value);\n      } catch (e) {\n        return false;\n      }\n      if (\n      // == 0\n      !allowZero && amount.isZero() ||\n      // < 0\n      amount.isNegative() ||\n      // > Max value\n      amount.times(ONE).gt(new _bignumber[\"default\"](MAX_INT64).toString()) ||\n      // Decimal places (max 7)\n      amount.decimalPlaces() > 7 ||\n      // NaN or Infinity\n      amount.isNaN() || !amount.isFinite()) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"constructAmountRequirementsError\",\n    value: function constructAmountRequirementsError(arg) {\n      return \"\".concat(arg, \" argument must be of type String, represent a positive number and have at most 7 digits after the decimal\");\n    }\n\n    /**\n     * Returns value converted to uint32 value or undefined.\n     * If `value` is not `Number`, `String` or `Undefined` then throws an error.\n     * Used in {@link Operation.setOptions}.\n     * @private\n     * @param {string} name Name of the property (used in error message only)\n     * @param {*} value Value to check\n     * @param {function(value, name)} isValidFunction Function to check other constraints (the argument will be a `Number`)\n     * @returns {undefined|Number}\n     */\n  }, {\n    key: \"_checkUnsignedIntValue\",\n    value: function _checkUnsignedIntValue(name, value) {\n      var isValidFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      if (typeof value === 'undefined') {\n        return undefined;\n      }\n      if (typeof value === 'string') {\n        value = parseFloat(value);\n      }\n      switch (true) {\n        case typeof value !== 'number' || !Number.isFinite(value) || value % 1 !== 0:\n          throw new Error(\"\".concat(name, \" value is invalid\"));\n        case value < 0:\n          throw new Error(\"\".concat(name, \" value must be unsigned\"));\n        case !isValidFunction || isValidFunction && isValidFunction(value, name):\n          return value;\n        default:\n          throw new Error(\"\".concat(name, \" value is invalid\"));\n      }\n    }\n    /**\n     * @private\n     * @param {string|BigNumber} value Value\n     * @returns {Hyper} XDR amount\n     */\n  }, {\n    key: \"_toXDRAmount\",\n    value: function _toXDRAmount(value) {\n      var amount = new _bignumber[\"default\"](value).times(ONE);\n      return _jsXdr.Hyper.fromString(amount.toString());\n    }\n\n    /**\n     * @private\n     * @param {string|BigNumber} value XDR amount\n     * @returns {BigNumber} Number\n     */\n  }, {\n    key: \"_fromXDRAmount\",\n    value: function _fromXDRAmount(value) {\n      return new _bignumber[\"default\"](value).div(ONE).toFixed(7);\n    }\n\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {BigNumber} Big string\n     */\n  }, {\n    key: \"_fromXDRPrice\",\n    value: function _fromXDRPrice(price) {\n      var n = new _bignumber[\"default\"](price.n());\n      return n.div(new _bignumber[\"default\"](price.d())).toString();\n    }\n\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {object} XDR price object\n     */\n  }, {\n    key: \"_toXDRPrice\",\n    value: function _toXDRPrice(price) {\n      var xdrObject;\n      if (price.n && price.d) {\n        xdrObject = new _xdr[\"default\"].Price(price);\n      } else {\n        var approx = (0, _continued_fraction.best_r)(price);\n        xdrObject = new _xdr[\"default\"].Price({\n          n: parseInt(approx[0], 10),\n          d: parseInt(approx[1], 10)\n        });\n      }\n      if (xdrObject.n() < 0 || xdrObject.d() < 0) {\n        throw new Error('price must be positive');\n      }\n      return xdrObject;\n    }\n  }]);\n}();\nfunction extractRevokeSponshipDetails(attrs, result) {\n  switch (attrs[\"switch\"]().name) {\n    case 'revokeSponsorshipLedgerEntry':\n      {\n        var ledgerKey = attrs.ledgerKey();\n        switch (ledgerKey[\"switch\"]().name) {\n          case _xdr[\"default\"].LedgerEntryType.account().name:\n            {\n              result.type = 'revokeAccountSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.account().accountId());\n              break;\n            }\n          case _xdr[\"default\"].LedgerEntryType.trustline().name:\n            {\n              result.type = 'revokeTrustlineSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.trustLine().accountId());\n              var xdrAsset = ledgerKey.trustLine().asset();\n              switch (xdrAsset[\"switch\"]()) {\n                case _xdr[\"default\"].AssetType.assetTypePoolShare():\n                  result.asset = _liquidity_pool_id.LiquidityPoolId.fromOperation(xdrAsset);\n                  break;\n                default:\n                  result.asset = _asset.Asset.fromOperation(xdrAsset);\n                  break;\n              }\n              break;\n            }\n          case _xdr[\"default\"].LedgerEntryType.offer().name:\n            {\n              result.type = 'revokeOfferSponsorship';\n              result.seller = accountIdtoAddress(ledgerKey.offer().sellerId());\n              result.offerId = ledgerKey.offer().offerId().toString();\n              break;\n            }\n          case _xdr[\"default\"].LedgerEntryType.data().name:\n            {\n              result.type = 'revokeDataSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.data().accountId());\n              result.name = ledgerKey.data().dataName().toString('ascii');\n              break;\n            }\n          case _xdr[\"default\"].LedgerEntryType.claimableBalance().name:\n            {\n              result.type = 'revokeClaimableBalanceSponsorship';\n              result.balanceId = ledgerKey.claimableBalance().balanceId().toXDR('hex');\n              break;\n            }\n          case _xdr[\"default\"].LedgerEntryType.liquidityPool().name:\n            {\n              result.type = 'revokeLiquidityPoolSponsorship';\n              result.liquidityPoolId = ledgerKey.liquidityPool().liquidityPoolId().toString('hex');\n              break;\n            }\n          default:\n            {\n              throw new Error(\"Unknown ledgerKey: \".concat(attrs[\"switch\"]().name));\n            }\n        }\n        break;\n      }\n    case 'revokeSponsorshipSigner':\n      {\n        result.type = 'revokeSignerSponsorship';\n        result.account = accountIdtoAddress(attrs.signer().accountId());\n        result.signer = convertXDRSignerKeyToObject(attrs.signer().signerKey());\n        break;\n      }\n    default:\n      {\n        throw new Error(\"Unknown revokeSponsorship: \".concat(attrs[\"switch\"]().name));\n      }\n  }\n}\nfunction convertXDRSignerKeyToObject(signerKey) {\n  var attrs = {};\n  switch (signerKey[\"switch\"]().name) {\n    case _xdr[\"default\"].SignerKeyType.signerKeyTypeEd25519().name:\n      {\n        attrs.ed25519PublicKey = _strkey.StrKey.encodeEd25519PublicKey(signerKey.ed25519());\n        break;\n      }\n    case _xdr[\"default\"].SignerKeyType.signerKeyTypePreAuthTx().name:\n      {\n        attrs.preAuthTx = signerKey.preAuthTx().toString('hex');\n        break;\n      }\n    case _xdr[\"default\"].SignerKeyType.signerKeyTypeHashX().name:\n      {\n        attrs.sha256Hash = signerKey.hashX().toString('hex');\n        break;\n      }\n    default:\n      {\n        throw new Error(\"Unknown signerKey: \".concat(signerKey[\"switch\"]().name));\n      }\n  }\n  return attrs;\n}\nfunction accountIdtoAddress(accountId) {\n  return _strkey.StrKey.encodeEd25519PublicKey(accountId.ed25519());\n}\n\n// Attach all imported operations as static methods on the Operation class\nOperation.accountMerge = ops.accountMerge;\nOperation.allowTrust = ops.allowTrust;\nOperation.bumpSequence = ops.bumpSequence;\nOperation.changeTrust = ops.changeTrust;\nOperation.createAccount = ops.createAccount;\nOperation.createClaimableBalance = ops.createClaimableBalance;\nOperation.claimClaimableBalance = ops.claimClaimableBalance;\nOperation.clawbackClaimableBalance = ops.clawbackClaimableBalance;\nOperation.createPassiveSellOffer = ops.createPassiveSellOffer;\nOperation.inflation = ops.inflation;\nOperation.manageData = ops.manageData;\nOperation.manageSellOffer = ops.manageSellOffer;\nOperation.manageBuyOffer = ops.manageBuyOffer;\nOperation.pathPaymentStrictReceive = ops.pathPaymentStrictReceive;\nOperation.pathPaymentStrictSend = ops.pathPaymentStrictSend;\nOperation.payment = ops.payment;\nOperation.setOptions = ops.setOptions;\nOperation.beginSponsoringFutureReserves = ops.beginSponsoringFutureReserves;\nOperation.endSponsoringFutureReserves = ops.endSponsoringFutureReserves;\nOperation.revokeAccountSponsorship = ops.revokeAccountSponsorship;\nOperation.revokeTrustlineSponsorship = ops.revokeTrustlineSponsorship;\nOperation.revokeOfferSponsorship = ops.revokeOfferSponsorship;\nOperation.revokeDataSponsorship = ops.revokeDataSponsorship;\nOperation.revokeClaimableBalanceSponsorship = ops.revokeClaimableBalanceSponsorship;\nOperation.revokeLiquidityPoolSponsorship = ops.revokeLiquidityPoolSponsorship;\nOperation.revokeSignerSponsorship = ops.revokeSignerSponsorship;\nOperation.clawback = ops.clawback;\nOperation.setTrustLineFlags = ops.setTrustLineFlags;\nOperation.liquidityPoolDeposit = ops.liquidityPoolDeposit;\nOperation.liquidityPoolWithdraw = ops.liquidityPoolWithdraw;\nOperation.invokeHostFunction = ops.invokeHostFunction;\nOperation.extendFootprintTtl = ops.extendFootprintTtl;\nOperation.restoreFootprint = ops.restoreFootprint;\n\n// these are not `xdr.Operation`s directly, but are proxies for complex but\n// common versions of `Operation.invokeHostFunction`\nOperation.createStellarAssetContract = ops.createStellarAssetContract;\nOperation.invokeContractFunction = ops.invokeContractFunction;\nOperation.createCustomContract = ops.createCustomContract;\nOperation.uploadContractWasm = ops.uploadContractWasm;"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 19521, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/memo.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MemoText = exports.MemoReturn = exports.MemoNone = exports.MemoID = exports.MemoHash = exports.Memo = void 0;\nvar _jsXdr = require(\"@stellar/js-xdr\");\nvar _bignumber = _interopRequireDefault(require(\"./util/bignumber\"));\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Type of {@link Memo}.\n */\nvar MemoNone = exports.MemoNone = 'none';\n/**\n * Type of {@link Memo}.\n */\nvar MemoID = exports.MemoID = 'id';\n/**\n * Type of {@link Memo}.\n */\nvar MemoText = exports.MemoText = 'text';\n/**\n * Type of {@link Memo}.\n */\nvar MemoHash = exports.MemoHash = 'hash';\n/**\n * Type of {@link Memo}.\n */\nvar MemoReturn = exports.MemoReturn = 'return';\n\n/**\n * `Memo` represents memos attached to transactions.\n *\n * @param {string} type - `MemoNone`, `MemoID`, `MemoText`, `MemoHash` or `MemoReturn`\n * @param {*} value - `string` for `MemoID`, `MemoText`, buffer of hex string for `MemoHash` or `MemoReturn`\n * @see [Transactions concept](https://developers.stellar.org/docs/glossary/transactions/)\n * @class Memo\n */\nvar Memo = exports.Memo = /*#__PURE__*/function () {\n  function Memo(type) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    _classCallCheck(this, Memo);\n    this._type = type;\n    this._value = value;\n    switch (this._type) {\n      case MemoNone:\n        break;\n      case MemoID:\n        Memo._validateIdValue(value);\n        break;\n      case MemoText:\n        Memo._validateTextValue(value);\n        break;\n      case MemoHash:\n      case MemoReturn:\n        Memo._validateHashValue(value);\n        // We want MemoHash and MemoReturn to have Buffer as a value\n        if (typeof value === 'string') {\n          this._value = Buffer.from(value, 'hex');\n        }\n        break;\n      default:\n        throw new Error('Invalid memo type');\n    }\n  }\n\n  /**\n   * Contains memo type: `MemoNone`, `MemoID`, `MemoText`, `MemoHash` or `MemoReturn`\n   */\n  return _createClass(Memo, [{\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(type) {\n      throw new Error('Memo is immutable');\n    }\n\n    /**\n     * Contains memo value:\n     * * `null` for `MemoNone`,\n     * * `string` for `MemoID`,\n     * * `Buffer` for `MemoText` after decoding using `fromXDRObject`, original value otherwise,\n     * * `Buffer` for `MemoHash`, `MemoReturn`.\n     */\n  }, {\n    key: \"value\",\n    get: function get() {\n      switch (this._type) {\n        case MemoNone:\n          return null;\n        case MemoID:\n        case MemoText:\n          return this._value;\n        case MemoHash:\n        case MemoReturn:\n          return Buffer.from(this._value);\n        default:\n          throw new Error('Invalid memo type');\n      }\n    },\n    set: function set(value) {\n      throw new Error('Memo is immutable');\n    }\n  }, {\n    key: \"toXDRObject\",\n    value:\n    /**\n     * Returns XDR memo object.\n     * @returns {xdr.Memo}\n     */\n    function toXDRObject() {\n      switch (this._type) {\n        case MemoNone:\n          return _xdr[\"default\"].Memo.memoNone();\n        case MemoID:\n          return _xdr[\"default\"].Memo.memoId(_jsXdr.UnsignedHyper.fromString(this._value));\n        case MemoText:\n          return _xdr[\"default\"].Memo.memoText(this._value);\n        case MemoHash:\n          return _xdr[\"default\"].Memo.memoHash(this._value);\n        case MemoReturn:\n          return _xdr[\"default\"].Memo.memoReturn(this._value);\n        default:\n          return null;\n      }\n    }\n\n    /**\n     * Returns {@link Memo} from XDR memo object.\n     * @param {xdr.Memo} object XDR memo object\n     * @returns {Memo}\n     */\n  }], [{\n    key: \"_validateIdValue\",\n    value: function _validateIdValue(value) {\n      var error = new Error(\"Expects a int64 as a string. Got \".concat(value));\n      if (typeof value !== 'string') {\n        throw error;\n      }\n      var number;\n      try {\n        number = new _bignumber[\"default\"](value);\n      } catch (e) {\n        throw error;\n      }\n\n      // Infinity\n      if (!number.isFinite()) {\n        throw error;\n      }\n\n      // NaN\n      if (number.isNaN()) {\n        throw error;\n      }\n    }\n  }, {\n    key: \"_validateTextValue\",\n    value: function _validateTextValue(value) {\n      if (!_xdr[\"default\"].Memo.armTypeForArm('text').isValid(value)) {\n        throw new Error('Expects string, array or buffer, max 28 bytes');\n      }\n    }\n  }, {\n    key: \"_validateHashValue\",\n    value: function _validateHashValue(value) {\n      var error = new Error(\"Expects a 32 byte hash value or hex encoded string. Got \".concat(value));\n      if (value === null || typeof value === 'undefined') {\n        throw error;\n      }\n      var valueBuffer;\n      if (typeof value === 'string') {\n        if (!/^[0-9A-Fa-f]{64}$/g.test(value)) {\n          throw error;\n        }\n        valueBuffer = Buffer.from(value, 'hex');\n      } else if (Buffer.isBuffer(value)) {\n        valueBuffer = Buffer.from(value);\n      } else {\n        throw error;\n      }\n      if (!valueBuffer.length || valueBuffer.length !== 32) {\n        throw error;\n      }\n    }\n\n    /**\n     * Returns an empty memo (`MemoNone`).\n     * @returns {Memo}\n     */\n  }, {\n    key: \"none\",\n    value: function none() {\n      return new Memo(MemoNone);\n    }\n\n    /**\n     * Creates and returns a `MemoText` memo.\n     * @param {string} text - memo text\n     * @returns {Memo}\n     */\n  }, {\n    key: \"text\",\n    value: function text(_text) {\n      return new Memo(MemoText, _text);\n    }\n\n    /**\n     * Creates and returns a `MemoID` memo.\n     * @param {string} id - 64-bit number represented as a string\n     * @returns {Memo}\n     */\n  }, {\n    key: \"id\",\n    value: function id(_id) {\n      return new Memo(MemoID, _id);\n    }\n\n    /**\n     * Creates and returns a `MemoHash` memo.\n     * @param {array|string} hash - 32 byte hash or hex encoded string\n     * @returns {Memo}\n     */\n  }, {\n    key: \"hash\",\n    value: function hash(_hash) {\n      return new Memo(MemoHash, _hash);\n    }\n\n    /**\n     * Creates and returns a `MemoReturn` memo.\n     * @param {array|string} hash - 32 byte hash or hex encoded string\n     * @returns {Memo}\n     */\n  }, {\n    key: \"return\",\n    value: function _return(hash) {\n      return new Memo(MemoReturn, hash);\n    }\n  }, {\n    key: \"fromXDRObject\",\n    value: function fromXDRObject(object) {\n      switch (object.arm()) {\n        case 'id':\n          return Memo.id(object.value().toString());\n        case 'text':\n          return Memo.text(object.value());\n        case 'hash':\n          return Memo.hash(object.value());\n        case 'retHash':\n          return Memo[\"return\"](object.value());\n        default:\n          break;\n      }\n      if (typeof object.value() === 'undefined') {\n        return Memo.none();\n      }\n      throw new Error('Unknown type');\n    }\n  }]);\n}();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 19786, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/transaction.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = void 0;\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nvar _hashing = require(\"./hashing\");\nvar _strkey = require(\"./strkey\");\nvar _operation = require(\"./operation\");\nvar _memo = require(\"./memo\");\nvar _transaction_base = require(\"./transaction_base\");\nvar _decode_encode_muxed_account = require(\"./util/decode_encode_muxed_account\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n/**\n * Use {@link TransactionBuilder} to build a transaction object. If you have an\n * object or base64-encoded string of the transaction envelope XDR, use {@link\n * TransactionBuilder.fromXDR}.\n *\n * Once a Transaction has been created, its attributes and operations should not\n * be changed. You should only add signatures (using {@link Transaction#sign})\n * to a Transaction object before submitting to the network or forwarding on to\n * additional signers.\n *\n * @constructor\n *\n * @param {string|xdr.TransactionEnvelope} envelope - transaction envelope\n *     object or base64 encoded string\n * @param {string}  [networkPassphrase] - passphrase of the target stellar\n *     network (e.g. \"Public Global Stellar Network ; September 2015\")\n *\n * @extends TransactionBase\n */\nvar Transaction = exports.Transaction = /*#__PURE__*/function (_TransactionBase) {\n  function Transaction(envelope, networkPassphrase) {\n    var _this;\n    _classCallCheck(this, Transaction);\n    if (typeof envelope === 'string') {\n      var buffer = Buffer.from(envelope, 'base64');\n      envelope = _xdr[\"default\"].TransactionEnvelope.fromXDR(buffer);\n    }\n    var envelopeType = envelope[\"switch\"]();\n    if (!(envelopeType === _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0() || envelopeType === _xdr[\"default\"].EnvelopeType.envelopeTypeTx())) {\n      throw new Error(\"Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an \".concat(envelopeType.name, \".\"));\n    }\n    var txEnvelope = envelope.value();\n    var tx = txEnvelope.tx();\n    var fee = tx.fee().toString();\n    var signatures = (txEnvelope.signatures() || []).slice();\n    _this = _callSuper(this, Transaction, [tx, signatures, fee, networkPassphrase]);\n    _this._envelopeType = envelopeType;\n    _this._memo = tx.memo();\n    _this._sequence = tx.seqNum().toString();\n    switch (_this._envelopeType) {\n      case _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0():\n        _this._source = _strkey.StrKey.encodeEd25519PublicKey(_this.tx.sourceAccountEd25519());\n        break;\n      default:\n        _this._source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(_this.tx.sourceAccount());\n        break;\n    }\n    var cond = null;\n    var timeBounds = null;\n    switch (_this._envelopeType) {\n      case _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0():\n        timeBounds = tx.timeBounds();\n        break;\n      case _xdr[\"default\"].EnvelopeType.envelopeTypeTx():\n        switch (tx.cond()[\"switch\"]()) {\n          case _xdr[\"default\"].PreconditionType.precondTime():\n            timeBounds = tx.cond().timeBounds();\n            break;\n          case _xdr[\"default\"].PreconditionType.precondV2():\n            cond = tx.cond().v2();\n            timeBounds = cond.timeBounds();\n            break;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n    if (timeBounds) {\n      _this._timeBounds = {\n        minTime: timeBounds.minTime().toString(),\n        maxTime: timeBounds.maxTime().toString()\n      };\n    }\n    if (cond) {\n      var ledgerBounds = cond.ledgerBounds();\n      if (ledgerBounds) {\n        _this._ledgerBounds = {\n          minLedger: ledgerBounds.minLedger(),\n          maxLedger: ledgerBounds.maxLedger()\n        };\n      }\n      var minSeq = cond.minSeqNum();\n      if (minSeq) {\n        _this._minAccountSequence = minSeq.toString();\n      }\n      _this._minAccountSequenceAge = cond.minSeqAge();\n      _this._minAccountSequenceLedgerGap = cond.minSeqLedgerGap();\n      _this._extraSigners = cond.extraSigners();\n    }\n    var operations = tx.operations() || [];\n    _this._operations = operations.map(function (op) {\n      return _operation.Operation.fromXDRObject(op);\n    });\n    return _this;\n  }\n\n  /**\n   * @type {object}\n   * @property {string} 64 bit unix timestamp\n   * @property {string} 64 bit unix timestamp\n   * @readonly\n   */\n  _inherits(Transaction, _TransactionBase);\n  return _createClass(Transaction, [{\n    key: \"timeBounds\",\n    get: function get() {\n      return this._timeBounds;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {object}\n     * @property {number} minLedger - smallest ledger bound (uint32)\n     * @property {number} maxLedger - largest ledger bound (or 0 for inf)\n     * @readonly\n     */\n  }, {\n    key: \"ledgerBounds\",\n    get: function get() {\n      return this._ledgerBounds;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * 64 bit account sequence\n     * @readonly\n     * @type {string}\n     */\n  }, {\n    key: \"minAccountSequence\",\n    get: function get() {\n      return this._minAccountSequence;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * 64 bit number of seconds\n     * @type {number}\n     * @readonly\n     */\n  }, {\n    key: \"minAccountSequenceAge\",\n    get: function get() {\n      return this._minAccountSequenceAge;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * 32 bit number of ledgers\n     * @type {number}\n     * @readonly\n     */\n  }, {\n    key: \"minAccountSequenceLedgerGap\",\n    get: function get() {\n      return this._minAccountSequenceLedgerGap;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * array of extra signers ({@link StrKey}s)\n     * @type {string[]}\n     * @readonly\n     */\n  }, {\n    key: \"extraSigners\",\n    get: function get() {\n      return this._extraSigners;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"sequence\",\n    get: function get() {\n      return this._sequence;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"source\",\n    get: function get() {\n      return this._source;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {Array.<xdr.Operation>}\n     * @readonly\n     */\n  }, {\n    key: \"operations\",\n    get: function get() {\n      return this._operations;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"memo\",\n    get: function get() {\n      return _memo.Memo.fromXDRObject(this._memo);\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * Returns the \"signature base\" of this transaction, which is the value\n     * that, when hashed, should be signed to create a signature that\n     * validators on the Stellar Network will accept.\n     *\n     * It is composed of a 4 prefix bytes followed by the xdr-encoded form\n     * of this transaction.\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"signatureBase\",\n    value: function signatureBase() {\n      var tx = this.tx;\n\n      // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n      // we need a Transaction to generate the signature base\n      if (this._envelopeType === _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0()) {\n        tx = _xdr[\"default\"].Transaction.fromXDR(Buffer.concat([\n        // TransactionV0 is a transaction with the AccountID discriminant\n        // stripped off, we need to put it back to build a valid transaction\n        // which we can use to build a TransactionSignaturePayloadTaggedTransaction\n        _xdr[\"default\"].PublicKeyType.publicKeyTypeEd25519().toXDR(), tx.toXDR()]));\n      }\n      var taggedTransaction = new _xdr[\"default\"].TransactionSignaturePayloadTaggedTransaction.envelopeTypeTx(tx);\n      var txSignature = new _xdr[\"default\"].TransactionSignaturePayload({\n        networkId: _xdr[\"default\"].Hash.fromXDR((0, _hashing.hash)(this.networkPassphrase)),\n        taggedTransaction: taggedTransaction\n      });\n      return txSignature.toXDR();\n    }\n\n    /**\n     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.\n     * @returns {xdr.TransactionEnvelope}\n     */\n  }, {\n    key: \"toEnvelope\",\n    value: function toEnvelope() {\n      var rawTx = this.tx.toXDR();\n      var signatures = this.signatures.slice(); // make a copy of the signatures\n\n      var envelope;\n      switch (this._envelopeType) {\n        case _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0():\n          envelope = new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTxV0(new _xdr[\"default\"].TransactionV0Envelope({\n            tx: _xdr[\"default\"].TransactionV0.fromXDR(rawTx),\n            // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n        case _xdr[\"default\"].EnvelopeType.envelopeTypeTx():\n          envelope = new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTx(new _xdr[\"default\"].TransactionV1Envelope({\n            tx: _xdr[\"default\"].Transaction.fromXDR(rawTx),\n            // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n        default:\n          throw new Error(\"Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an \".concat(this._envelopeType.name, \".\"));\n      }\n      return envelope;\n    }\n\n    /**\n     * Calculate the claimable balance ID for an operation within the transaction.\n     *\n     * @param   {integer}  opIndex   the index of the CreateClaimableBalance op\n     * @returns {string}   a hex string representing the claimable balance ID\n     *\n     * @throws {RangeError}   for invalid `opIndex` value\n     * @throws {TypeError}    if op at `opIndex` is not `CreateClaimableBalance`\n     * @throws for general XDR un/marshalling failures\n     *\n     * @see https://github.com/stellar/go/blob/d712346e61e288d450b0c08038c158f8848cc3e4/txnbuild/transaction.go#L392-L435\n     *\n     */\n  }, {\n    key: \"getClaimableBalanceId\",\n    value: function getClaimableBalanceId(opIndex) {\n      // Validate and then extract the operation from the transaction.\n      if (!Number.isInteger(opIndex) || opIndex < 0 || opIndex >= this.operations.length) {\n        throw new RangeError('invalid operation index');\n      }\n      var op = this.operations[opIndex];\n      try {\n        op = _operation.Operation.createClaimableBalance(op);\n      } catch (err) {\n        throw new TypeError(\"expected createClaimableBalance, got \".concat(op.type, \": \").concat(err));\n      }\n\n      // Always use the transaction's *unmuxed* source.\n      var account = _strkey.StrKey.decodeEd25519PublicKey((0, _decode_encode_muxed_account.extractBaseAddress)(this.source));\n      var operationId = _xdr[\"default\"].HashIdPreimage.envelopeTypeOpId(new _xdr[\"default\"].HashIdPreimageOperationId({\n        sourceAccount: _xdr[\"default\"].AccountId.publicKeyTypeEd25519(account),\n        seqNum: _xdr[\"default\"].SequenceNumber.fromString(this.sequence),\n        opNum: opIndex\n      }));\n      var opIdHash = (0, _hashing.hash)(operationId.toXDR('raw'));\n      var balanceId = _xdr[\"default\"].ClaimableBalanceId.claimableBalanceIdTypeV0(opIdHash);\n      return balanceId.toXDR('hex');\n    }\n  }]);\n}(_transaction_base.TransactionBase);"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 20161, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/fee_bump_transaction.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FeeBumpTransaction = void 0;\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nvar _hashing = require(\"./hashing\");\nvar _transaction = require(\"./transaction\");\nvar _transaction_base = require(\"./transaction_base\");\nvar _decode_encode_muxed_account = require(\"./util/decode_encode_muxed_account\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n/**\n * Use {@link TransactionBuilder.buildFeeBumpTransaction} to build a\n * FeeBumpTransaction object. If you have an object or base64-encoded string of\n * the transaction envelope XDR use {@link TransactionBuilder.fromXDR}.\n *\n * Once a {@link FeeBumpTransaction} has been created, its attributes and operations\n * should not be changed. You should only add signatures (using {@link FeeBumpTransaction#sign}) before\n * submitting to the network or forwarding on to additional signers.\n *\n * @param {string|xdr.TransactionEnvelope} envelope - transaction envelope\n *     object or base64 encoded string.\n * @param {string} networkPassphrase - passphrase of the target Stellar network\n *     (e.g. \"Public Global Stellar Network ; September 2015\").\n *\n * @extends TransactionBase\n */\nvar FeeBumpTransaction = exports.FeeBumpTransaction = /*#__PURE__*/function (_TransactionBase) {\n  function FeeBumpTransaction(envelope, networkPassphrase) {\n    var _this;\n    _classCallCheck(this, FeeBumpTransaction);\n    if (typeof envelope === 'string') {\n      var buffer = Buffer.from(envelope, 'base64');\n      envelope = _xdr[\"default\"].TransactionEnvelope.fromXDR(buffer);\n    }\n    var envelopeType = envelope[\"switch\"]();\n    if (envelopeType !== _xdr[\"default\"].EnvelopeType.envelopeTypeTxFeeBump()) {\n      throw new Error(\"Invalid TransactionEnvelope: expected an envelopeTypeTxFeeBump but received an \".concat(envelopeType.name, \".\"));\n    }\n    var txEnvelope = envelope.value();\n    var tx = txEnvelope.tx();\n    var fee = tx.fee().toString();\n    // clone signatures\n    var signatures = (txEnvelope.signatures() || []).slice();\n    _this = _callSuper(this, FeeBumpTransaction, [tx, signatures, fee, networkPassphrase]);\n    var innerTxEnvelope = _xdr[\"default\"].TransactionEnvelope.envelopeTypeTx(tx.innerTx().v1());\n    _this._feeSource = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(_this.tx.feeSource());\n    _this._innerTransaction = new _transaction.Transaction(innerTxEnvelope, networkPassphrase);\n    return _this;\n  }\n\n  /**\n   * @type {Transaction}\n   * @readonly\n   */\n  _inherits(FeeBumpTransaction, _TransactionBase);\n  return _createClass(FeeBumpTransaction, [{\n    key: \"innerTransaction\",\n    get: function get() {\n      return this._innerTransaction;\n    }\n\n    /**\n     * @type {Operation[]}\n     * @readonly\n     */\n  }, {\n    key: \"operations\",\n    get: function get() {\n      return this._innerTransaction.operations;\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n  }, {\n    key: \"feeSource\",\n    get: function get() {\n      return this._feeSource;\n    }\n\n    /**\n     * Returns the \"signature base\" of this transaction, which is the value\n     * that, when hashed, should be signed to create a signature that\n     * validators on the Stellar Network will accept.\n     *\n     * It is composed of a 4 prefix bytes followed by the xdr-encoded form\n     * of this transaction.\n     * @returns {Buffer}\n     */\n  }, {\n    key: \"signatureBase\",\n    value: function signatureBase() {\n      var taggedTransaction = new _xdr[\"default\"].TransactionSignaturePayloadTaggedTransaction.envelopeTypeTxFeeBump(this.tx);\n      var txSignature = new _xdr[\"default\"].TransactionSignaturePayload({\n        networkId: _xdr[\"default\"].Hash.fromXDR((0, _hashing.hash)(this.networkPassphrase)),\n        taggedTransaction: taggedTransaction\n      });\n      return txSignature.toXDR();\n    }\n\n    /**\n     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.\n     * @returns {xdr.TransactionEnvelope}\n     */\n  }, {\n    key: \"toEnvelope\",\n    value: function toEnvelope() {\n      var envelope = new _xdr[\"default\"].FeeBumpTransactionEnvelope({\n        tx: _xdr[\"default\"].FeeBumpTransaction.fromXDR(this.tx.toXDR()),\n        // make a copy of the tx\n        signatures: this.signatures.slice() // make a copy of the signatures\n      });\n      return new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTxFeeBump(envelope);\n    }\n  }]);\n}(_transaction_base.TransactionBase);"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 20349, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/account.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account = void 0;\nvar _bignumber = _interopRequireDefault(require(\"./util/bignumber\"));\nvar _strkey = require(\"./strkey\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Create a new Account object.\n *\n * `Account` represents a single account in the Stellar network and its sequence\n * number. Account tracks the sequence number as it is used by {@link\n * TransactionBuilder}. See\n * [Accounts](https://developers.stellar.org/docs/glossary/accounts/) for\n * more information about how accounts work in Stellar.\n *\n * @constructor\n *\n * @param {string} accountId - ID of the account (ex.\n *     `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`). If you\n *     provide a muxed account address, this will throw; use {@link\n *     MuxedAccount} instead.\n * @param {string} sequence  - current sequence number of the account\n */\nvar Account = exports.Account = /*#__PURE__*/function () {\n  function Account(accountId, sequence) {\n    _classCallCheck(this, Account);\n    if (_strkey.StrKey.isValidMed25519PublicKey(accountId)) {\n      throw new Error('accountId is an M-address; use MuxedAccount instead');\n    }\n    if (!_strkey.StrKey.isValidEd25519PublicKey(accountId)) {\n      throw new Error('accountId is invalid');\n    }\n    if (!(typeof sequence === 'string')) {\n      throw new Error('sequence must be of type string');\n    }\n    this._accountId = accountId;\n    this.sequence = new _bignumber[\"default\"](sequence);\n  }\n\n  /**\n   * Returns Stellar account ID, ex.\n   * `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`.\n   * @returns {string}\n   */\n  return _createClass(Account, [{\n    key: \"accountId\",\n    value: function accountId() {\n      return this._accountId;\n    }\n\n    /**\n     * @returns {string}  sequence number for the account as a string\n     */\n  }, {\n    key: \"sequenceNumber\",\n    value: function sequenceNumber() {\n      return this.sequence.toString();\n    }\n\n    /**\n     * Increments sequence number in this object by one.\n     * @returns {void}\n     */\n  }, {\n    key: \"incrementSequenceNumber\",\n    value: function incrementSequenceNumber() {\n      this.sequence = this.sequence.plus(1);\n    }\n  }]);\n}();"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,OAAO,GAAG,KAAK;AACvB,IAAI,aAAa;AACjB,IAAI;AACJ,SAAS,uBAAuB,CAAC;IAAI,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAE,WAAW;IAAE;AAAG;AACtF,SAAS,QAAQ,CAAC;IAAI;IAA2B,OAAO,UAAU,cAAc,OAAO,UAAU,YAAY,OAAO,OAAO,QAAQ,GAAG,SAAU,CAAC;QAAI,OAAO,OAAO;IAAG,IAAI,SAAU,CAAC;QAAI,OAAO,KAAK,cAAc,OAAO,UAAU,EAAE,WAAW,KAAK,UAAU,MAAM,OAAO,SAAS,GAAG,WAAW,OAAO;IAAG,GAAG,QAAQ;AAAI;AAC7T,SAAS,gBAAgB,CAAC,EAAE,CAAC;IAAI,IAAI,CAAC,CAAC,aAAa,CAAC,GAAG,MAAM,IAAI,UAAU;AAAsC;AAClH,SAAS,kBAAkB,CAAC,EAAE,CAAC;IAAI,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAAK;QAAE,IAAI,IAAI,CAAC,CAAC,EAAE;QAAE,EAAE,UAAU,GAAG,EAAE,UAAU,IAAI,CAAC,GAAG,EAAE,YAAY,GAAG,CAAC,GAAG,WAAW,KAAK,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC,GAAG,OAAO,cAAc,CAAC,GAAG,eAAe,EAAE,GAAG,GAAG;IAAI;AAAE;AACvO,SAAS,aAAa,CAAC,EAAE,CAAC,EAAE,CAAC;IAAI,OAAO,KAAK,kBAAkB,EAAE,SAAS,EAAE,IAAI,KAAK,kBAAkB,GAAG,IAAI,OAAO,cAAc,CAAC,GAAG,aAAa;QAAE,UAAU,CAAC;IAAE,IAAI;AAAG;AAC1K,SAAS,eAAe,CAAC;IAAI,IAAI,IAAI,aAAa,GAAG;IAAW,OAAO,YAAY,QAAQ,KAAK,IAAI,IAAI;AAAI;AAC5G,SAAS,aAAa,CAAC,EAAE,CAAC;IAAI,IAAI,YAAY,QAAQ,MAAM,CAAC,GAAG,OAAO;IAAG,IAAI,IAAI,CAAC,CAAC,OAAO,WAAW,CAAC;IAAE,IAAI,KAAK,MAAM,GAAG;QAAE,IAAI,IAAI,EAAE,IAAI,CAAC,GAAG,KAAK;QAAY,IAAI,YAAY,QAAQ,IAAI,OAAO;QAAG,MAAM,IAAI,UAAU;IAAiD;IAAE,OAAO,CAAC,aAAa,IAAI,SAAS,MAAM,EAAE;AAAI;AAC3T;;;;;;;;;;;;;;;;CAgBC,GACD,IAAI,UAAU,QAAQ,OAAO,GAAG,WAAW,GAAE;IAC3C,SAAS,QAAQ,SAAS,EAAE,QAAQ;QAClC,gBAAgB,IAAI,EAAE;QACtB,IAAI,QAAQ,MAAM,CAAC,wBAAwB,CAAC,YAAY;YACtD,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,CAAC,QAAQ,MAAM,CAAC,uBAAuB,CAAC,YAAY;YACtD,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,CAAC,CAAC,OAAO,aAAa,QAAQ,GAAG;YACnC,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,CAAC,UAAU,CAAC;IAC5C;IAEA;;;;GAIC,GACD,OAAO,aAAa,SAAS;QAAC;YAC5B,KAAK;YACL,OAAO,SAAS;gBACd,OAAO,IAAI,CAAC,UAAU;YACxB;QAKF;QAAG;YACD,KAAK;YACL,OAAO,SAAS;gBACd,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ;YAC/B;QAMF;QAAG;YACD,KAAK;YACL,OAAO,SAAS;gBACd,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YACrC;QACF;KAAE;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 20458, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/muxed_account.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MuxedAccount = void 0;\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nvar _account = require(\"./account\");\nvar _strkey = require(\"./strkey\");\nvar _decode_encode_muxed_account = require(\"./util/decode_encode_muxed_account\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Represents a muxed account for transactions and operations.\n *\n * A muxed (or *multiplexed*) account (defined rigorously in\n * [CAP-27](https://stellar.org/protocol/cap-27) and briefly in\n * [SEP-23](https://stellar.org/protocol/sep-23)) is one that resolves a single\n * Stellar `G...`` account to many different underlying IDs.\n *\n * For example, you may have a single Stellar address for accounting purposes:\n *   GA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJVSGZ\n *\n * Yet would like to use it for 4 different family members:\n *   1: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAGZFQ\n *   2: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAALIWQ\n *   3: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAPYHQ\n *   4: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAQLQQ\n *\n * This object makes it easy to create muxed accounts from regular accounts,\n * duplicate them, get/set the underlying IDs, etc. without mucking around with\n * the raw XDR.\n *\n * Because muxed accounts are purely an off-chain convention, they all share the\n * sequence number tied to their underlying G... account. Thus, this object\n * *requires* an {@link Account} instance to be passed in, so that muxed\n * instances of an account can collectively modify the sequence number whenever\n * a muxed account is used as the source of a @{link Transaction} with {@link\n * TransactionBuilder}.\n *\n * @constructor\n *\n * @param {Account}   account - the @{link Account} instance representing the\n *                              underlying G... address\n * @param {string}    id      - a stringified uint64 value that represents the\n *                              ID of the muxed account\n *\n * @link https://developers.stellar.org/docs/glossary/muxed-accounts/\n */\nvar MuxedAccount = exports.MuxedAccount = /*#__PURE__*/function () {\n  function MuxedAccount(baseAccount, id) {\n    _classCallCheck(this, MuxedAccount);\n    var accountId = baseAccount.accountId();\n    if (!_strkey.StrKey.isValidEd25519PublicKey(accountId)) {\n      throw new Error('accountId is invalid');\n    }\n    this.account = baseAccount;\n    this._muxedXdr = (0, _decode_encode_muxed_account.encodeMuxedAccount)(accountId, id);\n    this._mAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(this._muxedXdr);\n    this._id = id;\n  }\n\n  /**\n   * Parses an M-address into a MuxedAccount object.\n   *\n   * @param  {string} mAddress    - an M-address to transform\n   * @param  {string} sequenceNum - the sequence number of the underlying {@link\n   *     Account}, to use for the underlying base account (@link\n   *     MuxedAccount.baseAccount). If you're using the SDK, you can use\n   *     `server.loadAccount` to fetch this if you don't know it.\n   *\n   * @return {MuxedAccount}\n   */\n  return _createClass(MuxedAccount, [{\n    key: \"baseAccount\",\n    value:\n    /**\n     * @return {Account} the underlying account object shared among all muxed\n     *     accounts with this Stellar address\n     */\n    function baseAccount() {\n      return this.account;\n    }\n\n    /**\n     * @return {string} the M-address representing this account's (G-address, ID)\n     */\n  }, {\n    key: \"accountId\",\n    value: function accountId() {\n      return this._mAddress;\n    }\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n  }, {\n    key: \"setId\",\n    value: function setId(id) {\n      if (typeof id !== 'string') {\n        throw new Error('id should be a string representing a number (uint64)');\n      }\n      this._muxedXdr.med25519().id(_xdr[\"default\"].Uint64.fromString(id));\n      this._mAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(this._muxedXdr);\n      this._id = id;\n      return this;\n    }\n\n    /**\n     * Accesses the underlying account's sequence number.\n     * @return {string}  strigified sequence number for the underlying account\n     */\n  }, {\n    key: \"sequenceNumber\",\n    value: function sequenceNumber() {\n      return this.account.sequenceNumber();\n    }\n\n    /**\n     * Increments the underlying account's sequence number by one.\n     * @return {void}\n     */\n  }, {\n    key: \"incrementSequenceNumber\",\n    value: function incrementSequenceNumber() {\n      return this.account.incrementSequenceNumber();\n    }\n\n    /**\n     * @return {xdr.MuxedAccount} the XDR object representing this muxed account's\n     *     G-address and uint64 ID\n     */\n  }, {\n    key: \"toXDRObject\",\n    value: function toXDRObject() {\n      return this._muxedXdr;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(otherMuxedAccount) {\n      return this.accountId() === otherMuxedAccount.accountId();\n    }\n  }], [{\n    key: \"fromAddress\",\n    value: function fromAddress(mAddress, sequenceNum) {\n      var muxedAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(mAddress);\n      var gAddress = (0, _decode_encode_muxed_account.extractBaseAddress)(mAddress);\n      var id = muxedAccount.med25519().id().toString();\n      return new MuxedAccount(new _account.Account(gAddress, sequenceNum), id);\n    }\n  }]);\n}();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 20641, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/sorobandata_builder.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SorobanDataBuilder = void 0;\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Supports building {@link xdr.SorobanTransactionData} structures with various\n * items set to specific values.\n *\n * This is recommended for when you are building\n * {@link Operation.extendFootprintTtl} / {@link Operation.restoreFootprint}\n * operations and need to {@link TransactionBuilder.setSorobanData} to avoid\n * (re)building the entire data structure from scratch.\n *\n * @constructor\n *\n * @param {string | xdr.SorobanTransactionData} [sorobanData]  either a\n *      base64-encoded string that represents an\n *      {@link xdr.SorobanTransactionData} instance or an XDR instance itself\n *      (it will be copied); if omitted or \"falsy\" (e.g. an empty string), it\n *      starts with an empty instance\n *\n * @example\n * // You want to use an existing data blob but override specific parts.\n * const newData = new SorobanDataBuilder(existing)\n *   .setReadOnly(someLedgerKeys)\n *   .setRefundableFee(\"1000\")\n *   .build();\n *\n * // You want an instance from scratch\n * const newData = new SorobanDataBuilder()\n *   .setFootprint([someLedgerKey], [])\n *   .setRefundableFee(\"1000\")\n *   .build();\n */\nvar SorobanDataBuilder = exports.SorobanDataBuilder = /*#__PURE__*/function () {\n  function SorobanDataBuilder(sorobanData) {\n    _classCallCheck(this, SorobanDataBuilder);\n    _defineProperty(this, \"_data\", void 0);\n    var data;\n    if (!sorobanData) {\n      data = new _xdr[\"default\"].SorobanTransactionData({\n        resources: new _xdr[\"default\"].SorobanResources({\n          footprint: new _xdr[\"default\"].LedgerFootprint({\n            readOnly: [],\n            readWrite: []\n          }),\n          instructions: 0,\n          readBytes: 0,\n          writeBytes: 0\n        }),\n        ext: new _xdr[\"default\"].ExtensionPoint(0),\n        resourceFee: new _xdr[\"default\"].Int64(0)\n      });\n    } else if (typeof sorobanData === 'string' || ArrayBuffer.isView(sorobanData)) {\n      data = SorobanDataBuilder.fromXDR(sorobanData);\n    } else {\n      data = SorobanDataBuilder.fromXDR(sorobanData.toXDR()); // copy\n    }\n    this._data = data;\n  }\n\n  /**\n   * Decodes and builds a {@link xdr.SorobanTransactionData} instance.\n   * @param {Uint8Array|Buffer|string} data   raw input to decode\n   * @returns {xdr.SorobanTransactionData}\n   */\n  return _createClass(SorobanDataBuilder, [{\n    key: \"setResourceFee\",\n    value:\n    /**\n     * Sets the resource fee portion of the Soroban data.\n     * @param {number | bigint | string} fee  the resource fee to set (int64)\n     * @returns {SorobanDataBuilder}\n     */\n    function setResourceFee(fee) {\n      this._data.resourceFee(new _xdr[\"default\"].Int64(fee));\n      return this;\n    }\n\n    /**\n     * Sets up the resource metrics.\n     *\n     * You should almost NEVER need this, as its often generated / provided to you\n     * by transaction simulation/preflight from a Soroban RPC server.\n     *\n     * @param {number} cpuInstrs      number of CPU instructions\n     * @param {number} readBytes      number of bytes being read\n     * @param {number} writeBytes     number of bytes being written\n     *\n     * @returns {SorobanDataBuilder}\n     */\n  }, {\n    key: \"setResources\",\n    value: function setResources(cpuInstrs, readBytes, writeBytes) {\n      this._data.resources().instructions(cpuInstrs);\n      this._data.resources().readBytes(readBytes);\n      this._data.resources().writeBytes(writeBytes);\n      return this;\n    }\n\n    /**\n     * Appends the given ledger keys to the existing storage access footprint.\n     * @param {xdr.LedgerKey[]} readOnly   read-only keys to add\n     * @param {xdr.LedgerKey[]} readWrite  read-write keys to add\n     * @returns {SorobanDataBuilder} this builder instance\n     */\n  }, {\n    key: \"appendFootprint\",\n    value: function appendFootprint(readOnly, readWrite) {\n      return this.setFootprint(this.getReadOnly().concat(readOnly), this.getReadWrite().concat(readWrite));\n    }\n\n    /**\n     * Sets the storage access footprint to be a certain set of ledger keys.\n     *\n     * You can also set each field explicitly via\n     * {@link SorobanDataBuilder.setReadOnly} and\n     * {@link SorobanDataBuilder.setReadWrite} or add to the existing footprint\n     * via {@link SorobanDataBuilder.appendFootprint}.\n     *\n     * Passing `null|undefined` to either parameter will IGNORE the existing\n     * values. If you want to clear them, pass `[]`, instead.\n     *\n     * @param {xdr.LedgerKey[]|null} [readOnly]   the set of ledger keys to set in\n     *    the read-only portion of the transaction's `sorobanData`, or `null |\n     *    undefined` to keep the existing keys\n     * @param {xdr.LedgerKey[]|null} [readWrite]  the set of ledger keys to set in\n     *    the read-write portion of the transaction's `sorobanData`, or `null |\n     *    undefined` to keep the existing keys\n     * @returns {SorobanDataBuilder} this builder instance\n     */\n  }, {\n    key: \"setFootprint\",\n    value: function setFootprint(readOnly, readWrite) {\n      if (readOnly !== null) {\n        // null means \"leave me alone\"\n        this.setReadOnly(readOnly);\n      }\n      if (readWrite !== null) {\n        this.setReadWrite(readWrite);\n      }\n      return this;\n    }\n\n    /**\n     * @param {xdr.LedgerKey[]} readOnly  read-only keys in the access footprint\n     * @returns {SorobanDataBuilder}\n     */\n  }, {\n    key: \"setReadOnly\",\n    value: function setReadOnly(readOnly) {\n      this._data.resources().footprint().readOnly(readOnly !== null && readOnly !== void 0 ? readOnly : []);\n      return this;\n    }\n\n    /**\n     * @param {xdr.LedgerKey[]} readWrite  read-write keys in the access footprint\n     * @returns {SorobanDataBuilder}\n     */\n  }, {\n    key: \"setReadWrite\",\n    value: function setReadWrite(readWrite) {\n      this._data.resources().footprint().readWrite(readWrite !== null && readWrite !== void 0 ? readWrite : []);\n      return this;\n    }\n\n    /**\n     * @returns {xdr.SorobanTransactionData} a copy of the final data structure\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      return _xdr[\"default\"].SorobanTransactionData.fromXDR(this._data.toXDR()); // clone\n    }\n\n    //\n    // getters follow\n    //\n\n    /** @returns {xdr.LedgerKey[]} the read-only storage access pattern */\n  }, {\n    key: \"getReadOnly\",\n    value: function getReadOnly() {\n      return this.getFootprint().readOnly();\n    }\n\n    /** @returns {xdr.LedgerKey[]} the read-write storage access pattern */\n  }, {\n    key: \"getReadWrite\",\n    value: function getReadWrite() {\n      return this.getFootprint().readWrite();\n    }\n\n    /** @returns {xdr.LedgerFootprint} the storage access pattern */\n  }, {\n    key: \"getFootprint\",\n    value: function getFootprint() {\n      return this._data.resources().footprint();\n    }\n  }], [{\n    key: \"fromXDR\",\n    value: function fromXDR(data) {\n      return _xdr[\"default\"].SorobanTransactionData.fromXDR(data, typeof data === 'string' ? 'base64' : 'raw');\n    }\n  }]);\n}();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 20847, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/signerkey.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignerKey = void 0;\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nvar _strkey = require(\"./strkey\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * A container class with helpers to convert between signer keys\n * (`xdr.SignerKey`) and {@link StrKey}s.\n *\n * It's primarly used for manipulating the `extraSigners` precondition on a\n * {@link Transaction}.\n *\n * @see {@link TransactionBuilder.setExtraSigners}\n */\nvar SignerKey = exports.SignerKey = /*#__PURE__*/function () {\n  function SignerKey() {\n    _classCallCheck(this, SignerKey);\n  }\n  return _createClass(SignerKey, null, [{\n    key: \"decodeAddress\",\n    value:\n    /**\n     * Decodes a StrKey address into an xdr.SignerKey instance.\n     *\n     * Only ED25519 public keys (G...), pre-auth transactions (T...), hashes\n     * (H...), and signed payloads (P...) can be signer keys.\n     *\n     * @param   {string} address  a StrKey-encoded signer address\n     * @returns {xdr.SignerKey}\n     */\n    function decodeAddress(address) {\n      var signerKeyMap = {\n        ed25519PublicKey: _xdr[\"default\"].SignerKey.signerKeyTypeEd25519,\n        preAuthTx: _xdr[\"default\"].SignerKey.signerKeyTypePreAuthTx,\n        sha256Hash: _xdr[\"default\"].SignerKey.signerKeyTypeHashX,\n        signedPayload: _xdr[\"default\"].SignerKey.signerKeyTypeEd25519SignedPayload\n      };\n      var vb = _strkey.StrKey.getVersionByteForPrefix(address);\n      var encoder = signerKeyMap[vb];\n      if (!encoder) {\n        throw new Error(\"invalid signer key type (\".concat(vb, \")\"));\n      }\n      var raw = (0, _strkey.decodeCheck)(vb, address);\n      switch (vb) {\n        case 'signedPayload':\n          return encoder(new _xdr[\"default\"].SignerKeyEd25519SignedPayload({\n            ed25519: raw.slice(0, 32),\n            payload: raw.slice(32 + 4)\n          }));\n        case 'ed25519PublicKey': // falls through\n        case 'preAuthTx': // falls through\n        case 'sha256Hash': // falls through\n        default:\n          return encoder(raw);\n      }\n    }\n\n    /**\n     * Encodes a signer key into its StrKey equivalent.\n     *\n     * @param   {xdr.SignerKey} signerKey   the signer\n     * @returns {string} the StrKey representation of the signer\n     */\n  }, {\n    key: \"encodeSignerKey\",\n    value: function encodeSignerKey(signerKey) {\n      var strkeyType;\n      var raw;\n      switch (signerKey[\"switch\"]()) {\n        case _xdr[\"default\"].SignerKeyType.signerKeyTypeEd25519():\n          strkeyType = 'ed25519PublicKey';\n          raw = signerKey.value();\n          break;\n        case _xdr[\"default\"].SignerKeyType.signerKeyTypePreAuthTx():\n          strkeyType = 'preAuthTx';\n          raw = signerKey.value();\n          break;\n        case _xdr[\"default\"].SignerKeyType.signerKeyTypeHashX():\n          strkeyType = 'sha256Hash';\n          raw = signerKey.value();\n          break;\n        case _xdr[\"default\"].SignerKeyType.signerKeyTypeEd25519SignedPayload():\n          strkeyType = 'signedPayload';\n          raw = signerKey.ed25519SignedPayload().toXDR('raw');\n          break;\n        default:\n          throw new Error(\"invalid SignerKey (type: \".concat(signerKey[\"switch\"](), \")\"));\n      }\n      return (0, _strkey.encodeCheck)(strkeyType, raw);\n    }\n  }]);\n}();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 20980, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/transaction_builder.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionBuilder = exports.TimeoutInfinite = exports.BASE_FEE = void 0;\nexports.isValidDate = isValidDate;\nvar _jsXdr = require(\"@stellar/js-xdr\");\nvar _bignumber = _interopRequireDefault(require(\"./util/bignumber\"));\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nvar _account = require(\"./account\");\nvar _muxed_account = require(\"./muxed_account\");\nvar _decode_encode_muxed_account = require(\"./util/decode_encode_muxed_account\");\nvar _transaction = require(\"./transaction\");\nvar _fee_bump_transaction = require(\"./fee_bump_transaction\");\nvar _sorobandata_builder = require(\"./sorobandata_builder\");\nvar _strkey = require(\"./strkey\");\nvar _signerkey = require(\"./signerkey\");\nvar _memo = require(\"./memo\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Minimum base fee for transactions. If this fee is below the network\n * minimum, the transaction will fail. The more operations in the\n * transaction, the greater the required fee. Use {@link\n * Server#fetchBaseFee} to get an accurate value of minimum transaction\n * fee on the network.\n *\n * @constant\n * @see [Fees](https://developers.stellar.org/docs/glossary/fees/)\n */\nvar BASE_FEE = exports.BASE_FEE = '100'; // Stroops\n\n/**\n * @constant\n * @see {@link TransactionBuilder#setTimeout}\n * @see [Timeout](https://developers.stellar.org/api/resources/transactions/post/)\n */\nvar TimeoutInfinite = exports.TimeoutInfinite = 0;\n\n/**\n * <p>Transaction builder helps constructs a new `{@link Transaction}` using the\n * given {@link Account} as the transaction's \"source account\". The transaction\n * will use the current sequence number of the given account as its sequence\n * number and increment the given account's sequence number by one. The given\n * source account must include a private key for signing the transaction or an\n * error will be thrown.</p>\n *\n * <p>Operations can be added to the transaction via their corresponding builder\n * methods, and each returns the TransactionBuilder object so they can be\n * chained together. After adding the desired operations, call the `build()`\n * method on the `TransactionBuilder` to return a fully constructed `{@link\n * Transaction}` that can be signed. The returned transaction will contain the\n * sequence number of the source account and include the signature from the\n * source account.</p>\n *\n * <p><strong>Be careful about unsubmitted transactions!</strong> When you build\n * a transaction, `stellar-sdk` automatically increments the source account's\n * sequence number. If you end up not submitting this transaction and submitting\n * another one instead, it'll fail due to the sequence number being wrong. So if\n * you decide not to use a built transaction, make sure to update the source\n * account's sequence number with\n * [Server.loadAccount](https://stellar.github.io/js-stellar-sdk/Server.html#loadAccount)\n * before creating another transaction.</p>\n *\n * <p>The following code example creates a new transaction with {@link\n * Operation.createAccount} and {@link Operation.payment} operations. The\n * Transaction's source account first funds `destinationA`, then sends a payment\n * to `destinationB`. The built transaction is then signed by\n * `sourceKeypair`.</p>\n *\n * ```\n * var transaction = new TransactionBuilder(source, { fee, networkPassphrase: Networks.TESTNET })\n * .addOperation(Operation.createAccount({\n *     destination: destinationA,\n *     startingBalance: \"20\"\n * })) // <- funds and creates destinationA\n * .addOperation(Operation.payment({\n *     destination: destinationB,\n *     amount: \"100\",\n *     asset: Asset.native()\n * })) // <- sends 100 XLM to destinationB\n * .setTimeout(30)\n * .build();\n *\n * transaction.sign(sourceKeypair);\n * ```\n *\n * @constructor\n *\n * @param {Account} sourceAccount - source account for this transaction\n * @param {object}  opts          - Options object\n * @param {string}  opts.fee      - max fee you're willing to pay per\n *     operation in this transaction (**in stroops**)\n *\n * @param {object}              [opts.timebounds] - timebounds for the\n *     validity of this transaction\n * @param {number|string|Date}  [opts.timebounds.minTime] - 64-bit UNIX\n *     timestamp or Date object\n * @param {number|string|Date}  [opts.timebounds.maxTime] - 64-bit UNIX\n *     timestamp or Date object\n * @param {object}              [opts.ledgerbounds] - ledger bounds for the\n *     validity of this transaction\n * @param {number}              [opts.ledgerbounds.minLedger] - number of the minimum\n *     ledger sequence\n * @param {number}              [opts.ledgerbounds.maxLedger] - number of the maximum\n *     ledger sequence\n * @param {string}              [opts.minAccountSequence] - number for\n *     the minimum account sequence\n * @param {number}              [opts.minAccountSequenceAge] - number of\n *     seconds for the minimum account sequence age\n * @param {number}              [opts.minAccountSequenceLedgerGap] - number of\n *     ledgers for the minimum account sequence ledger gap\n * @param {string[]}            [opts.extraSigners] - list of the extra signers\n *     required for this transaction\n * @param {Memo}                [opts.memo] - memo for the transaction\n * @param {string}              [opts.networkPassphrase] passphrase of the\n *     target Stellar network (e.g. \"Public Global Stellar Network ; September\n *     2015\" for the pubnet)\n * @param {xdr.SorobanTransactionData | string}  [opts.sorobanData] - an\n *     optional instance of {@link xdr.SorobanTransactionData} to be set as the\n *     internal `Transaction.Ext.SorobanData` field (either the xdr object or a\n *     base64 string). In the case of Soroban transactions, this can be obtained\n *     from a prior simulation of the transaction with a contract invocation and\n *     provides necessary resource estimations. You can also use\n *     {@link SorobanDataBuilder} to construct complicated combinations of\n *     parameters without mucking with XDR directly. **Note:** For\n *     non-contract(non-Soroban) transactions, this has no effect.\n */\nvar TransactionBuilder = exports.TransactionBuilder = /*#__PURE__*/function () {\n  function TransactionBuilder(sourceAccount) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, TransactionBuilder);\n    if (!sourceAccount) {\n      throw new Error('must specify source account for the transaction');\n    }\n    if (opts.fee === undefined) {\n      throw new Error('must specify fee for the transaction (in stroops)');\n    }\n    this.source = sourceAccount;\n    this.operations = [];\n    this.baseFee = opts.fee;\n    this.timebounds = opts.timebounds ? _objectSpread({}, opts.timebounds) : null;\n    this.ledgerbounds = opts.ledgerbounds ? _objectSpread({}, opts.ledgerbounds) : null;\n    this.minAccountSequence = opts.minAccountSequence || null;\n    this.minAccountSequenceAge = opts.minAccountSequenceAge || null;\n    this.minAccountSequenceLedgerGap = opts.minAccountSequenceLedgerGap || null;\n    this.extraSigners = opts.extraSigners ? _toConsumableArray(opts.extraSigners) : null;\n    this.memo = opts.memo || _memo.Memo.none();\n    this.networkPassphrase = opts.networkPassphrase || null;\n    this.sorobanData = opts.sorobanData ? new _sorobandata_builder.SorobanDataBuilder(opts.sorobanData).build() : null;\n  }\n\n  /**\n   * Creates a builder instance using an existing {@link Transaction} as a\n   * template, ignoring any existing envelope signatures.\n   *\n   * Note that the sequence number WILL be cloned, so EITHER this transaction or\n   * the one it was cloned from will be valid. This is useful in situations\n   * where you are constructing a transaction in pieces and need to make\n   * adjustments as you go (for example, when filling out Soroban resource\n   * information).\n   *\n   * @param {Transaction} tx  a \"template\" transaction to clone exactly\n   * @param {object} [opts]   additional options to override the clone, e.g.\n   *    {fee: '1000'} will override the existing base fee derived from `tx` (see\n   *    the {@link TransactionBuilder} constructor for detailed options)\n   *\n   * @returns {TransactionBuilder} a \"prepared\" builder instance with the same\n   *    configuration and operations as the given transaction\n   *\n   * @warning This does not clone the transaction's\n   *    {@link xdr.SorobanTransactionData} (if applicable), use\n   *    {@link SorobanDataBuilder} and {@link TransactionBuilder.setSorobanData}\n   *    as needed, instead..\n   *\n   * @todo This cannot clone {@link FeeBumpTransaction}s, yet.\n   */\n  return _createClass(TransactionBuilder, [{\n    key: \"addOperation\",\n    value:\n    /**\n     * Adds an operation to the transaction.\n     *\n     * @param {xdr.Operation} operation   The xdr operation object, use {@link\n     *     Operation} static methods.\n     *\n     * @returns {TransactionBuilder}\n     */\n    function addOperation(operation) {\n      this.operations.push(operation);\n      return this;\n    }\n\n    /**\n     * Adds an operation to the transaction at a specific index.\n     *\n     * @param {xdr.Operation} operation - The xdr operation object to add, use {@link Operation} static methods.\n     * @param {number} index - The index at which to insert the operation.\n     *\n     * @returns {TransactionBuilder} - The TransactionBuilder instance for method chaining.\n     */\n  }, {\n    key: \"addOperationAt\",\n    value: function addOperationAt(operation, index) {\n      this.operations.splice(index, 0, operation);\n      return this;\n    }\n\n    /**\n     * Removes the operations from the builder (useful when cloning).\n     * @returns {TransactionBuilder} this builder instance\n     */\n  }, {\n    key: \"clearOperations\",\n    value: function clearOperations() {\n      this.operations = [];\n      return this;\n    }\n\n    /**\n     * Removes the operation at the specified index from the transaction.\n     *\n     * @param {number} index - The index of the operation to remove.\n     *\n     * @returns {TransactionBuilder} The TransactionBuilder instance for method chaining.\n     */\n  }, {\n    key: \"clearOperationAt\",\n    value: function clearOperationAt(index) {\n      this.operations.splice(index, 1);\n      return this;\n    }\n\n    /**\n     * Adds a memo to the transaction.\n     * @param {Memo} memo {@link Memo} object\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"addMemo\",\n    value: function addMemo(memo) {\n      this.memo = memo;\n      return this;\n    }\n\n    /**\n     * Sets a timeout precondition on the transaction.\n     *\n     *  Because of the distributed nature of the Stellar network it is possible\n     *  that the status of your transaction will be determined after a long time\n     *  if the network is highly congested. If you want to be sure to receive the\n     *  status of the transaction within a given period you should set the {@link\n     *  TimeBounds} with `maxTime` on the transaction (this is what `setTimeout`\n     *  does internally; if there's `minTime` set but no `maxTime` it will be\n     *  added).\n     *\n     *  A call to `TransactionBuilder.setTimeout` is **required** if Transaction\n     *  does not have `max_time` set. If you don't want to set timeout, use\n     *  `{@link TimeoutInfinite}`. In general you should set `{@link\n     *  TimeoutInfinite}` only in smart contracts.\n     *\n     *  Please note that Horizon may still return <code>504 Gateway Timeout</code>\n     *  error, even for short timeouts. In such case you need to resubmit the same\n     *  transaction again without making any changes to receive a status. This\n     *  method is using the machine system time (UTC), make sure it is set\n     *  correctly.\n     *\n     * @param {number} timeoutSeconds   Number of seconds the transaction is good.\n     *     Can't be negative. If the value is {@link TimeoutInfinite}, the\n     *     transaction is good indefinitely.\n     *\n     * @returns {TransactionBuilder}\n     *\n     * @see {@link TimeoutInfinite}\n     * @see https://developers.stellar.org/docs/tutorials/handling-errors/\n     */\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(timeoutSeconds) {\n      if (this.timebounds !== null && this.timebounds.maxTime > 0) {\n        throw new Error('TimeBounds.max_time has been already set - setting timeout would overwrite it.');\n      }\n      if (timeoutSeconds < 0) {\n        throw new Error('timeout cannot be negative');\n      }\n      if (timeoutSeconds > 0) {\n        var timeoutTimestamp = Math.floor(Date.now() / 1000) + timeoutSeconds;\n        if (this.timebounds === null) {\n          this.timebounds = {\n            minTime: 0,\n            maxTime: timeoutTimestamp\n          };\n        } else {\n          this.timebounds = {\n            minTime: this.timebounds.minTime,\n            maxTime: timeoutTimestamp\n          };\n        }\n      } else {\n        this.timebounds = {\n          minTime: 0,\n          maxTime: 0\n        };\n      }\n      return this;\n    }\n\n    /**\n     * If you want to prepare a transaction which will become valid at some point\n     * in the future, or be invalid after some time, you can set a timebounds\n     * precondition. Internally this will set the `minTime`, and `maxTime`\n     * preconditions. Conflicts with `setTimeout`, so use one or the other.\n     *\n     * @param {Date|number} minEpochOrDate  Either a JS Date object, or a number\n     *     of UNIX epoch seconds. The transaction is valid after this timestamp.\n     *     Can't be negative. If the value is `0`, the transaction is valid\n     *     immediately.\n     * @param {Date|number} maxEpochOrDate  Either a JS Date object, or a number\n     *     of UNIX epoch seconds. The transaction is valid until this timestamp.\n     *     Can't be negative. If the value is `0`, the transaction is valid\n     *     indefinitely.\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setTimebounds\",\n    value: function setTimebounds(minEpochOrDate, maxEpochOrDate) {\n      // Force it to a date type\n      if (typeof minEpochOrDate === 'number') {\n        minEpochOrDate = new Date(minEpochOrDate * 1000);\n      }\n      if (typeof maxEpochOrDate === 'number') {\n        maxEpochOrDate = new Date(maxEpochOrDate * 1000);\n      }\n      if (this.timebounds !== null) {\n        throw new Error('TimeBounds has been already set - setting timebounds would overwrite it.');\n      }\n\n      // Convert that date to the epoch seconds\n      var minTime = Math.floor(minEpochOrDate.valueOf() / 1000);\n      var maxTime = Math.floor(maxEpochOrDate.valueOf() / 1000);\n      if (minTime < 0) {\n        throw new Error('min_time cannot be negative');\n      }\n      if (maxTime < 0) {\n        throw new Error('max_time cannot be negative');\n      }\n      if (maxTime > 0 && minTime > maxTime) {\n        throw new Error('min_time cannot be greater than max_time');\n      }\n      this.timebounds = {\n        minTime: minTime,\n        maxTime: maxTime\n      };\n      return this;\n    }\n\n    /**\n     * If you want to prepare a transaction which will only be valid within some\n     * range of ledgers, you can set a ledgerbounds precondition.\n     * Internally this will set the `minLedger` and `maxLedger` preconditions.\n     *\n     * @param {number} minLedger  The minimum ledger this transaction is valid at\n     *     or after. Cannot be negative. If the value is `0` (the default), the\n     *     transaction is valid immediately.\n     *\n     * @param {number} maxLedger  The maximum ledger this transaction is valid\n     *     before. Cannot be negative. If the value is `0`, the transaction is\n     *     valid indefinitely.\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setLedgerbounds\",\n    value: function setLedgerbounds(minLedger, maxLedger) {\n      if (this.ledgerbounds !== null) {\n        throw new Error('LedgerBounds has been already set - setting ledgerbounds would overwrite it.');\n      }\n      if (minLedger < 0) {\n        throw new Error('min_ledger cannot be negative');\n      }\n      if (maxLedger < 0) {\n        throw new Error('max_ledger cannot be negative');\n      }\n      if (maxLedger > 0 && minLedger > maxLedger) {\n        throw new Error('min_ledger cannot be greater than max_ledger');\n      }\n      this.ledgerbounds = {\n        minLedger: minLedger,\n        maxLedger: maxLedger\n      };\n      return this;\n    }\n\n    /**\n     * If you want to prepare a transaction which will be valid only while the\n     * account sequence number is\n     *\n     *     minAccountSequence <= sourceAccountSequence < tx.seqNum\n     *\n     * Note that after execution the account's sequence number is always raised to\n     * `tx.seqNum`. Internally this will set the `minAccountSequence`\n     * precondition.\n     *\n     * @param {string} minAccountSequence   The minimum source account sequence\n     *     number this transaction is valid for. If the value is `0` (the\n     *     default), the transaction is valid when `sourceAccount's sequence\n     *     number == tx.seqNum- 1`.\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setMinAccountSequence\",\n    value: function setMinAccountSequence(minAccountSequence) {\n      if (this.minAccountSequence !== null) {\n        throw new Error('min_account_sequence has been already set - setting min_account_sequence would overwrite it.');\n      }\n      this.minAccountSequence = minAccountSequence;\n      return this;\n    }\n\n    /**\n     * For the transaction to be valid, the current ledger time must be at least\n     * `minAccountSequenceAge` greater than sourceAccount's `sequenceTime`.\n     * Internally this will set the `minAccountSequenceAge` precondition.\n     *\n     * @param {number} durationInSeconds  The minimum amount of time between\n     *     source account sequence time and the ledger time when this transaction\n     *     will become valid. If the value is `0`, the transaction is unrestricted\n     *     by the account sequence age. Cannot be negative.\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setMinAccountSequenceAge\",\n    value: function setMinAccountSequenceAge(durationInSeconds) {\n      if (typeof durationInSeconds !== 'number') {\n        throw new Error('min_account_sequence_age must be a number');\n      }\n      if (this.minAccountSequenceAge !== null) {\n        throw new Error('min_account_sequence_age has been already set - setting min_account_sequence_age would overwrite it.');\n      }\n      if (durationInSeconds < 0) {\n        throw new Error('min_account_sequence_age cannot be negative');\n      }\n      this.minAccountSequenceAge = durationInSeconds;\n      return this;\n    }\n\n    /**\n     * For the transaction to be valid, the current ledger number must be at least\n     * `minAccountSequenceLedgerGap` greater than sourceAccount's ledger sequence.\n     * Internally this will set the `minAccountSequenceLedgerGap` precondition.\n     *\n     * @param {number} gap  The minimum number of ledgers between source account\n     *     sequence and the ledger number when this transaction will become valid.\n     *     If the value is `0`, the transaction is unrestricted by the account\n     *     sequence ledger. Cannot be negative.\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setMinAccountSequenceLedgerGap\",\n    value: function setMinAccountSequenceLedgerGap(gap) {\n      if (this.minAccountSequenceLedgerGap !== null) {\n        throw new Error('min_account_sequence_ledger_gap has been already set - setting min_account_sequence_ledger_gap would overwrite it.');\n      }\n      if (gap < 0) {\n        throw new Error('min_account_sequence_ledger_gap cannot be negative');\n      }\n      this.minAccountSequenceLedgerGap = gap;\n      return this;\n    }\n\n    /**\n     * For the transaction to be valid, there must be a signature corresponding to\n     * every Signer in this array, even if the signature is not otherwise required\n     * by the sourceAccount or operations. Internally this will set the\n     * `extraSigners` precondition.\n     *\n     * @param {string[]} extraSigners   required extra signers (as {@link StrKey}s)\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setExtraSigners\",\n    value: function setExtraSigners(extraSigners) {\n      if (!Array.isArray(extraSigners)) {\n        throw new Error('extra_signers must be an array of strings.');\n      }\n      if (this.extraSigners !== null) {\n        throw new Error('extra_signers has been already set - setting extra_signers would overwrite it.');\n      }\n      if (extraSigners.length > 2) {\n        throw new Error('extra_signers cannot be longer than 2 elements.');\n      }\n      this.extraSigners = _toConsumableArray(extraSigners);\n      return this;\n    }\n\n    /**\n     * Set network nassphrase for the Transaction that will be built.\n     *\n     * @param {string} networkPassphrase    passphrase of the target Stellar\n     *     network (e.g. \"Public Global Stellar Network ; September 2015\").\n     *\n     * @returns {TransactionBuilder}\n     */\n  }, {\n    key: \"setNetworkPassphrase\",\n    value: function setNetworkPassphrase(networkPassphrase) {\n      this.networkPassphrase = networkPassphrase;\n      return this;\n    }\n\n    /**\n     * Sets the transaction's internal Soroban transaction data (resources,\n     * footprint, etc.).\n     *\n     * For non-contract(non-Soroban) transactions, this setting has no effect. In\n     * the case of Soroban transactions, this is either an instance of\n     * {@link xdr.SorobanTransactionData} or a base64-encoded string of said\n     * structure. This is usually obtained from the simulation response based on a\n     * transaction with a Soroban operation (e.g.\n     * {@link Operation.invokeHostFunction}, providing necessary resource\n     * and storage footprint estimations for contract invocation.\n     *\n     * @param {xdr.SorobanTransactionData | string} sorobanData    the\n     *    {@link xdr.SorobanTransactionData} as a raw xdr object or a base64\n     *    string to be decoded\n     *\n     * @returns {TransactionBuilder}\n     * @see {SorobanDataBuilder}\n     */\n  }, {\n    key: \"setSorobanData\",\n    value: function setSorobanData(sorobanData) {\n      this.sorobanData = new _sorobandata_builder.SorobanDataBuilder(sorobanData).build();\n      return this;\n    }\n\n    /**\n     * This will build the transaction.\n     * It will also increment the source account's sequence number by 1.\n     * @returns {Transaction} This method will return the built {@link Transaction}.\n     */\n  }, {\n    key: \"build\",\n    value: function build() {\n      var sequenceNumber = new _bignumber[\"default\"](this.source.sequenceNumber()).plus(1);\n      var fee = new _bignumber[\"default\"](this.baseFee).times(this.operations.length).toNumber();\n      var attrs = {\n        fee: fee,\n        seqNum: _xdr[\"default\"].SequenceNumber.fromString(sequenceNumber.toString()),\n        memo: this.memo ? this.memo.toXDRObject() : null\n      };\n      if (this.timebounds === null || typeof this.timebounds.minTime === 'undefined' || typeof this.timebounds.maxTime === 'undefined') {\n        throw new Error('TimeBounds has to be set or you must call setTimeout(TimeoutInfinite).');\n      }\n      if (isValidDate(this.timebounds.minTime)) {\n        this.timebounds.minTime = this.timebounds.minTime.getTime() / 1000;\n      }\n      if (isValidDate(this.timebounds.maxTime)) {\n        this.timebounds.maxTime = this.timebounds.maxTime.getTime() / 1000;\n      }\n      this.timebounds.minTime = _jsXdr.UnsignedHyper.fromString(this.timebounds.minTime.toString());\n      this.timebounds.maxTime = _jsXdr.UnsignedHyper.fromString(this.timebounds.maxTime.toString());\n      var timeBounds = new _xdr[\"default\"].TimeBounds(this.timebounds);\n      if (this.hasV2Preconditions()) {\n        var ledgerBounds = null;\n        if (this.ledgerbounds !== null) {\n          ledgerBounds = new _xdr[\"default\"].LedgerBounds(this.ledgerbounds);\n        }\n        var minSeqNum = this.minAccountSequence || '0';\n        minSeqNum = _xdr[\"default\"].SequenceNumber.fromString(minSeqNum);\n        var minSeqAge = _jsXdr.UnsignedHyper.fromString(this.minAccountSequenceAge !== null ? this.minAccountSequenceAge.toString() : '0');\n        var minSeqLedgerGap = this.minAccountSequenceLedgerGap || 0;\n        var extraSigners = this.extraSigners !== null ? this.extraSigners.map(_signerkey.SignerKey.decodeAddress) : [];\n        attrs.cond = _xdr[\"default\"].Preconditions.precondV2(new _xdr[\"default\"].PreconditionsV2({\n          timeBounds: timeBounds,\n          ledgerBounds: ledgerBounds,\n          minSeqNum: minSeqNum,\n          minSeqAge: minSeqAge,\n          minSeqLedgerGap: minSeqLedgerGap,\n          extraSigners: extraSigners\n        }));\n      } else {\n        attrs.cond = _xdr[\"default\"].Preconditions.precondTime(timeBounds);\n      }\n      attrs.sourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(this.source.accountId());\n\n      // TODO - remove this workaround for TransactionExt ts constructor\n      //       and use the typescript generated static factory method once fixed\n      //       https://github.com/stellar/dts-xdr/issues/5\n      if (this.sorobanData) {\n        // @ts-ignore\n        attrs.ext = new _xdr[\"default\"].TransactionExt(1, this.sorobanData);\n      } else {\n        // @ts-ignore\n        attrs.ext = new _xdr[\"default\"].TransactionExt(0, _xdr[\"default\"].Void);\n      }\n      var xtx = new _xdr[\"default\"].Transaction(attrs);\n      xtx.operations(this.operations);\n      var txEnvelope = new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTx(new _xdr[\"default\"].TransactionV1Envelope({\n        tx: xtx\n      }));\n      var tx = new _transaction.Transaction(txEnvelope, this.networkPassphrase);\n      this.source.incrementSequenceNumber();\n      return tx;\n    }\n  }, {\n    key: \"hasV2Preconditions\",\n    value: function hasV2Preconditions() {\n      return this.ledgerbounds !== null || this.minAccountSequence !== null || this.minAccountSequenceAge !== null || this.minAccountSequenceLedgerGap !== null || this.extraSigners !== null && this.extraSigners.length > 0;\n    }\n\n    /**\n     * Builds a {@link FeeBumpTransaction}, enabling you to resubmit an existing\n     * transaction with a higher fee.\n     *\n     * @param {Keypair|string}  feeSource - account paying for the transaction,\n     *     in the form of either a Keypair (only the public key is used) or\n     *     an account ID (in G... or M... form, but refer to `withMuxing`)\n     * @param {string}          baseFee   - max fee willing to pay per operation\n     *     in inner transaction (**in stroops**)\n     * @param {Transaction}     innerTx   - {@link Transaction} to be bumped by\n     *     the fee bump transaction\n     * @param {string}          networkPassphrase - passphrase of the target\n     *     Stellar network (e.g. \"Public Global Stellar Network ; September 2015\",\n     *     see {@link Networks})\n     *\n     * @todo Alongside the next major version bump, this type signature can be\n     *       changed to be less awkward: accept a MuxedAccount as the `feeSource`\n     *       rather than a keypair or string.\n     *\n     * @note Your fee-bump amount should be >= 10x the original fee.\n     * @see  https://developers.stellar.org/docs/glossary/fee-bumps/#replace-by-fee\n     *\n     * @returns {FeeBumpTransaction}\n     */\n  }], [{\n    key: \"cloneFrom\",\n    value: function cloneFrom(tx) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!(tx instanceof _transaction.Transaction)) {\n        throw new TypeError(\"expected a 'Transaction', got: \".concat(tx));\n      }\n      var sequenceNum = (BigInt(tx.sequence) - 1n).toString();\n      var source;\n      // rebuild the source account based on the strkey\n      if (_strkey.StrKey.isValidMed25519PublicKey(tx.source)) {\n        source = _muxed_account.MuxedAccount.fromAddress(tx.source, sequenceNum);\n      } else if (_strkey.StrKey.isValidEd25519PublicKey(tx.source)) {\n        source = new _account.Account(tx.source, sequenceNum);\n      } else {\n        throw new TypeError(\"unsupported tx source account: \".concat(tx.source));\n      }\n\n      // the initial fee passed to the builder gets scaled up based on the number\n      // of operations at the end, so we have to down-scale first\n      var unscaledFee = parseInt(tx.fee, 10) / tx.operations.length;\n      var builder = new TransactionBuilder(source, _objectSpread({\n        fee: (unscaledFee || BASE_FEE).toString(),\n        memo: tx.memo,\n        networkPassphrase: tx.networkPassphrase,\n        timebounds: tx.timeBounds,\n        ledgerbounds: tx.ledgerBounds,\n        minAccountSequence: tx.minAccountSequence,\n        minAccountSequenceAge: tx.minAccountSequenceAge,\n        minAccountSequenceLedgerGap: tx.minAccountSequenceLedgerGap,\n        extraSigners: tx.extraSigners\n      }, opts));\n      tx._tx.operations().forEach(function (op) {\n        return builder.addOperation(op);\n      });\n      return builder;\n    }\n  }, {\n    key: \"buildFeeBumpTransaction\",\n    value: function buildFeeBumpTransaction(feeSource, baseFee, innerTx, networkPassphrase) {\n      var innerOps = innerTx.operations.length;\n      var innerBaseFeeRate = new _bignumber[\"default\"](innerTx.fee).div(innerOps);\n      var base = new _bignumber[\"default\"](baseFee);\n\n      // The fee rate for fee bump is at least the fee rate of the inner transaction\n      if (base.lt(innerBaseFeeRate)) {\n        throw new Error(\"Invalid baseFee, it should be at least \".concat(innerBaseFeeRate, \" stroops.\"));\n      }\n      var minBaseFee = new _bignumber[\"default\"](BASE_FEE);\n\n      // The fee rate is at least the minimum fee\n      if (base.lt(minBaseFee)) {\n        throw new Error(\"Invalid baseFee, it should be at least \".concat(minBaseFee, \" stroops.\"));\n      }\n      var innerTxEnvelope = innerTx.toEnvelope();\n      if (innerTxEnvelope[\"switch\"]() === _xdr[\"default\"].EnvelopeType.envelopeTypeTxV0()) {\n        var v0Tx = innerTxEnvelope.v0().tx();\n        var v1Tx = new _xdr[\"default\"].Transaction({\n          sourceAccount: new _xdr[\"default\"].MuxedAccount.keyTypeEd25519(v0Tx.sourceAccountEd25519()),\n          fee: v0Tx.fee(),\n          seqNum: v0Tx.seqNum(),\n          cond: _xdr[\"default\"].Preconditions.precondTime(v0Tx.timeBounds()),\n          memo: v0Tx.memo(),\n          operations: v0Tx.operations(),\n          ext: new _xdr[\"default\"].TransactionExt(0)\n        });\n        innerTxEnvelope = new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTx(new _xdr[\"default\"].TransactionV1Envelope({\n          tx: v1Tx,\n          signatures: innerTxEnvelope.v0().signatures()\n        }));\n      }\n      var feeSourceAccount;\n      if (typeof feeSource === 'string') {\n        feeSourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(feeSource);\n      } else {\n        feeSourceAccount = feeSource.xdrMuxedAccount();\n      }\n      var tx = new _xdr[\"default\"].FeeBumpTransaction({\n        feeSource: feeSourceAccount,\n        fee: _xdr[\"default\"].Int64.fromString(base.times(innerOps + 1).toString()),\n        innerTx: _xdr[\"default\"].FeeBumpTransactionInnerTx.envelopeTypeTx(innerTxEnvelope.v1()),\n        ext: new _xdr[\"default\"].FeeBumpTransactionExt(0)\n      });\n      var feeBumpTxEnvelope = new _xdr[\"default\"].FeeBumpTransactionEnvelope({\n        tx: tx,\n        signatures: []\n      });\n      var envelope = new _xdr[\"default\"].TransactionEnvelope.envelopeTypeTxFeeBump(feeBumpTxEnvelope);\n      return new _fee_bump_transaction.FeeBumpTransaction(envelope, networkPassphrase);\n    }\n\n    /**\n     * Build a {@link Transaction} or {@link FeeBumpTransaction} from an\n     * xdr.TransactionEnvelope.\n     *\n     * @param {string|xdr.TransactionEnvelope} envelope - The transaction envelope\n     *     object or base64 encoded string.\n     * @param {string} networkPassphrase - The network passphrase of the target\n     *     Stellar network (e.g. \"Public Global Stellar Network ; September\n     *     2015\"), see {@link Networks}.\n     *\n     * @returns {Transaction|FeeBumpTransaction}\n     */\n  }, {\n    key: \"fromXDR\",\n    value: function fromXDR(envelope, networkPassphrase) {\n      if (typeof envelope === 'string') {\n        envelope = _xdr[\"default\"].TransactionEnvelope.fromXDR(envelope, 'base64');\n      }\n      if (envelope[\"switch\"]() === _xdr[\"default\"].EnvelopeType.envelopeTypeTxFeeBump()) {\n        return new _fee_bump_transaction.FeeBumpTransaction(envelope, networkPassphrase);\n      }\n      return new _transaction.Transaction(envelope, networkPassphrase);\n    }\n  }]);\n}();\n/**\n * Checks whether a provided object is a valid Date.\n * @argument {Date} d date object\n * @returns {boolean}\n */\nfunction isValidDate(d) {\n  // isnan is okay here because it correctly checks for invalid date objects\n  // eslint-disable-next-line no-restricted-globals\n  return d instanceof Date && !isNaN(d);\n}"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 21627, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/network.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Networks = void 0;\n/**\n * Contains passphrases for common networks:\n * * `Networks.PUBLIC`: `Public Global Stellar Network ; September 2015`\n * * `Networks.TESTNET`: `Test SDF Network ; September 2015`\n * * `Networks.FUTURENET`: `Test SDF Future Network ; October 2022`\n * * `Networks.STANDALONE`: `Standalone Network ; February 2017`\n *\n * @type {{PUBLIC: string, TESTNET: string, FUTURENET: string, STANDALONE: string }}\n */\nvar Networks = exports.Networks = {\n  PUBLIC: 'Public Global Stellar Network ; September 2015',\n  TESTNET: 'Test SDF Network ; September 2015',\n  FUTURENET: 'Test SDF Future Network ; October 2022',\n  SANDBOX: 'Local Sandbox Stellar Network ; September 2022',\n  STANDALONE: 'Standalone Network ; February 2017'\n};"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,QAAQ,GAAG,KAAK;AACxB;;;;;;;;CAQC,GACD,IAAI,WAAW,QAAQ,QAAQ,GAAG;IAChC,QAAQ;IACR,SAAS;IACT,WAAW;IACX,SAAS;IACT,YAAY;AACd","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 21652, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/soroban.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Soroban = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toArray(r) { return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/* Helper class to assist with formatting and parsing token amounts. */\nvar Soroban = exports.Soroban = /*#__PURE__*/function () {\n  function Soroban() {\n    _classCallCheck(this, Soroban);\n  }\n  return _createClass(Soroban, null, [{\n    key: \"formatTokenAmount\",\n    value:\n    /**\n     * Given a whole number smart contract amount of a token and an amount of\n     * decimal places (if the token has any), it returns a \"display\" value.\n     *\n     * All arithmetic inside the contract is performed on integers to avoid\n     * potential precision and consistency issues of floating-point.\n     *\n     * @param {string} amount   the token amount you want to display\n     * @param {number} decimals specify how many decimal places a token has\n     *\n     * @returns {string} the display value\n     * @throws {TypeError} if the given amount has a decimal point already\n     * @example\n     * formatTokenAmount(\"123000\", 4) === \"12.3\";\n     */\n    function formatTokenAmount(amount, decimals) {\n      if (amount.includes('.')) {\n        throw new TypeError('No decimals are allowed');\n      }\n      var formatted = amount;\n      if (decimals > 0) {\n        if (decimals > formatted.length) {\n          formatted = ['0', formatted.toString().padStart(decimals, '0')].join('.');\n        } else {\n          formatted = [formatted.slice(0, -decimals), formatted.slice(-decimals)].join('.');\n        }\n      }\n\n      // remove trailing zero if any\n      return formatted.replace(/(\\.\\d*?)0+$/, '$1');\n    }\n\n    /**\n     * Parse a token amount to use it on smart contract\n     *\n     * This function takes the display value and its decimals (if the token has\n     * any) and returns a string that'll be used within the smart contract.\n     *\n     * @param {string} value      the token amount you want to use it on smart\n     *    contract which you've been displaying in a UI\n     * @param {number} decimals   the number of decimal places expected in the\n     *    display value (different than the \"actual\" number, because suffix zeroes\n     *    might not be present)\n     *\n     * @returns {string}  the whole number token amount represented by the display\n     *    value with the decimal places shifted over\n     *\n     * @example\n     * const displayValueAmount = \"123.4560\"\n     * const parsedAmtForSmartContract = parseTokenAmount(displayValueAmount, 5);\n     * parsedAmtForSmartContract === \"12345600\"\n     */\n  }, {\n    key: \"parseTokenAmount\",\n    value: function parseTokenAmount(value, decimals) {\n      var _fraction$padEnd;\n      var _value$split$slice = value.split('.').slice(),\n        _value$split$slice2 = _toArray(_value$split$slice),\n        whole = _value$split$slice2[0],\n        fraction = _value$split$slice2[1],\n        rest = _value$split$slice2.slice(2);\n      if (rest.length) {\n        throw new Error(\"Invalid decimal value: \".concat(value));\n      }\n      var shifted = BigInt(whole + ((_fraction$padEnd = fraction === null || fraction === void 0 ? void 0 : fraction.padEnd(decimals, '0')) !== null && _fraction$padEnd !== void 0 ? _fraction$padEnd : '0'.repeat(decimals)));\n      return shifted.toString();\n    }\n  }]);\n}();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 21779, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/contract.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Contract = void 0;\nvar _address = require(\"./address\");\nvar _operation = require(\"./operation\");\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nvar _strkey = require(\"./strkey\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Create a new Contract object.\n *\n * `Contract` represents a single contract in the Stellar network, embodying the\n * interface of the contract. See\n * [Contracts](https://soroban.stellar.org/docs/learn/interacting-with-contracts)\n * for more information about how contracts work in Stellar.\n *\n * @constructor\n *\n * @param {string} contractId - ID of the contract (ex.\n *     `CA3D5KRYM6CB7OWQ6TWYRR3Z4T7GNZLKERYNZGGA5SOAOPIFY6YQGAXE`).\n */\nvar Contract = exports.Contract = /*#__PURE__*/function () {\n  function Contract(contractId) {\n    _classCallCheck(this, Contract);\n    try {\n      // First, try it as a strkey\n      this._id = _strkey.StrKey.decodeContract(contractId);\n    } catch (_) {\n      throw new Error(\"Invalid contract ID: \".concat(contractId));\n    }\n  }\n\n  /**\n   * Returns Stellar contract ID as a strkey, ex.\n   * `CA3D5KRYM6CB7OWQ6TWYRR3Z4T7GNZLKERYNZGGA5SOAOPIFY6YQGAXE`.\n   * @returns {string}\n   */\n  return _createClass(Contract, [{\n    key: \"contractId\",\n    value: function contractId() {\n      return _strkey.StrKey.encodeContract(this._id);\n    }\n\n    /** @returns {string} the ID as a strkey (C...) */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.contractId();\n    }\n\n    /** @returns {Address} the wrapped address of this contract */\n  }, {\n    key: \"address\",\n    value: function address() {\n      return _address.Address.contract(this._id);\n    }\n\n    /**\n     * Returns an operation that will invoke this contract call.\n     *\n     * @param {string}        method   name of the method to call\n     * @param {...xdr.ScVal}  params   arguments to pass to the function call\n     *\n     * @returns {xdr.Operation}   an InvokeHostFunctionOp operation to call the\n     *    contract with the given method and parameters\n     *\n     * @see Operation.invokeHostFunction\n     * @see Operation.invokeContractFunction\n     * @see Operation.createCustomContract\n     * @see Operation.createStellarAssetContract\n     * @see Operation.uploadContractWasm\n     */\n  }, {\n    key: \"call\",\n    value: function call(method) {\n      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        params[_key - 1] = arguments[_key];\n      }\n      return _operation.Operation.invokeContractFunction({\n        contract: this.address().toString(),\n        \"function\": method,\n        args: params\n      });\n    }\n\n    /**\n     * Returns the read-only footprint entries necessary for any invocations to\n     * this contract, for convenience when manually adding it to your\n     * transaction's overall footprint or doing bump/restore operations.\n     *\n     * @returns {xdr.LedgerKey} the ledger key for the deployed contract instance\n     */\n  }, {\n    key: \"getFootprint\",\n    value: function getFootprint() {\n      return _xdr[\"default\"].LedgerKey.contractData(new _xdr[\"default\"].LedgerKeyContractData({\n        contract: this.address().toScAddress(),\n        key: _xdr[\"default\"].ScVal.scvLedgerKeyContractInstance(),\n        durability: _xdr[\"default\"].ContractDataDurability.persistent()\n      }));\n    }\n  }]);\n}();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 21904, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/numbers/uint128.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Uint128 = void 0;\nvar _jsXdr = require(\"@stellar/js-xdr\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar Uint128 = exports.Uint128 = /*#__PURE__*/function (_LargeInt) {\n  /**\n   * Construct an unsigned 128-bit integer that can be XDR-encoded.\n   *\n   * @param  {Array<number|bigint|string>}  args - one or more slices to encode\n   *     in big-endian format (i.e. earlier elements are higher bits)\n   */\n  function Uint128() {\n    _classCallCheck(this, Uint128);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _callSuper(this, Uint128, [args]);\n  }\n  _inherits(Uint128, _LargeInt);\n  return _createClass(Uint128, [{\n    key: \"unsigned\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return 128;\n    }\n  }]);\n}(_jsXdr.LargeInt);\nUint128.defineIntBoundaries();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 22025, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/numbers/uint256.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Uint256 = void 0;\nvar _jsXdr = require(\"@stellar/js-xdr\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar Uint256 = exports.Uint256 = /*#__PURE__*/function (_LargeInt) {\n  /**\n   * Construct an unsigned 256-bit integer that can be XDR-encoded.\n   *\n   * @param  {Array<number|bigint|string>}  args - one or more slices to encode\n   *     in big-endian format (i.e. earlier elements are higher bits)\n   */\n  function Uint256() {\n    _classCallCheck(this, Uint256);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _callSuper(this, Uint256, [args]);\n  }\n  _inherits(Uint256, _LargeInt);\n  return _createClass(Uint256, [{\n    key: \"unsigned\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return 256;\n    }\n  }]);\n}(_jsXdr.LargeInt);\nUint256.defineIntBoundaries();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 22146, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/numbers/int128.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Int128 = void 0;\nvar _jsXdr = require(\"@stellar/js-xdr\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar Int128 = exports.Int128 = /*#__PURE__*/function (_LargeInt) {\n  /**\n   * Construct a signed 128-bit integer that can be XDR-encoded.\n   *\n   * @param  {Array<number|bigint|string>}  args - one or more slices to encode\n   *     in big-endian format (i.e. earlier elements are higher bits)\n   */\n  function Int128() {\n    _classCallCheck(this, Int128);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _callSuper(this, Int128, [args]);\n  }\n  _inherits(Int128, _LargeInt);\n  return _createClass(Int128, [{\n    key: \"unsigned\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return 128;\n    }\n  }]);\n}(_jsXdr.LargeInt);\nInt128.defineIntBoundaries();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 22267, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/numbers/int256.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Int256 = void 0;\nvar _jsXdr = require(\"@stellar/js-xdr\");\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nvar Int256 = exports.Int256 = /*#__PURE__*/function (_LargeInt) {\n  /**\n   * Construct a signed 256-bit integer that can be XDR-encoded.\n   *\n   * @param  {Array<number|bigint|string>}  args - one or more slices to encode\n   *     in big-endian format (i.e. earlier elements are higher bits)\n   */\n  function Int256() {\n    _classCallCheck(this, Int256);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _callSuper(this, Int256, [args]);\n  }\n  _inherits(Int256, _LargeInt);\n  return _createClass(Int256, [{\n    key: \"unsigned\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return 256;\n    }\n  }]);\n}(_jsXdr.LargeInt);\nInt256.defineIntBoundaries();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 22388, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/numbers/xdr_large_int.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.XdrLargeInt = void 0;\nvar _jsXdr = require(\"@stellar/js-xdr\");\nvar _uint = require(\"./uint128\");\nvar _uint2 = require(\"./uint256\");\nvar _int = require(\"./int128\");\nvar _int2 = require(\"./int256\");\nvar _xdr = _interopRequireDefault(require(\"../xdr\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); } /* eslint no-bitwise: [\"error\", {\"allow\": [\">>\"]}] */\n/**\n * A wrapper class to represent large XDR-encodable integers.\n *\n * This operates at a lower level than {@link ScInt} by forcing you to specify\n * the type / width / size in bits of the integer you're targeting, regardless\n * of the input value(s) you provide.\n *\n * @param {string}  type - force a specific data type. the type choices are:\n *    'i64', 'u64', 'i128', 'u128', 'i256', and 'u256' (default: the smallest\n *    one that fits the `value`) (see {@link XdrLargeInt.isType})\n * @param {number|bigint|string|Array<number|bigint|string>} values   a list of\n *    integer-like values interpreted in big-endian order\n */\nvar XdrLargeInt = exports.XdrLargeInt = /*#__PURE__*/function () {\n  function XdrLargeInt(type, values) {\n    _classCallCheck(this, XdrLargeInt);\n    /** @type {xdr.LargeInt} */\n    _defineProperty(this, \"int\", void 0);\n    // child class of a jsXdr.LargeInt\n    /** @type {string} */\n    _defineProperty(this, \"type\", void 0);\n    if (!(values instanceof Array)) {\n      values = [values];\n    }\n\n    // normalize values to one type\n    values = values.map(function (i) {\n      // micro-optimization to no-op on the likeliest input value:\n      if (typeof i === 'bigint') {\n        return i;\n      }\n      if (i instanceof XdrLargeInt) {\n        return i.toBigInt();\n      }\n      return BigInt(i);\n    });\n    switch (type) {\n      case 'i64':\n        this[\"int\"] = new _jsXdr.Hyper(values);\n        break;\n      case 'i128':\n        this[\"int\"] = new _int.Int128(values);\n        break;\n      case 'i256':\n        this[\"int\"] = new _int2.Int256(values);\n        break;\n      case 'u64':\n        this[\"int\"] = new _jsXdr.UnsignedHyper(values);\n        break;\n      case 'u128':\n        this[\"int\"] = new _uint.Uint128(values);\n        break;\n      case 'u256':\n        this[\"int\"] = new _uint2.Uint256(values);\n        break;\n      default:\n        throw TypeError(\"invalid type: \".concat(type));\n    }\n    this.type = type;\n  }\n\n  /**\n   * @returns {number}\n   * @throws {RangeError} if the value can't fit into a Number\n   */\n  return _createClass(XdrLargeInt, [{\n    key: \"toNumber\",\n    value: function toNumber() {\n      var bi = this[\"int\"].toBigInt();\n      if (bi > Number.MAX_SAFE_INTEGER || bi < Number.MIN_SAFE_INTEGER) {\n        throw RangeError(\"value \".concat(bi, \" not in range for Number \") + \"[\".concat(Number.MAX_SAFE_INTEGER, \", \").concat(Number.MIN_SAFE_INTEGER, \"]\"));\n      }\n      return Number(bi);\n    }\n\n    /** @returns {bigint} */\n  }, {\n    key: \"toBigInt\",\n    value: function toBigInt() {\n      return this[\"int\"].toBigInt();\n    }\n\n    /** @returns {xdr.ScVal} the integer encoded with `ScValType = I64` */\n  }, {\n    key: \"toI64\",\n    value: function toI64() {\n      this._sizeCheck(64);\n      var v = this.toBigInt();\n      if (BigInt.asIntN(64, v) !== v) {\n        throw RangeError(\"value too large for i64: \".concat(v));\n      }\n      return _xdr[\"default\"].ScVal.scvI64(new _xdr[\"default\"].Int64(v));\n    }\n\n    /** @returns {xdr.ScVal} the integer encoded with `ScValType = U64` */\n  }, {\n    key: \"toU64\",\n    value: function toU64() {\n      this._sizeCheck(64);\n      return _xdr[\"default\"].ScVal.scvU64(new _xdr[\"default\"].Uint64(BigInt.asUintN(64, this.toBigInt())) // reiterpret as unsigned\n      );\n    }\n\n    /**\n     * @returns {xdr.ScVal} the integer encoded with `ScValType = I128`\n     * @throws {RangeError} if the value cannot fit in 128 bits\n     */\n  }, {\n    key: \"toI128\",\n    value: function toI128() {\n      this._sizeCheck(128);\n      var v = this[\"int\"].toBigInt();\n      var hi64 = BigInt.asIntN(64, v >> 64n); // encode top 64 w/ sign bit\n      var lo64 = BigInt.asUintN(64, v); // grab btm 64, encode sign\n\n      return _xdr[\"default\"].ScVal.scvI128(new _xdr[\"default\"].Int128Parts({\n        hi: new _xdr[\"default\"].Int64(hi64),\n        lo: new _xdr[\"default\"].Uint64(lo64)\n      }));\n    }\n\n    /**\n     * @returns {xdr.ScVal} the integer encoded with `ScValType = U128`\n     * @throws {RangeError} if the value cannot fit in 128 bits\n     */\n  }, {\n    key: \"toU128\",\n    value: function toU128() {\n      this._sizeCheck(128);\n      var v = this[\"int\"].toBigInt();\n      return _xdr[\"default\"].ScVal.scvU128(new _xdr[\"default\"].UInt128Parts({\n        hi: new _xdr[\"default\"].Uint64(BigInt.asUintN(64, v >> 64n)),\n        lo: new _xdr[\"default\"].Uint64(BigInt.asUintN(64, v))\n      }));\n    }\n\n    /** @returns {xdr.ScVal} the integer encoded with `ScValType = I256` */\n  }, {\n    key: \"toI256\",\n    value: function toI256() {\n      var v = this[\"int\"].toBigInt();\n      var hiHi64 = BigInt.asIntN(64, v >> 192n); // keep sign bit\n      var hiLo64 = BigInt.asUintN(64, v >> 128n);\n      var loHi64 = BigInt.asUintN(64, v >> 64n);\n      var loLo64 = BigInt.asUintN(64, v);\n      return _xdr[\"default\"].ScVal.scvI256(new _xdr[\"default\"].Int256Parts({\n        hiHi: new _xdr[\"default\"].Int64(hiHi64),\n        hiLo: new _xdr[\"default\"].Uint64(hiLo64),\n        loHi: new _xdr[\"default\"].Uint64(loHi64),\n        loLo: new _xdr[\"default\"].Uint64(loLo64)\n      }));\n    }\n\n    /** @returns {xdr.ScVal} the integer encoded with `ScValType = U256` */\n  }, {\n    key: \"toU256\",\n    value: function toU256() {\n      var v = this[\"int\"].toBigInt();\n      var hiHi64 = BigInt.asUintN(64, v >> 192n); // encode sign bit\n      var hiLo64 = BigInt.asUintN(64, v >> 128n);\n      var loHi64 = BigInt.asUintN(64, v >> 64n);\n      var loLo64 = BigInt.asUintN(64, v);\n      return _xdr[\"default\"].ScVal.scvU256(new _xdr[\"default\"].UInt256Parts({\n        hiHi: new _xdr[\"default\"].Uint64(hiHi64),\n        hiLo: new _xdr[\"default\"].Uint64(hiLo64),\n        loHi: new _xdr[\"default\"].Uint64(loHi64),\n        loLo: new _xdr[\"default\"].Uint64(loLo64)\n      }));\n    }\n\n    /** @returns {xdr.ScVal} the smallest interpretation of the stored value */\n  }, {\n    key: \"toScVal\",\n    value: function toScVal() {\n      switch (this.type) {\n        case 'i64':\n          return this.toI64();\n        case 'i128':\n          return this.toI128();\n        case 'i256':\n          return this.toI256();\n        case 'u64':\n          return this.toU64();\n        case 'u128':\n          return this.toU128();\n        case 'u256':\n          return this.toU256();\n        default:\n          throw TypeError(\"invalid type: \".concat(this.type));\n      }\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this[\"int\"].valueOf();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this[\"int\"].toString();\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        value: this.toBigInt().toString(),\n        type: this.type\n      };\n    }\n  }, {\n    key: \"_sizeCheck\",\n    value: function _sizeCheck(bits) {\n      if (this[\"int\"].size > bits) {\n        throw RangeError(\"value too large for \".concat(bits, \" bits (\").concat(this.type, \")\"));\n      }\n    }\n  }], [{\n    key: \"isType\",\n    value: function isType(type) {\n      switch (type) {\n        case 'i64':\n        case 'i128':\n        case 'i256':\n        case 'u64':\n        case 'u128':\n        case 'u256':\n          return true;\n        default:\n          return false;\n      }\n    }\n\n    /**\n     * Convert the raw `ScValType` string (e.g. 'scvI128', generated by the XDR)\n     * to a type description for {@link XdrLargeInt} construction (e.g. 'i128')\n     *\n     * @param {string} scvType  the `xdr.ScValType` as a string\n     * @returns {string} a suitable equivalent type to construct this object\n     */\n  }, {\n    key: \"getType\",\n    value: function getType(scvType) {\n      return scvType.slice(3).toLowerCase();\n    }\n  }]);\n}();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 22681, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/numbers/sc_int.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScInt = void 0;\nvar _xdr_large_int = require(\"./xdr_large_int\");\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n/**\n * Provides an easier way to manipulate large numbers for Stellar operations.\n *\n * You can instantiate this \"**s**mart **c**ontract integer\" value either from\n * bigints, strings, or numbers (whole numbers, or this will throw).\n *\n * If you need to create a native BigInt from a list of integer \"parts\" (for\n * example, you have a series of encoded 32-bit integers that represent a larger\n * value), you can use the lower level abstraction {@link XdrLargeInt}. For\n * example, you could do `new XdrLargeInt('u128', bytes...).toBigInt()`.\n *\n * @example\n * import { xdr, ScInt, scValToBigInt } from \"@stellar/stellar-base\";\n *\n * // You have an ScVal from a contract and want to parse it into JS native.\n * const value = xdr.ScVal.fromXDR(someXdr, \"base64\");\n * const bigi = scValToBigInt(value); // grab it as a BigInt\n * let sci = new ScInt(bigi);\n *\n * sci.toNumber(); // gives native JS type (w/ size check)\n * sci.toBigInt(); // gives the native BigInt value\n * sci.toU64();    // gives ScValType-specific XDR constructs (with size checks)\n *\n * // You have a number and want to shove it into a contract.\n * sci = ScInt(0xdeadcafebabe);\n * sci.toBigInt() // returns 244838016400062n\n * sci.toNumber() // throws: too large\n *\n * // Pass any to e.g. a Contract.call(), conversion happens automatically\n * // regardless of the initial type.\n * const scValU128 = sci.toU128();\n * const scValI256 = sci.toI256();\n * const scValU64  = sci.toU64();\n *\n * // Lots of ways to initialize:\n * ScInt(\"123456789123456789\")\n * ScInt(123456789123456789n);\n * ScInt(1n << 140n);\n * ScInt(-42);\n * ScInt(scValToBigInt(scValU128)); // from above\n *\n * // If you know the type ahead of time (accessing `.raw` is faster than\n * // conversions), you can specify the type directly (otherwise, it's\n * // interpreted from the numbers you pass in):\n * const i = ScInt(123456789n, { type: \"u256\" });\n *\n * // For example, you can use the underlying `sdk.U256` and convert it to an\n * // `xdr.ScVal` directly like so:\n * const scv = new xdr.ScVal.scvU256(i.raw);\n *\n * // Or reinterpret it as a different type (size permitting):\n * const scv = i.toI64();\n *\n * @param {number|bigint|string} value - a single, integer-like value which will\n *    be interpreted in the smallest appropriate XDR type supported by Stellar\n *    (64, 128, or 256 bit integer values). signed values are supported, though\n *    they are sanity-checked against `opts.type`. if you need 32-bit values,\n *    you can construct them directly without needing this wrapper, e.g.\n *    `xdr.ScVal.scvU32(1234)`.\n *\n * @param {object}  [opts] - an optional object controlling optional parameters\n * @param {string}  [opts.type] - force a specific data type. the type choices\n *    are: 'i64', 'u64', 'i128', 'u128', 'i256', and 'u256' (default: the\n *    smallest one that fits the `value`)\n *\n * @throws {RangeError} if the `value` is invalid (e.g. floating point), too\n *    large (i.e. exceeds a 256-bit value), or doesn't fit in the `opts.type`\n * @throws {TypeError} on missing parameters, or if the \"signedness\" of `opts`\n *    doesn't match input `value`, e.g. passing `{type: 'u64'}` yet passing -1n\n * @throws {SyntaxError} if a string `value` can't be parsed as a big integer\n */\nvar ScInt = exports.ScInt = /*#__PURE__*/function (_XdrLargeInt) {\n  function ScInt(value, opts) {\n    var _opts$type;\n    _classCallCheck(this, ScInt);\n    var signed = value < 0;\n    var type = (_opts$type = opts === null || opts === void 0 ? void 0 : opts.type) !== null && _opts$type !== void 0 ? _opts$type : '';\n    if (type.startsWith('u') && signed) {\n      throw TypeError(\"specified type \".concat(opts.type, \" yet negative (\").concat(value, \")\"));\n    }\n\n    // If unspecified, we make a best guess at the type based on the bit length\n    // of the value, treating 64 as a minimum and 256 as a maximum.\n    if (type === '') {\n      type = signed ? 'i' : 'u';\n      var bitlen = nearestBigIntSize(value);\n      switch (bitlen) {\n        case 64:\n        case 128:\n        case 256:\n          type += bitlen.toString();\n          break;\n        default:\n          throw RangeError(\"expected 64/128/256 bits for input (\".concat(value, \"), got \").concat(bitlen));\n      }\n    }\n    return _callSuper(this, ScInt, [type, value]);\n  }\n  _inherits(ScInt, _XdrLargeInt);\n  return _createClass(ScInt);\n}(_xdr_large_int.XdrLargeInt);\nfunction nearestBigIntSize(bigI) {\n  var _find;\n  // Note: Even though BigInt.toString(2) includes the negative sign for\n  // negative values (???), the following is still accurate, because the\n  // negative sign would be represented by a sign bit.\n  var bitlen = bigI.toString(2).length;\n  return (_find = [64, 128, 256].find(function (len) {\n    return bitlen <= len;\n  })) !== null && _find !== void 0 ? _find : bitlen;\n}"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 22886, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/numbers/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"Int128\", {\n  enumerable: true,\n  get: function get() {\n    return _int.Int128;\n  }\n});\nObject.defineProperty(exports, \"Int256\", {\n  enumerable: true,\n  get: function get() {\n    return _int2.Int256;\n  }\n});\nObject.defineProperty(exports, \"ScInt\", {\n  enumerable: true,\n  get: function get() {\n    return _sc_int.ScInt;\n  }\n});\nObject.defineProperty(exports, \"Uint128\", {\n  enumerable: true,\n  get: function get() {\n    return _uint.Uint128;\n  }\n});\nObject.defineProperty(exports, \"Uint256\", {\n  enumerable: true,\n  get: function get() {\n    return _uint2.Uint256;\n  }\n});\nObject.defineProperty(exports, \"XdrLargeInt\", {\n  enumerable: true,\n  get: function get() {\n    return _xdr_large_int.XdrLargeInt;\n  }\n});\nexports.scValToBigInt = scValToBigInt;\nvar _xdr_large_int = require(\"./xdr_large_int\");\nvar _uint = require(\"./uint128\");\nvar _uint2 = require(\"./uint256\");\nvar _int = require(\"./int128\");\nvar _int2 = require(\"./int256\");\nvar _sc_int = require(\"./sc_int\");\n/**\n * Transforms an opaque {@link xdr.ScVal} into a native bigint, if possible.\n *\n * If you then want to use this in the abstractions provided by this module,\n * you can pass it to the constructor of {@link XdrLargeInt}.\n *\n * @example\n * let scv = contract.call(\"add\", x, y); // assume it returns an xdr.ScVal\n * let bigi = scValToBigInt(scv);\n *\n * new ScInt(bigi);               // if you don't care about types, and\n * new XdrLargeInt('i128', bigi); // if you do\n *\n * @param {xdr.ScVal} scv - the raw XDR value to parse into an integer\n * @returns {bigint} the native value of this input value\n *\n * @throws {TypeError} if the `scv` input value doesn't represent an integer\n */\nfunction scValToBigInt(scv) {\n  var scIntType = _xdr_large_int.XdrLargeInt.getType(scv[\"switch\"]().name);\n  switch (scv[\"switch\"]().name) {\n    case 'scvU32':\n    case 'scvI32':\n      return BigInt(scv.value());\n    case 'scvU64':\n    case 'scvI64':\n      return new _xdr_large_int.XdrLargeInt(scIntType, scv.value()).toBigInt();\n    case 'scvU128':\n    case 'scvI128':\n      return new _xdr_large_int.XdrLargeInt(scIntType, [scv.value().lo(), scv.value().hi()]).toBigInt();\n    case 'scvU256':\n    case 'scvI256':\n      return new _xdr_large_int.XdrLargeInt(scIntType, [scv.value().loLo(), scv.value().loHi(), scv.value().hiLo(), scv.value().hiHi()]).toBigInt();\n    default:\n      throw TypeError(\"expected integer type, got \".concat(scv[\"switch\"]()));\n  }\n}"],"names":[],"mappings":"AAAA;AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,OAAO,cAAc,CAAC,SAAS,UAAU;IACvC,YAAY;IACZ,KAAK,SAAS;QACZ,OAAO,KAAK,MAAM;IACpB;AACF;AACA,OAAO,cAAc,CAAC,SAAS,UAAU;IACvC,YAAY;IACZ,KAAK,SAAS;QACZ,OAAO,MAAM,MAAM;IACrB;AACF;AACA,OAAO,cAAc,CAAC,SAAS,SAAS;IACtC,YAAY;IACZ,KAAK,SAAS;QACZ,OAAO,QAAQ,KAAK;IACtB;AACF;AACA,OAAO,cAAc,CAAC,SAAS,WAAW;IACxC,YAAY;IACZ,KAAK,SAAS;QACZ,OAAO,MAAM,OAAO;IACtB;AACF;AACA,OAAO,cAAc,CAAC,SAAS,WAAW;IACxC,YAAY;IACZ,KAAK,SAAS;QACZ,OAAO,OAAO,OAAO;IACvB;AACF;AACA,OAAO,cAAc,CAAC,SAAS,eAAe;IAC5C,YAAY;IACZ,KAAK,SAAS;QACZ,OAAO,eAAe,WAAW;IACnC;AACF;AACA,QAAQ,aAAa,GAAG;AACxB,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ;;;;;;;;;;;;;;;;;CAiBC,GACD,SAAS,cAAc,GAAG;IACxB,IAAI,YAAY,eAAe,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,IAAI;IACvE,OAAQ,GAAG,CAAC,SAAS,GAAG,IAAI;QAC1B,KAAK;QACL,KAAK;YACH,OAAO,OAAO,IAAI,KAAK;QACzB,KAAK;QACL,KAAK;YACH,OAAO,IAAI,eAAe,WAAW,CAAC,WAAW,IAAI,KAAK,IAAI,QAAQ;QACxE,KAAK;QACL,KAAK;YACH,OAAO,IAAI,eAAe,WAAW,CAAC,WAAW;gBAAC,IAAI,KAAK,GAAG,EAAE;gBAAI,IAAI,KAAK,GAAG,EAAE;aAAG,EAAE,QAAQ;QACjG,KAAK;QACL,KAAK;YACH,OAAO,IAAI,eAAe,WAAW,CAAC,WAAW;gBAAC,IAAI,KAAK,GAAG,IAAI;gBAAI,IAAI,KAAK,GAAG,IAAI;gBAAI,IAAI,KAAK,GAAG,IAAI;gBAAI,IAAI,KAAK,GAAG,IAAI;aAAG,EAAE,QAAQ;QAC7I;YACE,MAAM,UAAU,8BAA8B,MAAM,CAAC,GAAG,CAAC,SAAS;IACtE;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 22982, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/scval.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nativeToScVal = nativeToScVal;\nexports.scValToNative = scValToNative;\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nvar _keypair = require(\"./keypair\");\nvar _address = require(\"./address\");\nvar _contract = require(\"./contract\");\nvar _index = require(\"./numbers/index\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/**\n * Attempts to convert native types into smart contract values\n * ({@link xdr.ScVal}).\n *\n * Provides conversions from smart contract XDR values ({@link xdr.ScVal}) to\n * native JavaScript types.\n *\n * The conversions are as follows:\n *\n *  - xdr.ScVal -> passthrough\n *  - null/undefined -> scvVoid\n *  - string -> scvString (a copy is made)\n *  - UintArray8 -> scvBytes (a copy is made)\n *  - boolean -> scvBool\n *\n *  - number/bigint -> the smallest possible XDR integer type that will fit the\n *    input value (if you want a specific type, use {@link ScInt})\n *\n *  - {@link Address} or {@link Contract} -> scvAddress (for contracts and\n *    public keys)\n *\n *  - Array<T> -> scvVec after attempting to convert each item of type `T` to an\n *    xdr.ScVal (recursively). note that all values must be the same type!\n *\n *  - object -> scvMap after attempting to convert each key and value to an\n *    xdr.ScVal (recursively). note that there is no restriction on types\n *    matching anywhere (unlike arrays)\n *\n * When passing an integer-like native value, you can also optionally specify a\n * type which will force a particular interpretation of that value.\n *\n * Note that not all type specifications are compatible with all `ScVal`s, e.g.\n * `toScVal(\"a string\", {type: \"i256\"})` will throw.\n *\n * @param {any} val -       a native (or convertible) input value to wrap\n * @param {object} [opts] - an optional set of hints around the type of\n *    conversion you'd like to see\n * @param {string} [opts.type] - there is different behavior for different input\n *    types for `val`:\n *\n *     - when `val` is an integer-like type (i.e. number|bigint), this will be\n *       forwarded to {@link ScInt} or forced to be u32/i32.\n *\n *     - when `val` is an array type, this is forwarded to the recursion\n *\n *     - when `val` is an object type (key-value entries), this should be an\n *       object in which each key has a pair of types (to represent forced types\n *       for the key and the value), where `null` (or a missing entry) indicates\n *       the default interpretation(s) (refer to the examples, below)\n *\n *     - when `val` is a string type, this can be 'string' or 'symbol' to force\n *       a particular interpretation of `val`.\n *\n *     - when `val` is a bytes-like type, this can be 'string', 'symbol', or\n *       'bytes' to force a particular interpretation\n *\n *    As a simple example, `nativeToScVal(\"hello\", {type: 'symbol'})` will\n *    return an `scvSymbol`, whereas without the type it would have been an\n *    `scvString`.\n *\n * @returns {xdr.ScVal} a wrapped, smart, XDR version of the input value\n * @throws {TypeError} if...\n *  - there are arrays with more than one type in them\n *  - there are values that do not have a sensible conversion (e.g. random XDR\n *    types, custom classes)\n *  - the type of the input object (or some inner value of said object) cannot\n *    be determined (via `typeof`)\n *  - the type you specified (via `opts.type`) is incompatible with the value\n *    you passed in (`val`), e.g. `nativeToScVal(\"a string\", { type: 'i128' })`,\n *    though this does not apply for types that ignore `opts` (e.g. addresses).\n * @see scValToNative\n *\n * @example\n * nativeToScVal(1000);                   // gives ScValType === scvU64\n * nativeToScVal(1000n);                  // gives ScValType === scvU64\n * nativeToScVal(1n << 100n);             // gives ScValType === scvU128\n * nativeToScVal(1000, { type: 'u32' });  // gives ScValType === scvU32\n * nativeToScVal(1000, { type: 'i125' }); // gives ScValType === scvI256\n * nativeToScVal(\"a string\");                     // gives ScValType === scvString\n * nativeToScVal(\"a string\", { type: 'symbol' }); // gives scvSymbol\n * nativeToScVal(new Uint8Array(5));                      // scvBytes\n * nativeToScVal(new Uint8Array(5), { type: 'symbol' });  // scvSymbol\n * nativeToScVal(null); // scvVoid\n * nativeToScVal(true); // scvBool\n * nativeToScVal([1, 2, 3]);                    // gives scvVec with each element as scvU64\n * nativeToScVal([1, 2, 3], { type: 'i128' });  // scvVec<scvI128>\n * nativeToScVal({ 'hello': 1, 'world': [ true, false ] }, {\n *   type: {\n *     'hello': [ 'symbol', 'i128' ],\n *   }\n * })\n * // gives scvMap with entries: [\n * //     [ scvSymbol, scvI128 ],\n * //     [ scvString, scvArray<scvBool> ]\n * // ]\n *\n * @example\n * import {\n *   nativeToScVal,\n *   scValToNative,\n *   ScInt,\n *   xdr\n * } from '@stellar/stellar-base';\n *\n * let gigaMap = {\n *   bool: true,\n *   void: null,\n *   u32: xdr.ScVal.scvU32(1),\n *   i32: xdr.ScVal.scvI32(1),\n *   u64: 1n,\n *   i64: -1n,\n *   u128: new ScInt(1).toU128(),\n *   i128: new ScInt(1).toI128(),\n *   u256: new ScInt(1).toU256(),\n *   i256: new ScInt(1).toI256(),\n *   map: {\n *     arbitrary: 1n,\n *     nested: 'values',\n *     etc: false\n *   },\n *   vec: ['same', 'type', 'list'],\n * };\n *\n * // then, simply:\n * let scv = nativeToScVal(gigaMap);    // scv.switch() == xdr.ScValType.scvMap()\n *\n * // then...\n * someContract.call(\"method\", scv);\n *\n * // Similarly, the inverse should work:\n * scValToNative(scv) == gigaMap;       // true\n */\nfunction nativeToScVal(val) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  switch (_typeof(val)) {\n    case 'object':\n      {\n        var _val$constructor$name, _val$constructor;\n        if (val === null) {\n          return _xdr[\"default\"].ScVal.scvVoid();\n        }\n        if (val instanceof _xdr[\"default\"].ScVal) {\n          return val; // should we copy?\n        }\n        if (val instanceof _address.Address) {\n          return val.toScVal();\n        }\n        if (val instanceof _keypair.Keypair) {\n          return nativeToScVal(val.publicKey(), {\n            type: 'address'\n          });\n        }\n        if (val instanceof _contract.Contract) {\n          return val.address().toScVal();\n        }\n        if (val instanceof Uint8Array || Buffer.isBuffer(val)) {\n          var _opts$type;\n          var copy = Uint8Array.from(val);\n          switch ((_opts$type = opts === null || opts === void 0 ? void 0 : opts.type) !== null && _opts$type !== void 0 ? _opts$type : 'bytes') {\n            case 'bytes':\n              return _xdr[\"default\"].ScVal.scvBytes(copy);\n            case 'symbol':\n              return _xdr[\"default\"].ScVal.scvSymbol(copy);\n            case 'string':\n              return _xdr[\"default\"].ScVal.scvString(copy);\n            default:\n              throw new TypeError(\"invalid type (\".concat(opts.type, \") specified for bytes-like value\"));\n          }\n        }\n        if (Array.isArray(val)) {\n          return _xdr[\"default\"].ScVal.scvVec(val.map(function (v) {\n            return nativeToScVal(v, opts);\n          }));\n        }\n        if (((_val$constructor$name = (_val$constructor = val.constructor) === null || _val$constructor === void 0 ? void 0 : _val$constructor.name) !== null && _val$constructor$name !== void 0 ? _val$constructor$name : '') !== 'Object') {\n          var _val$constructor2;\n          throw new TypeError(\"cannot interpret \".concat((_val$constructor2 = val.constructor) === null || _val$constructor2 === void 0 ? void 0 : _val$constructor2.name, \" value as ScVal (\").concat(JSON.stringify(val), \")\"));\n        }\n        return _xdr[\"default\"].ScVal.scvMap(Object.entries(val)\n        // The Soroban runtime expects maps to have their keys in sorted\n        // order, so let's do that here as part of the conversion to prevent\n        // confusing error messages on execution.\n        .sort(function (_ref, _ref2) {\n          var _ref3 = _slicedToArray(_ref, 1),\n            key1 = _ref3[0];\n          var _ref4 = _slicedToArray(_ref2, 1),\n            key2 = _ref4[0];\n          return key1.localeCompare(key2);\n        }).map(function (_ref5) {\n          var _k, _opts$type2;\n          var _ref6 = _slicedToArray(_ref5, 2),\n            k = _ref6[0],\n            v = _ref6[1];\n          // the type can be specified with an entry for the key and the value,\n          // e.g. val = { 'hello': 1 } and opts.type = { hello: [ 'symbol',\n          // 'u128' ]} or you can use `null` for the default interpretation\n          var _ref7 = (_k = ((_opts$type2 = opts === null || opts === void 0 ? void 0 : opts.type) !== null && _opts$type2 !== void 0 ? _opts$type2 : {})[k]) !== null && _k !== void 0 ? _k : [null, null],\n            _ref8 = _slicedToArray(_ref7, 2),\n            keyType = _ref8[0],\n            valType = _ref8[1];\n          var keyOpts = keyType ? {\n            type: keyType\n          } : {};\n          var valOpts = valType ? {\n            type: valType\n          } : {};\n          return new _xdr[\"default\"].ScMapEntry({\n            key: nativeToScVal(k, keyOpts),\n            val: nativeToScVal(v, valOpts)\n          });\n        }));\n      }\n    case 'number':\n    case 'bigint':\n      switch (opts === null || opts === void 0 ? void 0 : opts.type) {\n        case 'u32':\n          return _xdr[\"default\"].ScVal.scvU32(val);\n        case 'i32':\n          return _xdr[\"default\"].ScVal.scvI32(val);\n        default:\n          break;\n      }\n      return new _index.ScInt(val, {\n        type: opts === null || opts === void 0 ? void 0 : opts.type\n      }).toScVal();\n    case 'string':\n      {\n        var _opts$type3;\n        var optType = (_opts$type3 = opts === null || opts === void 0 ? void 0 : opts.type) !== null && _opts$type3 !== void 0 ? _opts$type3 : 'string';\n        switch (optType) {\n          case 'string':\n            return _xdr[\"default\"].ScVal.scvString(val);\n          case 'symbol':\n            return _xdr[\"default\"].ScVal.scvSymbol(val);\n          case 'address':\n            return new _address.Address(val).toScVal();\n          case 'u32':\n            return _xdr[\"default\"].ScVal.scvU32(parseInt(val, 10));\n          case 'i32':\n            return _xdr[\"default\"].ScVal.scvI32(parseInt(val, 10));\n          default:\n            if (_index.XdrLargeInt.isType(optType)) {\n              return new _index.XdrLargeInt(optType, val).toScVal();\n            }\n            throw new TypeError(\"invalid type (\".concat(opts.type, \") specified for string value\"));\n        }\n      }\n    case 'boolean':\n      return _xdr[\"default\"].ScVal.scvBool(val);\n    case 'undefined':\n      return _xdr[\"default\"].ScVal.scvVoid();\n    case 'function':\n      // FIXME: Is this too helpful?\n      return nativeToScVal(val());\n    default:\n      throw new TypeError(\"failed to convert typeof \".concat(_typeof(val), \" (\").concat(val, \")\"));\n  }\n}\n\n/**\n * Given a smart contract value, attempt to convert it to a native type.\n * Possible conversions include:\n *\n *  - void -> `null`\n *  - u32, i32 -> `number`\n *  - u64, i64, u128, i128, u256, i256 -> `bigint`\n *  - vec -> `Array` of any of the above (via recursion)\n *  - map -> key-value object of any of the above (via recursion)\n *  - bool -> `boolean`\n *  - bytes -> `Uint8Array`\n *  - symbol -> `string`\n *  - string -> `string` IF the underlying buffer can be decoded as ascii/utf8,\n *              `Uint8Array` of the raw contents in any error case\n *\n * If no viable conversion can be determined, this just \"unwraps\" the smart\n * value to return its underlying XDR value.\n *\n * @param {xdr.ScVal} scv - the input smart contract value\n *\n * @returns {any}\n * @see nativeToScVal\n */\nfunction scValToNative(scv) {\n  var _scv$vec, _scv$map;\n  // we use the verbose xdr.ScValType.<type>.value form here because it's faster\n  // than string comparisons and the underlying constants never need to be\n  // updated\n  switch (scv[\"switch\"]().value) {\n    case _xdr[\"default\"].ScValType.scvVoid().value:\n      return null;\n\n    // these can be converted to bigints directly\n    case _xdr[\"default\"].ScValType.scvU64().value:\n    case _xdr[\"default\"].ScValType.scvI64().value:\n      return scv.value().toBigInt();\n\n    // these can be parsed by internal abstractions note that this can also\n    // handle the above two cases, but it's not as efficient (another\n    // type-check, parsing, etc.)\n    case _xdr[\"default\"].ScValType.scvU128().value:\n    case _xdr[\"default\"].ScValType.scvI128().value:\n    case _xdr[\"default\"].ScValType.scvU256().value:\n    case _xdr[\"default\"].ScValType.scvI256().value:\n      return (0, _index.scValToBigInt)(scv);\n    case _xdr[\"default\"].ScValType.scvVec().value:\n      return ((_scv$vec = scv.vec()) !== null && _scv$vec !== void 0 ? _scv$vec : []).map(scValToNative);\n    case _xdr[\"default\"].ScValType.scvAddress().value:\n      return _address.Address.fromScVal(scv).toString();\n    case _xdr[\"default\"].ScValType.scvMap().value:\n      return Object.fromEntries(((_scv$map = scv.map()) !== null && _scv$map !== void 0 ? _scv$map : []).map(function (entry) {\n        return [scValToNative(entry.key()), scValToNative(entry.val())];\n      }));\n\n    // these return the primitive type directly\n    case _xdr[\"default\"].ScValType.scvBool().value:\n    case _xdr[\"default\"].ScValType.scvU32().value:\n    case _xdr[\"default\"].ScValType.scvI32().value:\n    case _xdr[\"default\"].ScValType.scvBytes().value:\n      return scv.value();\n\n    // Symbols are limited to [a-zA-Z0-9_]+, so we can safely make ascii strings\n    //\n    // Strings, however, are \"presented\" as strings and we treat them as such\n    // (in other words, string = bytes with a hint that it's text). If the user\n    // encoded non-printable bytes in their string value, that's on them.\n    //\n    // Note that we assume a utf8 encoding (ascii-compatible). For other\n    // encodings, you should probably use bytes anyway. If it cannot be decoded,\n    // the raw bytes are returned.\n    case _xdr[\"default\"].ScValType.scvSymbol().value:\n    case _xdr[\"default\"].ScValType.scvString().value:\n      {\n        var v = scv.value(); // string|Buffer\n        if (Buffer.isBuffer(v) || ArrayBuffer.isView(v)) {\n          try {\n            return new TextDecoder().decode(v);\n          } catch (e) {\n            return new Uint8Array(v.buffer); // copy of bytes\n          }\n        }\n        return v; // string already\n      }\n\n    // these can be converted to bigint\n    case _xdr[\"default\"].ScValType.scvTimepoint().value:\n    case _xdr[\"default\"].ScValType.scvDuration().value:\n      return new _xdr[\"default\"].Uint64(scv.value()).toBigInt();\n    case _xdr[\"default\"].ScValType.scvError().value:\n      switch (scv.error()[\"switch\"]().value) {\n        // Distinguish errors from the user contract.\n        case _xdr[\"default\"].ScErrorType.sceContract().value:\n          return {\n            type: 'contract',\n            code: scv.error().contractCode()\n          };\n        default:\n          {\n            var err = scv.error();\n            return {\n              type: 'system',\n              code: err.code().value,\n              value: err.code().name\n            };\n          }\n      }\n\n    // in the fallthrough case, just return the underlying value directly\n    default:\n      return scv.value();\n  }\n}\n\n/// Inject a sortable map builder into the xdr module.\n_xdr[\"default\"].scvSortedMap = function (items) {\n  var sorted = Array.from(items).sort(function (a, b) {\n    // Both a and b are `ScMapEntry`s, so we need to sort by underlying key.\n    //\n    // We couldn't possibly handle every combination of keys since Soroban\n    // maps don't enforce consistent types, so we do a best-effort and try\n    // sorting by \"number-like\" or \"string-like.\"\n    var nativeA = scValToNative(a.key());\n    var nativeB = scValToNative(b.key());\n    switch (_typeof(nativeA)) {\n      case 'number':\n      case 'bigint':\n        return nativeA < nativeB ? -1 : 1;\n      default:\n        return nativeA.toString().localeCompare(nativeB.toString());\n    }\n  });\n  return _xdr[\"default\"].ScVal.scvMap(sorted);\n};"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 23433, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/events.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.humanizeEvents = humanizeEvents;\nvar _strkey = require(\"./strkey\");\nvar _scval = require(\"./scval\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * Converts raw diagnostic or contract events into something with a flatter,\n * human-readable, and understandable structure.\n *\n * @param {xdr.DiagnosticEvent[] | xdr.ContractEvent[]} events  either contract\n *    events or diagnostic events to parse into a friendly format\n *\n * @returns {SorobanEvent[]}  a list of human-readable event structures, where\n *    each element has the following properties:\n *  - type: a string of one of 'system', 'contract', 'diagnostic\n *  - contractId?: optionally, a `C...` encoded strkey\n *  - topics: a list of {@link scValToNative} invocations on the topics\n *  - data: similarly, a {@link scValToNative} invocation on the raw event data\n */\nfunction humanizeEvents(events) {\n  return events.map(function (e) {\n    // A pseudo-instanceof check for xdr.DiagnosticEvent more reliable\n    // in mixed SDK environments:\n    if (e.inSuccessfulContractCall) {\n      return extractEvent(e.event());\n    }\n    return extractEvent(e);\n  });\n}\nfunction extractEvent(event) {\n  return _objectSpread(_objectSpread({}, typeof event.contractId === 'function' && event.contractId() != null && {\n    contractId: _strkey.StrKey.encodeContract(event.contractId())\n  }), {}, {\n    type: event.type().name,\n    topics: event.body().value().topics().map(function (t) {\n      return (0, _scval.scValToNative)(t);\n    }),\n    data: (0, _scval.scValToNative)(event.body().value().data())\n  });\n}"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 23530, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/auth.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.authorizeEntry = authorizeEntry;\nexports.authorizeInvocation = authorizeInvocation;\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nvar _keypair = require(\"./keypair\");\nvar _strkey = require(\"./strkey\");\nvar _network = require(\"./network\");\nvar _hashing = require(\"./hashing\");\nvar _address = require(\"./address\");\nvar _scval = require(\"./scval\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n/**\n * @async\n * @callback SigningCallback A callback for signing an XDR structure\n * representing all of the details necessary to authorize an invocation tree.\n *\n * @param {xdr.HashIdPreimage} preimage   the entire authorization envelope\n *    whose hash you should sign, so that you can inspect the entire structure\n *    if necessary (rather than blindly signing a hash)\n *\n * @returns {\n *    Promise<Uint8Array> |\n *    Promise<{signature: Uint8Array, publicKey: string}\n * }  the signature of the raw payload (which is the sha256 hash of the preimage\n *    bytes, so `hash(preimage.toXDR())`) either naked, implying it is signed\n *    by the key corresponding to the public key in the entry you pass to\n *    {@link authorizeEntry} (decipherable from its\n *    `credentials().address().address()`), or alongside an explicit `publicKey`.\n */\n/**\n * Actually authorizes an existing authorization entry using the given the\n * credentials and expiration details, returning a signed copy.\n *\n * This \"fills out\" the authorization entry with a signature, indicating to the\n * {@link Operation.invokeHostFunction} its attached to that:\n *   - a particular identity (i.e. signing {@link Keypair} or other signer)\n *   - approving the execution of an invocation tree (i.e. a simulation-acquired\n *     {@link xdr.SorobanAuthorizedInvocation} or otherwise built)\n *   - on a particular network (uniquely identified by its passphrase, see\n *     {@link Networks})\n *   - until a particular ledger sequence is reached.\n *\n * This one lets you pass a either a {@link Keypair} (or, more accurately,\n * anything with a `sign(Buffer): Buffer` method) or a callback function (see\n * {@link SigningCallback}) to handle signing the envelope hash.\n *\n * @param {xdr.SorobanAuthorizationEntry} entry   an unsigned authorization entr\n * @param {Keypair | SigningCallback} signer  either a {@link Keypair} instance\n *    or a function which takes a {@link xdr.HashIdPreimageSorobanAuthorization}\n *    input payload and returns EITHER\n *\n *      (a) an object containing a `signature` of the hash of the raw payload bytes\n *          as a Buffer-like and a `publicKey` string representing who just\n *          created this signature, or\n *      (b) just the naked signature of the hash of the raw payload bytes (where\n *          the signing key is implied to be the address in the `entry`).\n *\n *    The latter option (b) is JUST for backwards compatibility and will be\n *    removed in the future.\n * @param {number} validUntilLedgerSeq   the (exclusive) future ledger sequence\n *    number until which this authorization entry should be valid (if\n *    `currentLedgerSeq==validUntil`, this is expired))\n * @param {string} [networkPassphrase]  the network passphrase is incorprated\n *    into the signature (see {@link Networks} for options)\n *\n * @returns {Promise<xdr.SorobanAuthorizationEntry>} a promise for an\n *    authorization entry that you can pass along to\n *    {@link Operation.invokeHostFunction}\n *\n * @note If using the `SigningCallback` variation, the signer is assumed to be\n *    the entry's credential address unless you use the variant that returns\n *    the object.\n *\n * @see authorizeInvocation\n * @example\n * import {\n *   SorobanRpc,\n *   Transaction,\n *   Networks,\n *   authorizeEntry\n * } from '@stellar/stellar-sdk';\n *\n * // Assume signPayloadCallback is a well-formed signing callback.\n * //\n * // It might, for example, pop up a modal from a browser extension, send the\n * // transaction to a third-party service for signing, or just do simple\n * // signing via Keypair like it does here:\n * function signPayloadCallback(payload) {\n *    return signer.sign(hash(payload.toXDR());\n * }\n *\n * function multiPartyAuth(\n *    server: SorobanRpc.Server,\n *    // assume this involves multi-party auth\n *    tx: Transaction,\n * ) {\n *    return server\n *      .simulateTransaction(tx)\n *      .then((simResult) => {\n *          tx.operations[0].auth.map(entry =>\n *            authorizeEntry(\n *              entry,\n *              signPayloadCallback,\n *              currentLedger + 1000,\n *              Networks.TESTNET);\n *          ));\n *\n *          return server.prepareTransaction(tx, simResult);\n *      })\n *      .then((preppedTx) => {\n *        preppedTx.sign(source);\n *        return server.sendTransaction(preppedTx);\n *      });\n * }\n */\nfunction authorizeEntry(_x, _x2, _x3) {\n  return _authorizeEntry.apply(this, arguments);\n}\n/**\n * This builds an entry from scratch, allowing you to express authorization as a\n * function of:\n *   - a particular identity (i.e. signing {@link Keypair} or other signer)\n *   - approving the execution of an invocation tree (i.e. a simulation-acquired\n *     {@link xdr.SorobanAuthorizedInvocation} or otherwise built)\n *   - on a particular network (uniquely identified by its passphrase, see\n *     {@link Networks})\n *   - until a particular ledger sequence is reached.\n *\n * This is in contrast to {@link authorizeEntry}, which signs an existing entry.\n *\n * @param {Keypair | SigningCallback} signer  either a {@link Keypair} instance\n *    (or anything with a `.sign(buf): Buffer-like` method) or a function which\n *    takes a payload (a {@link xdr.HashIdPreimageSorobanAuthorization}\n *    instance) input and returns the signature of the hash of the raw payload\n *    bytes (where the signing key should correspond to the address in the\n *    `entry`)\n * @param {number}  validUntilLedgerSeq  the (exclusive) future ledger sequence\n *    number until which this authorization entry should be valid (if\n *    `currentLedgerSeq==validUntilLedgerSeq`, this is expired))\n * @param {xdr.SorobanAuthorizedInvocation} invocation the invocation tree that\n *    we're authorizing (likely, this comes from transaction simulation)\n * @param {string}  [publicKey]   the public identity of the signer (when\n *    providing a {@link Keypair} to `signer`, this can be omitted, as it just\n *    uses {@link Keypair.publicKey})\n * @param {string}  [networkPassphrase]   the network passphrase is incorprated\n *    into the signature (see {@link Networks} for options, default:\n *    {@link Networks.FUTURENET})\n *\n * @returns {Promise<xdr.SorobanAuthorizationEntry>} a promise for an\n *    authorization entry that you can pass along to\n *    {@link Operation.invokeHostFunction}\n *\n * @see authorizeEntry\n */\nfunction _authorizeEntry() {\n  _authorizeEntry = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(entry, signer, validUntilLedgerSeq) {\n    var networkPassphrase,\n      clone,\n      addrAuth,\n      networkId,\n      preimage,\n      payload,\n      signature,\n      publicKey,\n      sigResult,\n      sigScVal,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          networkPassphrase = _args.length > 3 && _args[3] !== undefined ? _args[3] : _network.Networks.FUTURENET;\n          if (!(entry.credentials()[\"switch\"]().value !== _xdr[\"default\"].SorobanCredentialsType.sorobanCredentialsAddress().value)) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt(\"return\", entry);\n        case 3:\n          clone = _xdr[\"default\"].SorobanAuthorizationEntry.fromXDR(entry.toXDR());\n          /** @type {xdr.SorobanAddressCredentials} */\n          addrAuth = clone.credentials().address();\n          addrAuth.signatureExpirationLedger(validUntilLedgerSeq);\n          networkId = (0, _hashing.hash)(Buffer.from(networkPassphrase));\n          preimage = _xdr[\"default\"].HashIdPreimage.envelopeTypeSorobanAuthorization(new _xdr[\"default\"].HashIdPreimageSorobanAuthorization({\n            networkId: networkId,\n            nonce: addrAuth.nonce(),\n            invocation: clone.rootInvocation(),\n            signatureExpirationLedger: addrAuth.signatureExpirationLedger()\n          }));\n          payload = (0, _hashing.hash)(preimage.toXDR());\n          if (!(typeof signer === 'function')) {\n            _context.next = 16;\n            break;\n          }\n          _context.next = 12;\n          return signer(preimage);\n        case 12:\n          sigResult = _context.sent;\n          if (sigResult !== null && sigResult !== void 0 && sigResult.signature) {\n            signature = Buffer.from(sigResult.signature);\n            publicKey = sigResult.publicKey;\n          } else {\n            // if using the deprecated form, assume it's for the entry\n            signature = Buffer.from(sigResult);\n            publicKey = _address.Address.fromScAddress(addrAuth.address()).toString();\n          }\n          _context.next = 18;\n          break;\n        case 16:\n          signature = Buffer.from(signer.sign(payload));\n          publicKey = signer.publicKey();\n        case 18:\n          if (_keypair.Keypair.fromPublicKey(publicKey).verify(payload, signature)) {\n            _context.next = 20;\n            break;\n          }\n          throw new Error(\"signature doesn't match payload\");\n        case 20:\n          // This structure is defined here:\n          // https://soroban.stellar.org/docs/fundamentals-and-concepts/invoking-contracts-with-transactions#stellar-account-signatures\n          //\n          // Encoding a contract structure as an ScVal means the map keys are supposed\n          // to be symbols, hence the forced typing here.\n          sigScVal = (0, _scval.nativeToScVal)({\n            public_key: _strkey.StrKey.decodeEd25519PublicKey(publicKey),\n            signature: signature\n          }, {\n            type: {\n              public_key: ['symbol', null],\n              signature: ['symbol', null]\n            }\n          });\n          addrAuth.signature(_xdr[\"default\"].ScVal.scvVec([sigScVal]));\n          return _context.abrupt(\"return\", clone);\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _authorizeEntry.apply(this, arguments);\n}\nfunction authorizeInvocation(signer, validUntilLedgerSeq, invocation) {\n  var publicKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  var networkPassphrase = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _network.Networks.FUTURENET;\n  // We use keypairs as a source of randomness for the nonce to avoid mucking\n  // with any crypto dependencies. Note that this just has to be random and\n  // unique, not cryptographically secure, so it's fine.\n  var kp = _keypair.Keypair.random().rawPublicKey();\n  var nonce = new _xdr[\"default\"].Int64(bytesToInt64(kp));\n  var pk = publicKey || signer.publicKey();\n  if (!pk) {\n    throw new Error(\"authorizeInvocation requires publicKey parameter\");\n  }\n  var entry = new _xdr[\"default\"].SorobanAuthorizationEntry({\n    rootInvocation: invocation,\n    credentials: _xdr[\"default\"].SorobanCredentials.sorobanCredentialsAddress(new _xdr[\"default\"].SorobanAddressCredentials({\n      address: new _address.Address(pk).toScAddress(),\n      nonce: nonce,\n      signatureExpirationLedger: 0,\n      // replaced\n      signature: _xdr[\"default\"].ScVal.scvVec([]) // replaced\n    }))\n  });\n  return authorizeEntry(entry, signer, validUntilLedgerSeq, networkPassphrase);\n}\nfunction bytesToInt64(bytes) {\n  // eslint-disable-next-line no-bitwise\n  return bytes.subarray(0, 8).reduce(function (accum, b) {\n    return accum << 8 | b;\n  }, 0);\n}"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 24126, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/invocation.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildInvocationTree = buildInvocationTree;\nexports.walkInvocationTree = walkInvocationTree;\nvar _asset = require(\"./asset\");\nvar _address = require(\"./address\");\nvar _scval = require(\"./scval\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * @typedef CreateInvocation\n *\n * @prop {'wasm'|'sac'} type  a type indicating if this creation was a custom\n *    contract or a wrapping of an existing Stellar asset\n * @prop {string} [token] when `type=='sac'`, the canonical {@link Asset} that\n *    is being wrapped by this Stellar Asset Contract\n * @prop {object} [wasm]  when `type=='wasm'`, add'l creation parameters\n *\n * @prop {string} wasm.hash     hex hash of WASM bytecode backing this contract\n * @prop {string} wasm.address  contract address of this deployment\n * @prop {string} wasm.salt     hex salt that the user consumed when creating\n *    this contract (encoded in the resulting address)\n * @prop {any[]}  [wasm.constructorArgs] a list of natively-represented values\n *    (see {@link scValToNative}) that are passed to the constructor when\n *    creating this contract\n */\n\n/**\n * @typedef ExecuteInvocation\n *\n * @prop {string} source    the strkey of the contract (C...) being invoked\n * @prop {string} function  the name of the function being invoked\n * @prop {any[]}  args      the natively-represented parameters to the function\n *    invocation (see {@link scValToNative} for rules on how they're\n *    represented a JS types)\n */\n\n/**\n * @typedef InvocationTree\n * @prop {'execute' | 'create'} type  the type of invocation occurring, either\n *    contract creation or host function execution\n * @prop {CreateInvocation | ExecuteInvocation} args  the parameters to the\n *    invocation, depending on the type\n * @prop {InvocationTree[]} invocations   any sub-invocations that (may) occur\n *    as a result of this invocation (i.e. a tree of call stacks)\n */\n\n/**\n * Turns a raw invocation tree into a human-readable format.\n *\n * This is designed to make the invocation tree easier to understand in order to\n * inform users about the side-effects of their contract calls. This will help\n * make informed decisions about whether or not a particular invocation will\n * result in what you expect it to.\n *\n * @param {xdr.SorobanAuthorizedInvocation} root  the raw XDR of the invocation,\n *    likely acquired from transaction simulation. this is either from the\n *    {@link Operation.invokeHostFunction} itself (the `func` field), or from\n *    the authorization entries ({@link xdr.SorobanAuthorizationEntry}, the\n *    `rootInvocation` field)\n *\n * @returns {InvocationTree}  a human-readable version of the invocation tree\n *\n * @example\n * Here, we show a browser modal after simulating an arbitrary transaction,\n * `tx`, which we assume has an `Operation.invokeHostFunction` inside of it:\n *\n * ```typescript\n * import { Server, buildInvocationTree } from '@stellar/stellar-sdk';\n *\n * const s = new Server(\"fill in accordingly\");\n *\n * s.simulateTransaction(tx).then(\n *  (resp: SorobanRpc.SimulateTransactionResponse) => {\n *    if (SorobanRpc.isSuccessfulSim(resp) && ) {\n *      // bold assumption: there's a valid result with an auth entry\n *      alert(\n *        \"You are authorizing the following invocation:\\n\" +\n *        JSON.stringify(\n *          buildInvocationTree(resp.result!.auth[0].rootInvocation()),\n *          null,\n *          2\n *        )\n *      );\n *    }\n *  }\n * );\n * ```\n */\nfunction buildInvocationTree(root) {\n  var fn = root[\"function\"]();\n\n  /** @type {InvocationTree} */\n  var output = {};\n\n  /** @type {xdr.CreateContractArgs|xdr.CreateContractArgsV2|xdr.InvokeContractArgs} */\n  var inner = fn.value();\n  switch (fn[\"switch\"]().value) {\n    // sorobanAuthorizedFunctionTypeContractFn\n    case 0:\n      output.type = 'execute';\n      output.args = {\n        source: _address.Address.fromScAddress(inner.contractAddress()).toString(),\n        \"function\": inner.functionName(),\n        args: inner.args().map(function (arg) {\n          return (0, _scval.scValToNative)(arg);\n        })\n      };\n      break;\n\n    // sorobanAuthorizedFunctionTypeCreateContractHostFn\n    // sorobanAuthorizedFunctionTypeCreateContractV2HostFn\n    case 1: // fallthrough: just no ctor args in V1\n    case 2:\n      {\n        var createV2 = fn[\"switch\"]().value === 2;\n        output.type = 'create';\n        output.args = {};\n\n        // If the executable is a WASM, the preimage MUST be an address. If it's a\n        // token, the preimage MUST be an asset. This is a cheeky way to check\n        // that, because wasm=0, token=1 and address=0, asset=1 in the XDR switch\n        // values.\n        //\n        // The first part may not be true in V2, but we'd need to update this code\n        // anyway so it can still be an error.\n        var _ref = [inner.executable(), inner.contractIdPreimage()],\n          exec = _ref[0],\n          preimage = _ref[1];\n        if (!!exec[\"switch\"]().value !== !!preimage[\"switch\"]().value) {\n          throw new Error(\"creation function appears invalid: \".concat(JSON.stringify(inner), \" (should be wasm+address or token+asset)\"));\n        }\n        switch (exec[\"switch\"]().value) {\n          // contractExecutableWasm\n          case 0:\n            {\n              /** @type {xdr.ContractIdPreimageFromAddress} */\n              var details = preimage.fromAddress();\n              output.args.type = 'wasm';\n              output.args.wasm = _objectSpread({\n                salt: details.salt().toString('hex'),\n                hash: exec.wasmHash().toString('hex'),\n                address: _address.Address.fromScAddress(details.address()).toString()\n              }, createV2 && {\n                constructorArgs: inner.constructorArgs().map(function (arg) {\n                  return (0, _scval.scValToNative)(arg);\n                })\n              });\n              break;\n            }\n\n          // contractExecutableStellarAsset\n          case 1:\n            output.args.type = 'sac';\n            output.args.asset = _asset.Asset.fromOperation(preimage.fromAsset()).toString();\n            break;\n          default:\n            throw new Error(\"unknown creation type: \".concat(JSON.stringify(exec)));\n        }\n        break;\n      }\n    default:\n      throw new Error(\"unknown invocation type (\".concat(fn[\"switch\"](), \"): \").concat(JSON.stringify(fn)));\n  }\n  output.invocations = root.subInvocations().map(function (i) {\n    return buildInvocationTree(i);\n  });\n  return output;\n}\n\n/**\n * @callback InvocationWalker\n *\n * @param {xdr.SorobanAuthorizedInvocation} node  the currently explored node\n * @param {number} depth  the depth of the tree this node is occurring at (the\n *    root starts at a depth of 1)\n * @param {xdr.SorobanAuthorizedInvocation} [parent]  this `node`s parent node,\n *    if any (i.e. this doesn't exist at the root)\n *\n * @returns {boolean|null|void}   returning exactly `false` is a hint to stop\n *    exploring, other values are ignored\n */\n\n/**\n * Executes a callback function on each node in the tree until stopped.\n *\n * Nodes are walked in a depth-first order. Returning `false` from the callback\n * stops further depth exploration at that node, but it does not stop the walk\n * in a \"global\" view.\n *\n * @param {xdr.SorobanAuthorizedInvocation} root  the tree to explore\n * @param {InvocationWalker} callback  the callback to execute for each node\n * @returns {void}\n */\nfunction walkInvocationTree(root, callback) {\n  walkHelper(root, 1, callback);\n}\nfunction walkHelper(node, depth, callback, parent) {\n  if (callback(node, depth, parent) === false /* allow void rv */) {\n    return;\n  }\n  node.subInvocations().forEach(function (i) {\n    return walkHelper(i, depth + 1, callback, node);\n  });\n}"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 24369, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/stellar-base/lib/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {\n  xdr: true,\n  cereal: true,\n  hash: true,\n  sign: true,\n  verify: true,\n  FastSigning: true,\n  getLiquidityPoolId: true,\n  LiquidityPoolFeeV18: true,\n  Keypair: true,\n  UnsignedHyper: true,\n  Hyper: true,\n  TransactionBase: true,\n  Transaction: true,\n  FeeBumpTransaction: true,\n  TransactionBuilder: true,\n  TimeoutInfinite: true,\n  BASE_FEE: true,\n  Asset: true,\n  LiquidityPoolAsset: true,\n  LiquidityPoolId: true,\n  Operation: true,\n  AuthRequiredFlag: true,\n  AuthRevocableFlag: true,\n  AuthImmutableFlag: true,\n  AuthClawbackEnabledFlag: true,\n  Account: true,\n  MuxedAccount: true,\n  Claimant: true,\n  Networks: true,\n  StrKey: true,\n  SignerKey: true,\n  Soroban: true,\n  decodeAddressToMuxedAccount: true,\n  encodeMuxedAccountToAddress: true,\n  extractBaseAddress: true,\n  encodeMuxedAccount: true,\n  Contract: true,\n  Address: true\n};\nObject.defineProperty(exports, \"Account\", {\n  enumerable: true,\n  get: function get() {\n    return _account.Account;\n  }\n});\nObject.defineProperty(exports, \"Address\", {\n  enumerable: true,\n  get: function get() {\n    return _address.Address;\n  }\n});\nObject.defineProperty(exports, \"Asset\", {\n  enumerable: true,\n  get: function get() {\n    return _asset.Asset;\n  }\n});\nObject.defineProperty(exports, \"AuthClawbackEnabledFlag\", {\n  enumerable: true,\n  get: function get() {\n    return _operation.AuthClawbackEnabledFlag;\n  }\n});\nObject.defineProperty(exports, \"AuthImmutableFlag\", {\n  enumerable: true,\n  get: function get() {\n    return _operation.AuthImmutableFlag;\n  }\n});\nObject.defineProperty(exports, \"AuthRequiredFlag\", {\n  enumerable: true,\n  get: function get() {\n    return _operation.AuthRequiredFlag;\n  }\n});\nObject.defineProperty(exports, \"AuthRevocableFlag\", {\n  enumerable: true,\n  get: function get() {\n    return _operation.AuthRevocableFlag;\n  }\n});\nObject.defineProperty(exports, \"BASE_FEE\", {\n  enumerable: true,\n  get: function get() {\n    return _transaction_builder.BASE_FEE;\n  }\n});\nObject.defineProperty(exports, \"Claimant\", {\n  enumerable: true,\n  get: function get() {\n    return _claimant.Claimant;\n  }\n});\nObject.defineProperty(exports, \"Contract\", {\n  enumerable: true,\n  get: function get() {\n    return _contract.Contract;\n  }\n});\nObject.defineProperty(exports, \"FastSigning\", {\n  enumerable: true,\n  get: function get() {\n    return _signing.FastSigning;\n  }\n});\nObject.defineProperty(exports, \"FeeBumpTransaction\", {\n  enumerable: true,\n  get: function get() {\n    return _fee_bump_transaction.FeeBumpTransaction;\n  }\n});\nObject.defineProperty(exports, \"Hyper\", {\n  enumerable: true,\n  get: function get() {\n    return _jsXdr.Hyper;\n  }\n});\nObject.defineProperty(exports, \"Keypair\", {\n  enumerable: true,\n  get: function get() {\n    return _keypair.Keypair;\n  }\n});\nObject.defineProperty(exports, \"LiquidityPoolAsset\", {\n  enumerable: true,\n  get: function get() {\n    return _liquidity_pool_asset.LiquidityPoolAsset;\n  }\n});\nObject.defineProperty(exports, \"LiquidityPoolFeeV18\", {\n  enumerable: true,\n  get: function get() {\n    return _get_liquidity_pool_id.LiquidityPoolFeeV18;\n  }\n});\nObject.defineProperty(exports, \"LiquidityPoolId\", {\n  enumerable: true,\n  get: function get() {\n    return _liquidity_pool_id.LiquidityPoolId;\n  }\n});\nObject.defineProperty(exports, \"MuxedAccount\", {\n  enumerable: true,\n  get: function get() {\n    return _muxed_account.MuxedAccount;\n  }\n});\nObject.defineProperty(exports, \"Networks\", {\n  enumerable: true,\n  get: function get() {\n    return _network.Networks;\n  }\n});\nObject.defineProperty(exports, \"Operation\", {\n  enumerable: true,\n  get: function get() {\n    return _operation.Operation;\n  }\n});\nObject.defineProperty(exports, \"SignerKey\", {\n  enumerable: true,\n  get: function get() {\n    return _signerkey.SignerKey;\n  }\n});\nObject.defineProperty(exports, \"Soroban\", {\n  enumerable: true,\n  get: function get() {\n    return _soroban.Soroban;\n  }\n});\nObject.defineProperty(exports, \"StrKey\", {\n  enumerable: true,\n  get: function get() {\n    return _strkey.StrKey;\n  }\n});\nObject.defineProperty(exports, \"TimeoutInfinite\", {\n  enumerable: true,\n  get: function get() {\n    return _transaction_builder.TimeoutInfinite;\n  }\n});\nObject.defineProperty(exports, \"Transaction\", {\n  enumerable: true,\n  get: function get() {\n    return _transaction.Transaction;\n  }\n});\nObject.defineProperty(exports, \"TransactionBase\", {\n  enumerable: true,\n  get: function get() {\n    return _transaction_base.TransactionBase;\n  }\n});\nObject.defineProperty(exports, \"TransactionBuilder\", {\n  enumerable: true,\n  get: function get() {\n    return _transaction_builder.TransactionBuilder;\n  }\n});\nObject.defineProperty(exports, \"UnsignedHyper\", {\n  enumerable: true,\n  get: function get() {\n    return _jsXdr.UnsignedHyper;\n  }\n});\nObject.defineProperty(exports, \"cereal\", {\n  enumerable: true,\n  get: function get() {\n    return _jsxdr[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"decodeAddressToMuxedAccount\", {\n  enumerable: true,\n  get: function get() {\n    return _decode_encode_muxed_account.decodeAddressToMuxedAccount;\n  }\n});\nexports[\"default\"] = void 0;\nObject.defineProperty(exports, \"encodeMuxedAccount\", {\n  enumerable: true,\n  get: function get() {\n    return _decode_encode_muxed_account.encodeMuxedAccount;\n  }\n});\nObject.defineProperty(exports, \"encodeMuxedAccountToAddress\", {\n  enumerable: true,\n  get: function get() {\n    return _decode_encode_muxed_account.encodeMuxedAccountToAddress;\n  }\n});\nObject.defineProperty(exports, \"extractBaseAddress\", {\n  enumerable: true,\n  get: function get() {\n    return _decode_encode_muxed_account.extractBaseAddress;\n  }\n});\nObject.defineProperty(exports, \"getLiquidityPoolId\", {\n  enumerable: true,\n  get: function get() {\n    return _get_liquidity_pool_id.getLiquidityPoolId;\n  }\n});\nObject.defineProperty(exports, \"hash\", {\n  enumerable: true,\n  get: function get() {\n    return _hashing.hash;\n  }\n});\nObject.defineProperty(exports, \"sign\", {\n  enumerable: true,\n  get: function get() {\n    return _signing.sign;\n  }\n});\nObject.defineProperty(exports, \"verify\", {\n  enumerable: true,\n  get: function get() {\n    return _signing.verify;\n  }\n});\nObject.defineProperty(exports, \"xdr\", {\n  enumerable: true,\n  get: function get() {\n    return _xdr[\"default\"];\n  }\n});\nvar _xdr = _interopRequireDefault(require(\"./xdr\"));\nvar _jsxdr = _interopRequireDefault(require(\"./jsxdr\"));\nvar _hashing = require(\"./hashing\");\nvar _signing = require(\"./signing\");\nvar _get_liquidity_pool_id = require(\"./get_liquidity_pool_id\");\nvar _keypair = require(\"./keypair\");\nvar _jsXdr = require(\"@stellar/js-xdr\");\nvar _transaction_base = require(\"./transaction_base\");\nvar _transaction = require(\"./transaction\");\nvar _fee_bump_transaction = require(\"./fee_bump_transaction\");\nvar _transaction_builder = require(\"./transaction_builder\");\nvar _asset = require(\"./asset\");\nvar _liquidity_pool_asset = require(\"./liquidity_pool_asset\");\nvar _liquidity_pool_id = require(\"./liquidity_pool_id\");\nvar _operation = require(\"./operation\");\nvar _memo = require(\"./memo\");\nObject.keys(_memo).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _memo[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _memo[key];\n    }\n  });\n});\nvar _account = require(\"./account\");\nvar _muxed_account = require(\"./muxed_account\");\nvar _claimant = require(\"./claimant\");\nvar _network = require(\"./network\");\nvar _strkey = require(\"./strkey\");\nvar _signerkey = require(\"./signerkey\");\nvar _soroban = require(\"./soroban\");\nvar _decode_encode_muxed_account = require(\"./util/decode_encode_muxed_account\");\nvar _contract = require(\"./contract\");\nvar _address = require(\"./address\");\nvar _numbers = require(\"./numbers\");\nObject.keys(_numbers).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _numbers[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _numbers[key];\n    }\n  });\n});\nvar _scval = require(\"./scval\");\nObject.keys(_scval).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _scval[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _scval[key];\n    }\n  });\n});\nvar _events = require(\"./events\");\nObject.keys(_events).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _events[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _events[key];\n    }\n  });\n});\nvar _sorobandata_builder = require(\"./sorobandata_builder\");\nObject.keys(_sorobandata_builder).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _sorobandata_builder[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _sorobandata_builder[key];\n    }\n  });\n});\nvar _auth = require(\"./auth\");\nObject.keys(_auth).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _auth[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _auth[key];\n    }\n  });\n});\nvar _invocation = require(\"./invocation\");\nObject.keys(_invocation).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _invocation[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _invocation[key];\n    }\n  });\n});\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/* eslint-disable import/no-import-module-exports */\n//\n// Soroban\n//\nvar _default = exports[\"default\"] = module.exports;"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}