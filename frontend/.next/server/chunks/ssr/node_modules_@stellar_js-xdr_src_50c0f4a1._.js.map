{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/errors.js"],"sourcesContent":["export class XdrWriterError extends TypeError {\n  constructor(message) {\n    super(`XDR Write Error: ${message}`);\n  }\n}\n\nexport class XdrReaderError extends TypeError {\n  constructor(message) {\n    super(`XDR Read Error: ${message}`);\n  }\n}\n\nexport class XdrDefinitionError extends TypeError {\n  constructor(message) {\n    super(`XDR Type Definition Error: ${message}`);\n  }\n}\n\nexport class XdrNotImplementedDefinitionError extends XdrDefinitionError {\n  constructor() {\n    super(\n      `method not implemented, it should be overloaded in the descendant class.`\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAO,MAAM,uBAAuB;IAClC,YAAY,OAAO,CAAE;QACnB,KAAK,CAAC,CAAC,iBAAiB,EAAE,SAAS;IACrC;AACF;AAEO,MAAM,uBAAuB;IAClC,YAAY,OAAO,CAAE;QACnB,KAAK,CAAC,CAAC,gBAAgB,EAAE,SAAS;IACpC;AACF;AAEO,MAAM,2BAA2B;IACtC,YAAY,OAAO,CAAE;QACnB,KAAK,CAAC,CAAC,2BAA2B,EAAE,SAAS;IAC/C;AACF;AAEO,MAAM,yCAAyC;IACpD,aAAc;QACZ,KAAK,CACH,CAAC,wEAAwE,CAAC;IAE9E;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/serialization/xdr-reader.js"],"sourcesContent":["/**\n * @internal\n */\nimport { XdrReaderError } from '../errors';\n\nexport class XdrReader {\n  /**\n   * @constructor\n   * @param {Buffer} source - Buffer containing serialized data\n   */\n  constructor(source) {\n    if (!Buffer.isBuffer(source)) {\n      if (\n        source instanceof Array ||\n        Array.isArray(source) ||\n        ArrayBuffer.isView(source)\n      ) {\n        source = Buffer.from(source);\n      } else {\n        throw new XdrReaderError(`source invalid: ${source}`);\n      }\n    }\n\n    this._buffer = source;\n    this._length = source.length;\n    this._index = 0;\n  }\n\n  /**\n   * @type {Buffer}\n   * @private\n   * @readonly\n   */\n  _buffer;\n  /**\n   * @type {Number}\n   * @private\n   * @readonly\n   */\n  _length;\n  /**\n   * @type {Number}\n   * @private\n   * @readonly\n   */\n  _index;\n\n  /**\n   * Check if the reader reached the end of the input buffer\n   * @return {Boolean}\n   */\n  get eof() {\n    return this._index === this._length;\n  }\n\n  /**\n   * Advance reader position, check padding and overflow\n   * @param {Number} size - Bytes to read\n   * @return {Number} Position to read from\n   * @private\n   */\n  advance(size) {\n    const from = this._index;\n    // advance cursor position\n    this._index += size;\n    // check buffer boundaries\n    if (this._length < this._index)\n      throw new XdrReaderError(\n        'attempt to read outside the boundary of the buffer'\n      );\n    // check that padding is correct for Opaque and String\n    const padding = 4 - (size % 4 || 4);\n    if (padding > 0) {\n      for (let i = 0; i < padding; i++)\n        if (this._buffer[this._index + i] !== 0)\n          // all bytes in the padding should be zeros\n          throw new XdrReaderError('invalid padding');\n      this._index += padding;\n    }\n    return from;\n  }\n\n  /**\n   * Reset reader position\n   * @return {void}\n   */\n  rewind() {\n    this._index = 0;\n  }\n\n  /**\n   * Read byte array from the buffer\n   * @param {Number} size - Bytes to read\n   * @return {Buffer} - Sliced portion of the underlying buffer\n   */\n  read(size) {\n    const from = this.advance(size);\n    return this._buffer.subarray(from, from + size);\n  }\n\n  /**\n   * Read i32 from buffer\n   * @return {Number}\n   */\n  readInt32BE() {\n    return this._buffer.readInt32BE(this.advance(4));\n  }\n\n  /**\n   * Read u32 from buffer\n   * @return {Number}\n   */\n  readUInt32BE() {\n    return this._buffer.readUInt32BE(this.advance(4));\n  }\n\n  /**\n   * Read i64 from buffer\n   * @return {BigInt}\n   */\n  readBigInt64BE() {\n    return this._buffer.readBigInt64BE(this.advance(8));\n  }\n\n  /**\n   * Read u64 from buffer\n   * @return {BigInt}\n   */\n  readBigUInt64BE() {\n    return this._buffer.readBigUInt64BE(this.advance(8));\n  }\n\n  /**\n   * Read float from buffer\n   * @return {Number}\n   */\n  readFloatBE() {\n    return this._buffer.readFloatBE(this.advance(4));\n  }\n\n  /**\n   * Read double from buffer\n   * @return {Number}\n   */\n  readDoubleBE() {\n    return this._buffer.readDoubleBE(this.advance(8));\n  }\n\n  /**\n   * Ensure that input buffer has been consumed in full, otherwise it's a type mismatch\n   * @return {void}\n   * @throws {XdrReaderError}\n   */\n  ensureInputConsumed() {\n    if (this._index !== this._length)\n      throw new XdrReaderError(\n        `invalid XDR contract typecast - source buffer not entirely consumed`\n      );\n  }\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;AACD;;AAEO,MAAM;IACX;;;GAGC,GACD,YAAY,MAAM,CAAE;QAClB,IAAI,CAAC,OAAO,QAAQ,CAAC,SAAS;YAC5B,IACE,kBAAkB,SAClB,MAAM,OAAO,CAAC,WACd,YAAY,MAAM,CAAC,SACnB;gBACA,SAAS,OAAO,IAAI,CAAC;YACvB,OAAO;gBACL,MAAM,IAAI,uJAAA,CAAA,iBAAc,CAAC,CAAC,gBAAgB,EAAE,QAAQ;YACtD;QACF;QAEA,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,OAAO,GAAG,OAAO,MAAM;QAC5B,IAAI,CAAC,MAAM,GAAG;IAChB;IAEA;;;;GAIC,GACD,QAAQ;IACR;;;;GAIC,GACD,QAAQ;IACR;;;;GAIC,GACD,OAAO;IAEP;;;GAGC,GACD,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,OAAO;IACrC;IAEA;;;;;GAKC,GACD,QAAQ,IAAI,EAAE;QACZ,MAAM,OAAO,IAAI,CAAC,MAAM;QACxB,0BAA0B;QAC1B,IAAI,CAAC,MAAM,IAAI;QACf,0BAA0B;QAC1B,IAAI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,EAC5B,MAAM,IAAI,uJAAA,CAAA,iBAAc,CACtB;QAEJ,sDAAsD;QACtD,MAAM,UAAU,IAAI,CAAC,OAAO,KAAK,CAAC;QAClC,IAAI,UAAU,GAAG;YACf,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,IAC3B,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,KAAK,GACpC,2CAA2C;YAC3C,MAAM,IAAI,uJAAA,CAAA,iBAAc,CAAC;YAC7B,IAAI,CAAC,MAAM,IAAI;QACjB;QACA,OAAO;IACT;IAEA;;;GAGC,GACD,SAAS;QACP,IAAI,CAAC,MAAM,GAAG;IAChB;IAEA;;;;GAIC,GACD,KAAK,IAAI,EAAE;QACT,MAAM,OAAO,IAAI,CAAC,OAAO,CAAC;QAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,OAAO;IAC5C;IAEA;;;GAGC,GACD,cAAc;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC;IAC/C;IAEA;;;GAGC,GACD,eAAe;QACb,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC;IAChD;IAEA;;;GAGC,GACD,iBAAiB;QACf,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC;IAClD;IAEA;;;GAGC,GACD,kBAAkB;QAChB,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC;IACnD;IAEA;;;GAGC,GACD,cAAc;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC;IAC/C;IAEA;;;GAGC,GACD,eAAe;QACb,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC;IAChD;IAEA;;;;GAIC,GACD,sBAAsB;QACpB,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,OAAO,EAC9B,MAAM,IAAI,uJAAA,CAAA,iBAAc,CACtB,CAAC,mEAAmE,CAAC;IAE3E;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/serialization/xdr-writer.js"],"sourcesContent":["const BUFFER_CHUNK = 8192; // 8 KB chunk size increment\n\n/**\n * @internal\n */\nexport class XdrWriter {\n  /**\n   * @param {Buffer|Number} [buffer] - Optional destination buffer\n   */\n  constructor(buffer) {\n    if (typeof buffer === 'number') {\n      buffer = Buffer.allocUnsafe(buffer);\n    } else if (!(buffer instanceof Buffer)) {\n      buffer = Buffer.allocUnsafe(BUFFER_CHUNK);\n    }\n    this._buffer = buffer;\n    this._length = buffer.length;\n  }\n\n  /**\n   * @type {Buffer}\n   * @private\n   * @readonly\n   */\n  _buffer;\n  /**\n   * @type {Number}\n   * @private\n   * @readonly\n   */\n  _length;\n  /**\n   * @type {Number}\n   * @private\n   * @readonly\n   */\n  _index = 0;\n\n  /**\n   * Advance writer position, write padding if needed, auto-resize the buffer\n   * @param {Number} size - Bytes to write\n   * @return {Number} Position to read from\n   * @private\n   */\n  alloc(size) {\n    const from = this._index;\n    // advance cursor position\n    this._index += size;\n    // ensure sufficient buffer size\n    if (this._length < this._index) {\n      this.resize(this._index);\n    }\n    return from;\n  }\n\n  /**\n   * Increase size of the underlying buffer\n   * @param {Number} minRequiredSize - Minimum required buffer size\n   * @return {void}\n   * @private\n   */\n  resize(minRequiredSize) {\n    // calculate new length, align new buffer length by chunk size\n    const newLength = Math.ceil(minRequiredSize / BUFFER_CHUNK) * BUFFER_CHUNK;\n    // create new buffer and copy previous data\n    const newBuffer = Buffer.allocUnsafe(newLength);\n    this._buffer.copy(newBuffer, 0, 0, this._length);\n    // update references\n    this._buffer = newBuffer;\n    this._length = newLength;\n  }\n\n  /**\n   * Return XDR-serialized value\n   * @return {Buffer}\n   */\n  finalize() {\n    // clip underlying buffer to the actually written value\n    return this._buffer.subarray(0, this._index);\n  }\n\n  /**\n   * Return XDR-serialized value as byte array\n   * @return {Number[]}\n   */\n  toArray() {\n    return [...this.finalize()];\n  }\n\n  /**\n   * Write byte array from the buffer\n   * @param {Buffer|String} value - Bytes/string to write\n   * @param {Number} size - Size in bytes\n   * @return {XdrReader} - XdrReader wrapper on top of a subarray\n   */\n  write(value, size) {\n    if (typeof value === 'string') {\n      // serialize string directly to the output buffer\n      const offset = this.alloc(size);\n      this._buffer.write(value, offset, 'utf8');\n    } else {\n      // copy data to the output buffer\n      if (!(value instanceof Buffer)) {\n        value = Buffer.from(value);\n      }\n      const offset = this.alloc(size);\n      value.copy(this._buffer, offset, 0, size);\n    }\n\n    // add padding for 4-byte XDR alignment\n    const padding = 4 - (size % 4 || 4);\n    if (padding > 0) {\n      const offset = this.alloc(padding);\n      this._buffer.fill(0, offset, this._index);\n    }\n  }\n\n  /**\n   * Write i32 from buffer\n   * @param {Number} value - Value to serialize\n   * @return {void}\n   */\n  writeInt32BE(value) {\n    const offset = this.alloc(4);\n    this._buffer.writeInt32BE(value, offset);\n  }\n\n  /**\n   * Write u32 from buffer\n   * @param {Number} value - Value to serialize\n   * @return {void}\n   */\n  writeUInt32BE(value) {\n    const offset = this.alloc(4);\n    this._buffer.writeUInt32BE(value, offset);\n  }\n\n  /**\n   * Write i64 from buffer\n   * @param {BigInt} value - Value to serialize\n   * @return {void}\n   */\n  writeBigInt64BE(value) {\n    const offset = this.alloc(8);\n    this._buffer.writeBigInt64BE(value, offset);\n  }\n\n  /**\n   * Write u64 from buffer\n   * @param {BigInt} value - Value to serialize\n   * @return {void}\n   */\n  writeBigUInt64BE(value) {\n    const offset = this.alloc(8);\n    this._buffer.writeBigUInt64BE(value, offset);\n  }\n\n  /**\n   * Write float from buffer\n   * @param {Number} value - Value to serialize\n   * @return {void}\n   */\n  writeFloatBE(value) {\n    const offset = this.alloc(4);\n    this._buffer.writeFloatBE(value, offset);\n  }\n\n  /**\n   * Write double from buffer\n   * @param {Number} value - Value to serialize\n   * @return {void}\n   */\n  writeDoubleBE(value) {\n    const offset = this.alloc(8);\n    this._buffer.writeDoubleBE(value, offset);\n  }\n\n  static bufferChunkSize = BUFFER_CHUNK;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 324, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/xdr-type.js"],"sourcesContent":["import { XdrReader } from './serialization/xdr-reader';\nimport { XdrWriter } from './serialization/xdr-writer';\nimport { XdrNotImplementedDefinitionError } from './errors';\n\nclass XdrType {\n  /**\n   * Encode value to XDR format\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {String|Buffer}\n   */\n  toXDR(format = 'raw') {\n    if (!this.write) return this.constructor.toXDR(this, format);\n\n    const writer = new XdrWriter();\n    this.write(this, writer);\n    return encodeResult(writer.finalize(), format);\n  }\n\n  /**\n   * Decode XDR-encoded value\n   * @param {Buffer|String} input - XDR-encoded input data\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {this}\n   */\n  fromXDR(input, format = 'raw') {\n    if (!this.read) return this.constructor.fromXDR(input, format);\n\n    const reader = new XdrReader(decodeInput(input, format));\n    const result = this.read(reader);\n    reader.ensureInputConsumed();\n    return result;\n  }\n\n  /**\n   * Check whether input contains a valid XDR-encoded value\n   * @param {Buffer|String} input - XDR-encoded input data\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {Boolean}\n   */\n  validateXDR(input, format = 'raw') {\n    try {\n      this.fromXDR(input, format);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Encode value to XDR format\n   * @param {this} value - Value to serialize\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {Buffer}\n   */\n  static toXDR(value, format = 'raw') {\n    const writer = new XdrWriter();\n    this.write(value, writer);\n    return encodeResult(writer.finalize(), format);\n  }\n\n  /**\n   * Decode XDR-encoded value\n   * @param {Buffer|String} input - XDR-encoded input data\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {this}\n   */\n  static fromXDR(input, format = 'raw') {\n    const reader = new XdrReader(decodeInput(input, format));\n    const result = this.read(reader);\n    reader.ensureInputConsumed();\n    return result;\n  }\n\n  /**\n   * Check whether input contains a valid XDR-encoded value\n   * @param {Buffer|String} input - XDR-encoded input data\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {Boolean}\n   */\n  static validateXDR(input, format = 'raw') {\n    try {\n      this.fromXDR(input, format);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\nexport class XdrPrimitiveType extends XdrType {\n  /**\n   * Read value from the XDR-serialized input\n   * @param {XdrReader} reader - XdrReader instance\n   * @return {this}\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  static read(reader) {\n    throw new XdrNotImplementedDefinitionError();\n  }\n\n  /**\n   * Write XDR value to the buffer\n   * @param {this} value - Value to write\n   * @param {XdrWriter} writer - XdrWriter instance\n   * @return {void}\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  static write(value, writer) {\n    throw new XdrNotImplementedDefinitionError();\n  }\n\n  /**\n   * Check whether XDR primitive value is valid\n   * @param {this} value - Value to check\n   * @return {Boolean}\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  static isValid(value) {\n    return false;\n  }\n}\n\nexport class XdrCompositeType extends XdrType {\n  // Every descendant should implement two methods: read(reader) and write(value, writer)\n\n  /**\n   * Check whether XDR primitive value is valid\n   * @param {this} value - Value to check\n   * @return {Boolean}\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  isValid(value) {\n    return false;\n  }\n}\n\nclass InvalidXdrEncodingFormatError extends TypeError {\n  constructor(format) {\n    super(`Invalid format ${format}, must be one of \"raw\", \"hex\", \"base64\"`);\n  }\n}\n\nfunction encodeResult(buffer, format) {\n  switch (format) {\n    case 'raw':\n      return buffer;\n    case 'hex':\n      return buffer.toString('hex');\n    case 'base64':\n      return buffer.toString('base64');\n    default:\n      throw new InvalidXdrEncodingFormatError(format);\n  }\n}\n\nfunction decodeInput(input, format) {\n  switch (format) {\n    case 'raw':\n      return input;\n    case 'hex':\n      return Buffer.from(input, 'hex');\n    case 'base64':\n      return Buffer.from(input, 'base64');\n    default:\n      throw new InvalidXdrEncodingFormatError(format);\n  }\n}\n\n/**\n * Provides a \"duck typed\" version of the native `instanceof` for read/write.\n *\n * \"Duck typing\" means if the parameter _looks like_ and _acts like_ a duck\n * (i.e. the type we're checking), it will be treated as that type.\n *\n * In this case, the \"type\" we're looking for is \"like XdrType\" but also \"like\n * XdrCompositeType|XdrPrimitiveType\" (i.e. serializable), but also conditioned\n * on a particular subclass of \"XdrType\" (e.g. {@link Union} which extends\n * XdrType).\n *\n * This makes the package resilient to downstream systems that may be combining\n * many versions of a package across its stack that are technically compatible\n * but fail `instanceof` checks due to cross-pollination.\n */\nexport function isSerializableIsh(value, subtype) {\n  return (\n    value !== undefined &&\n    value !== null && // prereqs, otherwise `getPrototypeOf` pops\n    (value instanceof subtype || // quickest check\n      // Do an initial constructor check (anywhere is fine so that children of\n      // `subtype` still work), then\n      (hasConstructor(value, subtype) &&\n        // ensure it has read/write methods, then\n        typeof value.constructor.read === 'function' &&\n        typeof value.constructor.write === 'function' &&\n        // ensure XdrType is in the prototype chain\n        hasConstructor(value, 'XdrType')))\n  );\n}\n\n/** Tries to find `subtype` in any of the constructors or meta of `instance`. */\nexport function hasConstructor(instance, subtype) {\n  do {\n    const ctor = instance.constructor;\n    if (ctor.name === subtype) {\n      return true;\n    }\n  } while ((instance = Object.getPrototypeOf(instance)));\n  return false;\n}\n\n/**\n * @typedef {'raw'|'hex'|'base64'} XdrEncodingFormat\n */\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 501, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/int.js"],"sourcesContent":["import { XdrPrimitiveType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nconst MAX_VALUE = 2147483647;\nconst MIN_VALUE = -2147483648;\n\nexport class Int extends XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    return reader.readInt32BE();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (typeof value !== 'number') throw new XdrWriterError('not a number');\n\n    if ((value | 0) !== value) throw new XdrWriterError('invalid i32 value');\n\n    writer.writeInt32BE(value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    if (typeof value !== 'number' || (value | 0) !== value) {\n      return false;\n    }\n\n    return value >= MIN_VALUE && value <= MAX_VALUE;\n  }\n}\n\nInt.MAX_VALUE = MAX_VALUE;\nInt.MIN_VALUE = -MIN_VALUE;\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,YAAY;AAClB,MAAM,YAAY,CAAC;AAEZ,MAAM,YAAY,4JAAA,CAAA,mBAAgB;IACvC;;GAEC,GACD,OAAO,KAAK,MAAM,EAAE;QAClB,OAAO,OAAO,WAAW;IAC3B;IAEA;;GAEC,GACD,OAAO,MAAM,KAAK,EAAE,MAAM,EAAE;QAC1B,IAAI,OAAO,UAAU,UAAU,MAAM,IAAI,uJAAA,CAAA,iBAAc,CAAC;QAExD,IAAI,CAAC,QAAQ,CAAC,MAAM,OAAO,MAAM,IAAI,uJAAA,CAAA,iBAAc,CAAC;QAEpD,OAAO,YAAY,CAAC;IACtB;IAEA;;GAEC,GACD,OAAO,QAAQ,KAAK,EAAE;QACpB,IAAI,OAAO,UAAU,YAAY,CAAC,QAAQ,CAAC,MAAM,OAAO;YACtD,OAAO;QACT;QAEA,OAAO,SAAS,aAAa,SAAS;IACxC;AACF;AAEA,IAAI,SAAS,GAAG;AAChB,IAAI,SAAS,GAAG,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 540, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/bigint-encoder.js"],"sourcesContent":["/**\n * Encode a native `bigint` value from a list of arbitrary integer-like values.\n *\n * @param {Array<number|bigint|string>} parts - Slices to encode in big-endian\n *    format (i.e. earlier elements are higher bits)\n * @param {64|128|256} size - Number of bits in the target integer type\n * @param {boolean} unsigned - Whether it's an unsigned integer\n *\n * @returns {bigint}\n */\nexport function encodeBigIntFromBits(parts, size, unsigned) {\n  if (!(parts instanceof Array)) {\n    // allow a single parameter instead of an array\n    parts = [parts];\n  } else if (parts.length && parts[0] instanceof Array) {\n    // unpack nested array param\n    parts = parts[0];\n  }\n\n  const total = parts.length;\n  const sliceSize = size / total;\n  switch (sliceSize) {\n    case 32:\n    case 64:\n    case 128:\n    case 256:\n      break;\n\n    default:\n      throw new RangeError(\n        `expected slices to fit in 32/64/128/256 bits, got ${parts}`\n      );\n  }\n\n  // normalize all inputs to bigint\n  try {\n    for (let i = 0; i < parts.length; i++) {\n      if (typeof parts[i] !== 'bigint') {\n        parts[i] = BigInt(parts[i].valueOf());\n      }\n    }\n  } catch (e) {\n    throw new TypeError(`expected bigint-like values, got: ${parts} (${e})`);\n  }\n\n  // check for sign mismatches for single inputs (this is a special case to\n  // handle one parameter passed to e.g. UnsignedHyper et al.)\n  // see https://github.com/stellar/js-xdr/pull/100#discussion_r1228770845\n  if (unsigned && parts.length === 1 && parts[0] < 0n) {\n    throw new RangeError(`expected a positive value, got: ${parts}`);\n  }\n\n  // encode in big-endian fashion, shifting each slice by the slice size\n  let result = BigInt.asUintN(sliceSize, parts[0]); // safe: len >= 1\n  for (let i = 1; i < parts.length; i++) {\n    result |= BigInt.asUintN(sliceSize, parts[i]) << BigInt(i * sliceSize);\n  }\n\n  // interpret value as signed if necessary and clamp it\n  if (!unsigned) {\n    result = BigInt.asIntN(size, result);\n  }\n\n  // check boundaries\n  const [min, max] = calculateBigIntBoundaries(size, unsigned);\n  if (result >= min && result <= max) {\n    return result;\n  }\n\n  // failed to encode\n  throw new TypeError(\n    `bigint values [${parts}] for ${formatIntName(\n      size,\n      unsigned\n    )} out of range [${min}, ${max}]: ${result}`\n  );\n}\n\n/**\n * Transforms a single bigint value that's supposed to represent a `size`-bit\n * integer into a list of `sliceSize`d chunks.\n *\n * @param {bigint} value - Single bigint value to decompose\n * @param {64|128|256} iSize - Number of bits represented by `value`\n * @param {32|64|128} sliceSize - Number of chunks to decompose into\n * @return {bigint[]}\n */\nexport function sliceBigInt(value, iSize, sliceSize) {\n  if (typeof value !== 'bigint') {\n    throw new TypeError(`Expected bigint 'value', got ${typeof value}`);\n  }\n\n  const total = iSize / sliceSize;\n  if (total === 1) {\n    return [value];\n  }\n\n  if (\n    sliceSize < 32 ||\n    sliceSize > 128 ||\n    (total !== 2 && total !== 4 && total !== 8)\n  ) {\n    throw new TypeError(\n      `invalid bigint (${value}) and slice size (${iSize} -> ${sliceSize}) combination`\n    );\n  }\n\n  const shift = BigInt(sliceSize);\n\n  // iterate shift and mask application\n  const result = new Array(total);\n  for (let i = 0; i < total; i++) {\n    // we force a signed interpretation to preserve sign in each slice value,\n    // but downstream can convert to unsigned if it's appropriate\n    result[i] = BigInt.asIntN(sliceSize, value); // clamps to size\n\n    // move on to the next chunk\n    value >>= shift;\n  }\n\n  return result;\n}\n\nexport function formatIntName(precision, unsigned) {\n  return `${unsigned ? 'u' : 'i'}${precision}`;\n}\n\n/**\n * Get min|max boundaries for an integer with a specified bits size\n * @param {64|128|256} size - Number of bits in the source integer type\n * @param {Boolean} unsigned - Whether it's an unsigned integer\n * @return {BigInt[]}\n */\nexport function calculateBigIntBoundaries(size, unsigned) {\n  if (unsigned) {\n    return [0n, (1n << BigInt(size)) - 1n];\n  }\n\n  const boundary = 1n << BigInt(size - 1);\n  return [0n - boundary, boundary - 1n];\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 656, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/large-int.js"],"sourcesContent":["import { XdrPrimitiveType } from './xdr-type';\nimport {\n  calculateBigIntBoundaries,\n  encodeBigIntFromBits,\n  sliceBigInt\n} from './bigint-encoder';\nimport { XdrNotImplementedDefinitionError, XdrWriterError } from './errors';\n\nexport class LargeInt extends XdrPrimitiveType {\n  /**\n   * @param {Array<Number|BigInt|String>} parts - Slices to encode\n   */\n  constructor(args) {\n    super();\n    this._value = encodeBigIntFromBits(args, this.size, this.unsigned);\n  }\n\n  /**\n   * Signed/unsigned representation\n   * @type {Boolean}\n   * @abstract\n   */\n  get unsigned() {\n    throw new XdrNotImplementedDefinitionError();\n  }\n\n  /**\n   * Size of the integer in bits\n   * @type {Number}\n   * @abstract\n   */\n  get size() {\n    throw new XdrNotImplementedDefinitionError();\n  }\n\n  /**\n   * Slice integer to parts with smaller bit size\n   * @param {32|64|128} sliceSize - Size of each part in bits\n   * @return {BigInt[]}\n   */\n  slice(sliceSize) {\n    return sliceBigInt(this._value, this.size, sliceSize);\n  }\n\n  toString() {\n    return this._value.toString();\n  }\n\n  toJSON() {\n    return { _value: this._value.toString() };\n  }\n\n  toBigInt() {\n    return BigInt(this._value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const { size } = this.prototype;\n    if (size === 64) return new this(reader.readBigUInt64BE());\n    return new this(\n      ...Array.from({ length: size / 64 }, () =>\n        reader.readBigUInt64BE()\n      ).reverse()\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (value instanceof this) {\n      value = value._value;\n    } else if (\n      typeof value !== 'bigint' ||\n      value > this.MAX_VALUE ||\n      value < this.MIN_VALUE\n    )\n      throw new XdrWriterError(`${value} is not a ${this.name}`);\n\n    const { unsigned, size } = this.prototype;\n    if (size === 64) {\n      if (unsigned) {\n        writer.writeBigUInt64BE(value);\n      } else {\n        writer.writeBigInt64BE(value);\n      }\n    } else {\n      for (const part of sliceBigInt(value, size, 64).reverse()) {\n        if (unsigned) {\n          writer.writeBigUInt64BE(part);\n        } else {\n          writer.writeBigInt64BE(part);\n        }\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return typeof value === 'bigint' || value instanceof this;\n  }\n\n  /**\n   * Create instance from string\n   * @param {String} string - Numeric representation\n   * @return {LargeInt}\n   */\n  static fromString(string) {\n    return new this(string);\n  }\n\n  static MAX_VALUE = 0n;\n\n  static MIN_VALUE = 0n;\n\n  /**\n   * @internal\n   * @return {void}\n   */\n  static defineIntBoundaries() {\n    const [min, max] = calculateBigIntBoundaries(\n      this.prototype.size,\n      this.prototype.unsigned\n    );\n    this.MIN_VALUE = min;\n    this.MAX_VALUE = max;\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AAKA;;;;AAEO,MAAM,iBAAiB,4JAAA,CAAA,mBAAgB;IAC5C;;GAEC,GACD,YAAY,IAAI,CAAE;QAChB,KAAK;QACL,IAAI,CAAC,MAAM,GAAG,CAAA,GAAA,kKAAA,CAAA,uBAAoB,AAAD,EAAE,MAAM,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ;IACnE;IAEA;;;;GAIC,GACD,IAAI,WAAW;QACb,MAAM,IAAI,uJAAA,CAAA,mCAAgC;IAC5C;IAEA;;;;GAIC,GACD,IAAI,OAAO;QACT,MAAM,IAAI,uJAAA,CAAA,mCAAgC;IAC5C;IAEA;;;;GAIC,GACD,MAAM,SAAS,EAAE;QACf,OAAO,CAAA,GAAA,kKAAA,CAAA,cAAW,AAAD,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE;IAC7C;IAEA,WAAW;QACT,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ;IAC7B;IAEA,SAAS;QACP,OAAO;YAAE,QAAQ,IAAI,CAAC,MAAM,CAAC,QAAQ;QAAG;IAC1C;IAEA,WAAW;QACT,OAAO,OAAO,IAAI,CAAC,MAAM;IAC3B;IAEA;;GAEC,GACD,OAAO,KAAK,MAAM,EAAE;QAClB,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,SAAS;QAC/B,IAAI,SAAS,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,eAAe;QACvD,OAAO,IAAI,IAAI,IACV,MAAM,IAAI,CAAC;YAAE,QAAQ,OAAO;QAAG,GAAG,IACnC,OAAO,eAAe,IACtB,OAAO;IAEb;IAEA;;GAEC,GACD,OAAO,MAAM,KAAK,EAAE,MAAM,EAAE;QAC1B,IAAI,iBAAiB,IAAI,EAAE;YACzB,QAAQ,MAAM,MAAM;QACtB,OAAO,IACL,OAAO,UAAU,YACjB,QAAQ,IAAI,CAAC,SAAS,IACtB,QAAQ,IAAI,CAAC,SAAS,EAEtB,MAAM,IAAI,uJAAA,CAAA,iBAAc,CAAC,GAAG,MAAM,UAAU,EAAE,IAAI,CAAC,IAAI,EAAE;QAE3D,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,SAAS;QACzC,IAAI,SAAS,IAAI;YACf,IAAI,UAAU;gBACZ,OAAO,gBAAgB,CAAC;YAC1B,OAAO;gBACL,OAAO,eAAe,CAAC;YACzB;QACF,OAAO;YACL,KAAK,MAAM,QAAQ,CAAA,GAAA,kKAAA,CAAA,cAAW,AAAD,EAAE,OAAO,MAAM,IAAI,OAAO,GAAI;gBACzD,IAAI,UAAU;oBACZ,OAAO,gBAAgB,CAAC;gBAC1B,OAAO;oBACL,OAAO,eAAe,CAAC;gBACzB;YACF;QACF;IACF;IAEA;;GAEC,GACD,OAAO,QAAQ,KAAK,EAAE;QACpB,OAAO,OAAO,UAAU,YAAY,iBAAiB,IAAI;IAC3D;IAEA;;;;GAIC,GACD,OAAO,WAAW,MAAM,EAAE;QACxB,OAAO,IAAI,IAAI,CAAC;IAClB;IAEA,OAAO,YAAY,EAAE,CAAC;IAEtB,OAAO,YAAY,EAAE,CAAC;IAEtB;;;GAGC,GACD,OAAO,sBAAsB;QAC3B,MAAM,CAAC,KAAK,IAAI,GAAG,CAAA,GAAA,kKAAA,CAAA,4BAAyB,AAAD,EACzC,IAAI,CAAC,SAAS,CAAC,IAAI,EACnB,IAAI,CAAC,SAAS,CAAC,QAAQ;QAEzB,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,SAAS,GAAG;IACnB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 765, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/hyper.js"],"sourcesContent":["import { LargeInt } from './large-int';\n\nexport class Hyper extends LargeInt {\n  /**\n   * @param {Array<Number|BigInt|String>} parts - Slices to encode\n   */\n  constructor(...args) {\n    super(args);\n  }\n\n  get low() {\n    return Number(this._value & 0xffffffffn) << 0;\n  }\n\n  get high() {\n    return Number(this._value >> 32n) >> 0;\n  }\n\n  get size() {\n    return 64;\n  }\n\n  get unsigned() {\n    return false;\n  }\n\n  /**\n   * Create Hyper instance from two [high][low] i32 values\n   * @param {Number} low - Low part of i64 number\n   * @param {Number} high - High part of i64 number\n   * @return {LargeInt}\n   */\n  static fromBits(low, high) {\n    return new this(low, high);\n  }\n}\n\nHyper.defineIntBoundaries();\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,cAAc,6JAAA,CAAA,WAAQ;IACjC;;GAEC,GACD,YAAY,GAAG,IAAI,CAAE;QACnB,KAAK,CAAC;IACR;IAEA,IAAI,MAAM;QACR,OAAO,OAAO,IAAI,CAAC,MAAM,GAAG,WAAW,KAAK;IAC9C;IAEA,IAAI,OAAO;QACT,OAAO,OAAO,IAAI,CAAC,MAAM,IAAI,GAAG,KAAK;IACvC;IAEA,IAAI,OAAO;QACT,OAAO;IACT;IAEA,IAAI,WAAW;QACb,OAAO;IACT;IAEA;;;;;GAKC,GACD,OAAO,SAAS,GAAG,EAAE,IAAI,EAAE;QACzB,OAAO,IAAI,IAAI,CAAC,KAAK;IACvB;AACF;AAEA,MAAM,mBAAmB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 804, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/unsigned-int.js"],"sourcesContent":["import { XdrPrimitiveType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nconst MAX_VALUE = 4294967295;\nconst MIN_VALUE = 0;\n\nexport class UnsignedInt extends XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    return reader.readUInt32BE();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (\n      typeof value !== 'number' ||\n      !(value >= MIN_VALUE && value <= MAX_VALUE) ||\n      value % 1 !== 0\n    )\n      throw new XdrWriterError('invalid u32 value');\n\n    writer.writeUInt32BE(value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    if (typeof value !== 'number' || value % 1 !== 0) {\n      return false;\n    }\n\n    return value >= MIN_VALUE && value <= MAX_VALUE;\n  }\n}\n\nUnsignedInt.MAX_VALUE = MAX_VALUE;\nUnsignedInt.MIN_VALUE = MIN_VALUE;\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,YAAY;AAClB,MAAM,YAAY;AAEX,MAAM,oBAAoB,4JAAA,CAAA,mBAAgB;IAC/C;;GAEC,GACD,OAAO,KAAK,MAAM,EAAE;QAClB,OAAO,OAAO,YAAY;IAC5B;IAEA;;GAEC,GACD,OAAO,MAAM,KAAK,EAAE,MAAM,EAAE;QAC1B,IACE,OAAO,UAAU,YACjB,CAAC,CAAC,SAAS,aAAa,SAAS,SAAS,KAC1C,QAAQ,MAAM,GAEd,MAAM,IAAI,uJAAA,CAAA,iBAAc,CAAC;QAE3B,OAAO,aAAa,CAAC;IACvB;IAEA;;GAEC,GACD,OAAO,QAAQ,KAAK,EAAE;QACpB,IAAI,OAAO,UAAU,YAAY,QAAQ,MAAM,GAAG;YAChD,OAAO;QACT;QAEA,OAAO,SAAS,aAAa,SAAS;IACxC;AACF;AAEA,YAAY,SAAS,GAAG;AACxB,YAAY,SAAS,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 842, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/unsigned-hyper.js"],"sourcesContent":["import { LargeInt } from './large-int';\n\nexport class UnsignedHyper extends LargeInt {\n  /**\n   * @param {Array<Number|BigInt|String>} parts - Slices to encode\n   */\n  constructor(...args) {\n    super(args);\n  }\n\n  get low() {\n    return Number(this._value & 0xffffffffn) << 0;\n  }\n\n  get high() {\n    return Number(this._value >> 32n) >> 0;\n  }\n\n  get size() {\n    return 64;\n  }\n\n  get unsigned() {\n    return true;\n  }\n\n  /**\n   * Create UnsignedHyper instance from two [high][low] i32 values\n   * @param {Number} low - Low part of u64 number\n   * @param {Number} high - High part of u64 number\n   * @return {UnsignedHyper}\n   */\n  static fromBits(low, high) {\n    return new this(low, high);\n  }\n}\n\nUnsignedHyper.defineIntBoundaries();\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,sBAAsB,6JAAA,CAAA,WAAQ;IACzC;;GAEC,GACD,YAAY,GAAG,IAAI,CAAE;QACnB,KAAK,CAAC;IACR;IAEA,IAAI,MAAM;QACR,OAAO,OAAO,IAAI,CAAC,MAAM,GAAG,WAAW,KAAK;IAC9C;IAEA,IAAI,OAAO;QACT,OAAO,OAAO,IAAI,CAAC,MAAM,IAAI,GAAG,KAAK;IACvC;IAEA,IAAI,OAAO;QACT,OAAO;IACT;IAEA,IAAI,WAAW;QACb,OAAO;IACT;IAEA;;;;;GAKC,GACD,OAAO,SAAS,GAAG,EAAE,IAAI,EAAE;QACzB,OAAO,IAAI,IAAI,CAAC,KAAK;IACvB;AACF;AAEA,cAAc,mBAAmB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 881, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/float.js"],"sourcesContent":["import { XdrPrimitiveType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Float extends XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    return reader.readFloatBE();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (typeof value !== 'number') throw new XdrWriterError('not a number');\n\n    writer.writeFloatBE(value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return typeof value === 'number';\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,cAAc,4JAAA,CAAA,mBAAgB;IACzC;;GAEC,GACD,OAAO,KAAK,MAAM,EAAE;QAClB,OAAO,OAAO,WAAW;IAC3B;IAEA;;GAEC,GACD,OAAO,MAAM,KAAK,EAAE,MAAM,EAAE;QAC1B,IAAI,OAAO,UAAU,UAAU,MAAM,IAAI,uJAAA,CAAA,iBAAc,CAAC;QAExD,OAAO,YAAY,CAAC;IACtB;IAEA;;GAEC,GACD,OAAO,QAAQ,KAAK,EAAE;QACpB,OAAO,OAAO,UAAU;IAC1B;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 912, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/double.js"],"sourcesContent":["import { XdrPrimitiveType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Double extends XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    return reader.readDoubleBE();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (typeof value !== 'number') throw new XdrWriterError('not a number');\n\n    writer.writeDoubleBE(value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return typeof value === 'number';\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,eAAe,4JAAA,CAAA,mBAAgB;IAC1C;;GAEC,GACD,OAAO,KAAK,MAAM,EAAE;QAClB,OAAO,OAAO,YAAY;IAC5B;IAEA;;GAEC,GACD,OAAO,MAAM,KAAK,EAAE,MAAM,EAAE;QAC1B,IAAI,OAAO,UAAU,UAAU,MAAM,IAAI,uJAAA,CAAA,iBAAc,CAAC;QAExD,OAAO,aAAa,CAAC;IACvB;IAEA;;GAEC,GACD,OAAO,QAAQ,KAAK,EAAE;QACpB,OAAO,OAAO,UAAU;IAC1B;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 943, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/quadruple.js"],"sourcesContent":["import { XdrPrimitiveType } from './xdr-type';\nimport { XdrDefinitionError } from './errors';\n\nexport class Quadruple extends XdrPrimitiveType {\n  static read() {\n    throw new XdrDefinitionError('quadruple not supported');\n  }\n\n  static write() {\n    throw new XdrDefinitionError('quadruple not supported');\n  }\n\n  static isValid() {\n    return false;\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,kBAAkB,4JAAA,CAAA,mBAAgB;IAC7C,OAAO,OAAO;QACZ,MAAM,IAAI,uJAAA,CAAA,qBAAkB,CAAC;IAC/B;IAEA,OAAO,QAAQ;QACb,MAAM,IAAI,uJAAA,CAAA,qBAAkB,CAAC;IAC/B;IAEA,OAAO,UAAU;QACf,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 967, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/bool.js"],"sourcesContent":["import { Int } from './int';\nimport { XdrPrimitiveType } from './xdr-type';\nimport { XdrReaderError } from './errors';\n\nexport class Bool extends XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const value = Int.read(reader);\n\n    switch (value) {\n      case 0:\n        return false;\n      case 1:\n        return true;\n      default:\n        throw new XdrReaderError(`got ${value} when trying to read a bool`);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    const intVal = value ? 1 : 0;\n    Int.write(intVal, writer);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return typeof value === 'boolean';\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,MAAM,aAAa,4JAAA,CAAA,mBAAgB;IACxC;;GAEC,GACD,OAAO,KAAK,MAAM,EAAE;QAClB,MAAM,QAAQ,oJAAA,CAAA,MAAG,CAAC,IAAI,CAAC;QAEvB,OAAQ;YACN,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT;gBACE,MAAM,IAAI,uJAAA,CAAA,iBAAc,CAAC,CAAC,IAAI,EAAE,MAAM,2BAA2B,CAAC;QACtE;IACF;IAEA;;GAEC,GACD,OAAO,MAAM,KAAK,EAAE,MAAM,EAAE;QAC1B,MAAM,SAAS,QAAQ,IAAI;QAC3B,oJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,QAAQ;IACpB;IAEA;;GAEC,GACD,OAAO,QAAQ,KAAK,EAAE;QACpB,OAAO,OAAO,UAAU;IAC1B;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1008, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/string.js"],"sourcesContent":["import { UnsignedInt } from './unsigned-int';\nimport { XdrCompositeType } from './xdr-type';\nimport { XdrReaderError, XdrWriterError } from './errors';\n\nexport class String extends XdrCompositeType {\n  constructor(maxLength = UnsignedInt.MAX_VALUE) {\n    super();\n    this._maxLength = maxLength;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    const size = UnsignedInt.read(reader);\n    if (size > this._maxLength)\n      throw new XdrReaderError(\n        `saw ${size} length String, max allowed is ${this._maxLength}`\n      );\n\n    return reader.read(size);\n  }\n\n  readString(reader) {\n    return this.read(reader).toString('utf8');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    // calculate string byte size before writing\n    const size =\n      typeof value === 'string'\n        ? Buffer.byteLength(value, 'utf8')\n        : value.length;\n    if (size > this._maxLength)\n      throw new XdrWriterError(\n        `got ${value.length} bytes, max allowed is ${this._maxLength}`\n      );\n    // write size info\n    UnsignedInt.write(size, writer);\n    writer.write(value, size);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    if (typeof value === 'string') {\n      return Buffer.byteLength(value, 'utf8') <= this._maxLength;\n    }\n    if (value instanceof Array || Buffer.isBuffer(value)) {\n      return value.length <= this._maxLength;\n    }\n    return false;\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,MAAM,eAAe,4JAAA,CAAA,mBAAgB;IAC1C,YAAY,YAAY,gKAAA,CAAA,cAAW,CAAC,SAAS,CAAE;QAC7C,KAAK;QACL,IAAI,CAAC,UAAU,GAAG;IACpB;IAEA;;GAEC,GACD,KAAK,MAAM,EAAE;QACX,MAAM,OAAO,gKAAA,CAAA,cAAW,CAAC,IAAI,CAAC;QAC9B,IAAI,OAAO,IAAI,CAAC,UAAU,EACxB,MAAM,IAAI,uJAAA,CAAA,iBAAc,CACtB,CAAC,IAAI,EAAE,KAAK,+BAA+B,EAAE,IAAI,CAAC,UAAU,EAAE;QAGlE,OAAO,OAAO,IAAI,CAAC;IACrB;IAEA,WAAW,MAAM,EAAE;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,QAAQ,CAAC;IACpC;IAEA;;GAEC,GACD,MAAM,KAAK,EAAE,MAAM,EAAE;QACnB,4CAA4C;QAC5C,MAAM,OACJ,OAAO,UAAU,WACb,OAAO,UAAU,CAAC,OAAO,UACzB,MAAM,MAAM;QAClB,IAAI,OAAO,IAAI,CAAC,UAAU,EACxB,MAAM,IAAI,uJAAA,CAAA,iBAAc,CACtB,CAAC,IAAI,EAAE,MAAM,MAAM,CAAC,uBAAuB,EAAE,IAAI,CAAC,UAAU,EAAE;QAElE,kBAAkB;QAClB,gKAAA,CAAA,cAAW,CAAC,KAAK,CAAC,MAAM;QACxB,OAAO,KAAK,CAAC,OAAO;IACtB;IAEA;;GAEC,GACD,QAAQ,KAAK,EAAE;QACb,IAAI,OAAO,UAAU,UAAU;YAC7B,OAAO,OAAO,UAAU,CAAC,OAAO,WAAW,IAAI,CAAC,UAAU;QAC5D;QACA,IAAI,iBAAiB,SAAS,OAAO,QAAQ,CAAC,QAAQ;YACpD,OAAO,MAAM,MAAM,IAAI,IAAI,CAAC,UAAU;QACxC;QACA,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1060, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/opaque.js"],"sourcesContent":["import { XdrCompositeType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Opaque extends XdrCompositeType {\n  constructor(length) {\n    super();\n    this._length = length;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    return reader.read(this._length);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    const { length } = value;\n    if (length !== this._length)\n      throw new XdrWriterError(\n        `got ${value.length} bytes, expected ${this._length}`\n      );\n    writer.write(value, length);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    return Buffer.isBuffer(value) && value.length === this._length;\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,eAAe,4JAAA,CAAA,mBAAgB;IAC1C,YAAY,MAAM,CAAE;QAClB,KAAK;QACL,IAAI,CAAC,OAAO,GAAG;IACjB;IAEA;;GAEC,GACD,KAAK,MAAM,EAAE;QACX,OAAO,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO;IACjC;IAEA;;GAEC,GACD,MAAM,KAAK,EAAE,MAAM,EAAE;QACnB,MAAM,EAAE,MAAM,EAAE,GAAG;QACnB,IAAI,WAAW,IAAI,CAAC,OAAO,EACzB,MAAM,IAAI,uJAAA,CAAA,iBAAc,CACtB,CAAC,IAAI,EAAE,MAAM,MAAM,CAAC,iBAAiB,EAAE,IAAI,CAAC,OAAO,EAAE;QAEzD,OAAO,KAAK,CAAC,OAAO;IACtB;IAEA;;GAEC,GACD,QAAQ,KAAK,EAAE;QACb,OAAO,OAAO,QAAQ,CAAC,UAAU,MAAM,MAAM,KAAK,IAAI,CAAC,OAAO;IAChE;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1096, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/var-opaque.js"],"sourcesContent":["import { UnsignedInt } from './unsigned-int';\nimport { XdrCompositeType } from './xdr-type';\nimport { XdrReaderError, XdrWriterError } from './errors';\n\nexport class VarOpaque extends XdrCompositeType {\n  constructor(maxLength = UnsignedInt.MAX_VALUE) {\n    super();\n    this._maxLength = maxLength;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    const size = UnsignedInt.read(reader);\n    if (size > this._maxLength)\n      throw new XdrReaderError(\n        `saw ${size} length VarOpaque, max allowed is ${this._maxLength}`\n      );\n    return reader.read(size);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    const { length } = value;\n    if (value.length > this._maxLength)\n      throw new XdrWriterError(\n        `got ${value.length} bytes, max allowed is ${this._maxLength}`\n      );\n    // write size info\n    UnsignedInt.write(length, writer);\n    writer.write(value, length);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    return Buffer.isBuffer(value) && value.length <= this._maxLength;\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,MAAM,kBAAkB,4JAAA,CAAA,mBAAgB;IAC7C,YAAY,YAAY,gKAAA,CAAA,cAAW,CAAC,SAAS,CAAE;QAC7C,KAAK;QACL,IAAI,CAAC,UAAU,GAAG;IACpB;IAEA;;GAEC,GACD,KAAK,MAAM,EAAE;QACX,MAAM,OAAO,gKAAA,CAAA,cAAW,CAAC,IAAI,CAAC;QAC9B,IAAI,OAAO,IAAI,CAAC,UAAU,EACxB,MAAM,IAAI,uJAAA,CAAA,iBAAc,CACtB,CAAC,IAAI,EAAE,KAAK,kCAAkC,EAAE,IAAI,CAAC,UAAU,EAAE;QAErE,OAAO,OAAO,IAAI,CAAC;IACrB;IAEA;;GAEC,GACD,MAAM,KAAK,EAAE,MAAM,EAAE;QACnB,MAAM,EAAE,MAAM,EAAE,GAAG;QACnB,IAAI,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAChC,MAAM,IAAI,uJAAA,CAAA,iBAAc,CACtB,CAAC,IAAI,EAAE,MAAM,MAAM,CAAC,uBAAuB,EAAE,IAAI,CAAC,UAAU,EAAE;QAElE,kBAAkB;QAClB,gKAAA,CAAA,cAAW,CAAC,KAAK,CAAC,QAAQ;QAC1B,OAAO,KAAK,CAAC,OAAO;IACtB;IAEA;;GAEC,GACD,QAAQ,KAAK,EAAE;QACb,OAAO,OAAO,QAAQ,CAAC,UAAU,MAAM,MAAM,IAAI,IAAI,CAAC,UAAU;IAClE;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1138, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/array.js"],"sourcesContent":["import { XdrCompositeType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Array extends XdrCompositeType {\n  constructor(childType, length) {\n    super();\n    this._childType = childType;\n    this._length = length;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    // allocate array of specified length\n    const result = new global.Array(this._length);\n    // read values\n    for (let i = 0; i < this._length; i++) {\n      result[i] = this._childType.read(reader);\n    }\n    return result;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    if (!global.Array.isArray(value))\n      throw new XdrWriterError(`value is not array`);\n\n    if (value.length !== this._length)\n      throw new XdrWriterError(\n        `got array of size ${value.length}, expected ${this._length}`\n      );\n\n    for (const child of value) {\n      this._childType.write(child, writer);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    if (!(value instanceof global.Array) || value.length !== this._length) {\n      return false;\n    }\n\n    for (const child of value) {\n      if (!this._childType.isValid(child)) return false;\n    }\n    return true;\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,cAAc,4JAAA,CAAA,mBAAgB;IACzC,YAAY,SAAS,EAAE,MAAM,CAAE;QAC7B,KAAK;QACL,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,OAAO,GAAG;IACjB;IAEA;;GAEC,GACD,KAAK,MAAM,EAAE;QACX,qCAAqC;QACrC,MAAM,SAAS,IAAI,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO;QAC5C,cAAc;QACd,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,EAAE,IAAK;YACrC,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;QACnC;QACA,OAAO;IACT;IAEA;;GAEC,GACD,MAAM,KAAK,EAAE,MAAM,EAAE;QACnB,IAAI,CAAC,OAAO,KAAK,CAAC,OAAO,CAAC,QACxB,MAAM,IAAI,uJAAA,CAAA,iBAAc,CAAC,CAAC,kBAAkB,CAAC;QAE/C,IAAI,MAAM,MAAM,KAAK,IAAI,CAAC,OAAO,EAC/B,MAAM,IAAI,uJAAA,CAAA,iBAAc,CACtB,CAAC,kBAAkB,EAAE,MAAM,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,EAAE;QAGjE,KAAK,MAAM,SAAS,MAAO;YACzB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO;QAC/B;IACF;IAEA;;GAEC,GACD,QAAQ,KAAK,EAAE;QACb,IAAI,CAAC,CAAC,iBAAiB,OAAO,KAAK,KAAK,MAAM,MAAM,KAAK,IAAI,CAAC,OAAO,EAAE;YACrE,OAAO;QACT;QAEA,KAAK,MAAM,SAAS,MAAO;YACzB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,OAAO;QAC9C;QACA,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1189, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/var-array.js"],"sourcesContent":["import { UnsignedInt } from './unsigned-int';\nimport { XdrCompositeType } from './xdr-type';\nimport { XdrReaderError, XdrWriterError } from './errors';\n\nexport class VarArray extends XdrCompositeType {\n  constructor(childType, maxLength = UnsignedInt.MAX_VALUE) {\n    super();\n    this._childType = childType;\n    this._maxLength = maxLength;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    const length = UnsignedInt.read(reader);\n    if (length > this._maxLength)\n      throw new XdrReaderError(\n        `saw ${length} length VarArray, max allowed is ${this._maxLength}`\n      );\n\n    const result = new Array(length);\n    for (let i = 0; i < length; i++) {\n      result[i] = this._childType.read(reader);\n    }\n    return result;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    if (!(value instanceof Array))\n      throw new XdrWriterError(`value is not array`);\n\n    if (value.length > this._maxLength)\n      throw new XdrWriterError(\n        `got array of size ${value.length}, max allowed is ${this._maxLength}`\n      );\n\n    UnsignedInt.write(value.length, writer);\n    for (const child of value) {\n      this._childType.write(child, writer);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    if (!(value instanceof Array) || value.length > this._maxLength) {\n      return false;\n    }\n    for (const child of value) {\n      if (!this._childType.isValid(child)) return false;\n    }\n    return true;\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,MAAM,iBAAiB,4JAAA,CAAA,mBAAgB;IAC5C,YAAY,SAAS,EAAE,YAAY,gKAAA,CAAA,cAAW,CAAC,SAAS,CAAE;QACxD,KAAK;QACL,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,UAAU,GAAG;IACpB;IAEA;;GAEC,GACD,KAAK,MAAM,EAAE;QACX,MAAM,SAAS,gKAAA,CAAA,cAAW,CAAC,IAAI,CAAC;QAChC,IAAI,SAAS,IAAI,CAAC,UAAU,EAC1B,MAAM,IAAI,uJAAA,CAAA,iBAAc,CACtB,CAAC,IAAI,EAAE,OAAO,iCAAiC,EAAE,IAAI,CAAC,UAAU,EAAE;QAGtE,MAAM,SAAS,IAAI,MAAM;QACzB,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,IAAK;YAC/B,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;QACnC;QACA,OAAO;IACT;IAEA;;GAEC,GACD,MAAM,KAAK,EAAE,MAAM,EAAE;QACnB,IAAI,CAAC,CAAC,iBAAiB,KAAK,GAC1B,MAAM,IAAI,uJAAA,CAAA,iBAAc,CAAC,CAAC,kBAAkB,CAAC;QAE/C,IAAI,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAChC,MAAM,IAAI,uJAAA,CAAA,iBAAc,CACtB,CAAC,kBAAkB,EAAE,MAAM,MAAM,CAAC,iBAAiB,EAAE,IAAI,CAAC,UAAU,EAAE;QAG1E,gKAAA,CAAA,cAAW,CAAC,KAAK,CAAC,MAAM,MAAM,EAAE;QAChC,KAAK,MAAM,SAAS,MAAO;YACzB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO;QAC/B;IACF;IAEA;;GAEC,GACD,QAAQ,KAAK,EAAE;QACb,IAAI,CAAC,CAAC,iBAAiB,KAAK,KAAK,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE;YAC/D,OAAO;QACT;QACA,KAAK,MAAM,SAAS,MAAO;YACzB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,OAAO;QAC9C;QACA,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1243, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/option.js"],"sourcesContent":["import { Bool } from './bool';\nimport { XdrPrimitiveType } from './xdr-type';\n\nexport class Option extends XdrPrimitiveType {\n  constructor(childType) {\n    super();\n    this._childType = childType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    if (Bool.read(reader)) {\n      return this._childType.read(reader);\n    }\n\n    return undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    const isPresent = value !== null && value !== undefined;\n\n    Bool.write(isPresent, writer);\n\n    if (isPresent) {\n      this._childType.write(value, writer);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    if (value === null || value === undefined) {\n      return true;\n    }\n    return this._childType.isValid(value);\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,eAAe,4JAAA,CAAA,mBAAgB;IAC1C,YAAY,SAAS,CAAE;QACrB,KAAK;QACL,IAAI,CAAC,UAAU,GAAG;IACpB;IAEA;;GAEC,GACD,KAAK,MAAM,EAAE;QACX,IAAI,qJAAA,CAAA,OAAI,CAAC,IAAI,CAAC,SAAS;YACrB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;QAC9B;QAEA,OAAO;IACT;IAEA;;GAEC,GACD,MAAM,KAAK,EAAE,MAAM,EAAE;QACnB,MAAM,YAAY,UAAU,QAAQ,UAAU;QAE9C,qJAAA,CAAA,OAAI,CAAC,KAAK,CAAC,WAAW;QAEtB,IAAI,WAAW;YACb,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO;QAC/B;IACF;IAEA;;GAEC,GACD,QAAQ,KAAK,EAAE;QACb,IAAI,UAAU,QAAQ,UAAU,WAAW;YACzC,OAAO;QACT;QACA,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;IACjC;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1287, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/void.js"],"sourcesContent":["import { XdrPrimitiveType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Void extends XdrPrimitiveType {\n  /* jshint unused: false */\n\n  static read() {\n    return undefined;\n  }\n\n  static write(value) {\n    if (value !== undefined)\n      throw new XdrWriterError('trying to write value to a void slot');\n  }\n\n  static isValid(value) {\n    return value === undefined;\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,aAAa,4JAAA,CAAA,mBAAgB;IACxC,wBAAwB,GAExB,OAAO,OAAO;QACZ,OAAO;IACT;IAEA,OAAO,MAAM,KAAK,EAAE;QAClB,IAAI,UAAU,WACZ,MAAM,IAAI,uJAAA,CAAA,iBAAc,CAAC;IAC7B;IAEA,OAAO,QAAQ,KAAK,EAAE;QACpB,OAAO,UAAU;IACnB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1311, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/enum.js"],"sourcesContent":["import { Int } from './int';\nimport { XdrPrimitiveType, isSerializableIsh } from './xdr-type';\nimport { XdrReaderError, XdrWriterError } from './errors';\n\nexport class Enum extends XdrPrimitiveType {\n  constructor(name, value) {\n    super();\n    this.name = name;\n    this.value = value;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const intVal = Int.read(reader);\n    const res = this._byValue[intVal];\n    if (res === undefined)\n      throw new XdrReaderError(\n        `unknown ${this.enumName} member for value ${intVal}`\n      );\n    return res;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (!this.isValid(value)) {\n      throw new XdrWriterError(\n        `${value} has enum name ${value?.enumName}, not ${\n          this.enumName\n        }: ${JSON.stringify(value)}`\n      );\n    }\n\n    Int.write(value.value, writer);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return (\n      value?.constructor?.enumName === this.enumName ||\n      isSerializableIsh(value, this)\n    );\n  }\n\n  static members() {\n    return this._members;\n  }\n\n  static values() {\n    return Object.values(this._members);\n  }\n\n  static fromName(name) {\n    const result = this._members[name];\n\n    if (!result)\n      throw new TypeError(`${name} is not a member of ${this.enumName}`);\n\n    return result;\n  }\n\n  static fromValue(value) {\n    const result = this._byValue[value];\n    if (result === undefined)\n      throw new TypeError(\n        `${value} is not a value of any member of ${this.enumName}`\n      );\n    return result;\n  }\n\n  static create(context, name, members) {\n    const ChildEnum = class extends Enum {};\n\n    ChildEnum.enumName = name;\n    context.results[name] = ChildEnum;\n\n    ChildEnum._members = {};\n    ChildEnum._byValue = {};\n\n    for (const [key, value] of Object.entries(members)) {\n      const inst = new ChildEnum(key, value);\n      ChildEnum._members[key] = inst;\n      ChildEnum._byValue[value] = inst;\n      ChildEnum[key] = () => inst;\n    }\n\n    return ChildEnum;\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,MAAM,aAAa,4JAAA,CAAA,mBAAgB;IACxC,YAAY,IAAI,EAAE,KAAK,CAAE;QACvB,KAAK;QACL,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,KAAK,GAAG;IACf;IAEA;;GAEC,GACD,OAAO,KAAK,MAAM,EAAE;QAClB,MAAM,SAAS,oJAAA,CAAA,MAAG,CAAC,IAAI,CAAC;QACxB,MAAM,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO;QACjC,IAAI,QAAQ,WACV,MAAM,IAAI,uJAAA,CAAA,iBAAc,CACtB,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,QAAQ;QAEzD,OAAO;IACT;IAEA;;GAEC,GACD,OAAO,MAAM,KAAK,EAAE,MAAM,EAAE;QAC1B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ;YACxB,MAAM,IAAI,uJAAA,CAAA,iBAAc,CACtB,GAAG,MAAM,eAAe,EAAE,OAAO,SAAS,MAAM,EAC9C,IAAI,CAAC,QAAQ,CACd,EAAE,EAAE,KAAK,SAAS,CAAC,QAAQ;QAEhC;QAEA,oJAAA,CAAA,MAAG,CAAC,KAAK,CAAC,MAAM,KAAK,EAAE;IACzB;IAEA;;GAEC,GACD,OAAO,QAAQ,KAAK,EAAE;QACpB,OACE,OAAO,aAAa,aAAa,IAAI,CAAC,QAAQ,IAC9C,CAAA,GAAA,4JAAA,CAAA,oBAAiB,AAAD,EAAE,OAAO,IAAI;IAEjC;IAEA,OAAO,UAAU;QACf,OAAO,IAAI,CAAC,QAAQ;IACtB;IAEA,OAAO,SAAS;QACd,OAAO,OAAO,MAAM,CAAC,IAAI,CAAC,QAAQ;IACpC;IAEA,OAAO,SAAS,IAAI,EAAE;QACpB,MAAM,SAAS,IAAI,CAAC,QAAQ,CAAC,KAAK;QAElC,IAAI,CAAC,QACH,MAAM,IAAI,UAAU,GAAG,KAAK,oBAAoB,EAAE,IAAI,CAAC,QAAQ,EAAE;QAEnE,OAAO;IACT;IAEA,OAAO,UAAU,KAAK,EAAE;QACtB,MAAM,SAAS,IAAI,CAAC,QAAQ,CAAC,MAAM;QACnC,IAAI,WAAW,WACb,MAAM,IAAI,UACR,GAAG,MAAM,iCAAiC,EAAE,IAAI,CAAC,QAAQ,EAAE;QAE/D,OAAO;IACT;IAEA,OAAO,OAAO,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE;QACpC,MAAM,YAAY,cAAc;QAAM;QAEtC,UAAU,QAAQ,GAAG;QACrB,QAAQ,OAAO,CAAC,KAAK,GAAG;QAExB,UAAU,QAAQ,GAAG,CAAC;QACtB,UAAU,QAAQ,GAAG,CAAC;QAEtB,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,OAAO,CAAC,SAAU;YAClD,MAAM,OAAO,IAAI,UAAU,KAAK;YAChC,UAAU,QAAQ,CAAC,IAAI,GAAG;YAC1B,UAAU,QAAQ,CAAC,MAAM,GAAG;YAC5B,SAAS,CAAC,IAAI,GAAG,IAAM;QACzB;QAEA,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1385, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/reference.js"],"sourcesContent":["import { XdrPrimitiveType } from './xdr-type';\nimport { XdrDefinitionError } from './errors';\n\nexport class Reference extends XdrPrimitiveType {\n  /* jshint unused: false */\n  resolve() {\n    throw new XdrDefinitionError(\n      '\"resolve\" method should be implemented in the descendant class'\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,kBAAkB,4JAAA,CAAA,mBAAgB;IAC7C,wBAAwB,GACxB,UAAU;QACR,MAAM,IAAI,uJAAA,CAAA,qBAAkB,CAC1B;IAEJ;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1403, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/struct.js"],"sourcesContent":["import { Reference } from './reference';\nimport { XdrCompositeType, isSerializableIsh } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Struct extends XdrCompositeType {\n  constructor(attributes) {\n    super();\n    this._attributes = attributes || {};\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const attributes = {};\n    for (const [fieldName, type] of this._fields) {\n      attributes[fieldName] = type.read(reader);\n    }\n    return new this(attributes);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (!this.isValid(value)) {\n      throw new XdrWriterError(\n        `${value} has struct name ${value?.constructor?.structName}, not ${\n          this.structName\n        }: ${JSON.stringify(value)}`\n      );\n    }\n\n    for (const [fieldName, type] of this._fields) {\n      const attribute = value._attributes[fieldName];\n      type.write(attribute, writer);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return (\n      value?.constructor?.structName === this.structName ||\n      isSerializableIsh(value, this)\n    );\n  }\n\n  static create(context, name, fields) {\n    const ChildStruct = class extends Struct {};\n\n    ChildStruct.structName = name;\n\n    context.results[name] = ChildStruct;\n\n    const mappedFields = new Array(fields.length);\n    for (let i = 0; i < fields.length; i++) {\n      const fieldDescriptor = fields[i];\n      const fieldName = fieldDescriptor[0];\n      let field = fieldDescriptor[1];\n      if (field instanceof Reference) {\n        field = field.resolve(context);\n      }\n      mappedFields[i] = [fieldName, field];\n      // create accessors\n      ChildStruct.prototype[fieldName] = createAccessorMethod(fieldName);\n    }\n\n    ChildStruct._fields = mappedFields;\n\n    return ChildStruct;\n  }\n}\n\nfunction createAccessorMethod(name) {\n  return function readOrWriteAttribute(value) {\n    if (value !== undefined) {\n      this._attributes[name] = value;\n    }\n    return this._attributes[name];\n  };\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,MAAM,eAAe,4JAAA,CAAA,mBAAgB;IAC1C,YAAY,UAAU,CAAE;QACtB,KAAK;QACL,IAAI,CAAC,WAAW,GAAG,cAAc,CAAC;IACpC;IAEA;;GAEC,GACD,OAAO,KAAK,MAAM,EAAE;QAClB,MAAM,aAAa,CAAC;QACpB,KAAK,MAAM,CAAC,WAAW,KAAK,IAAI,IAAI,CAAC,OAAO,CAAE;YAC5C,UAAU,CAAC,UAAU,GAAG,KAAK,IAAI,CAAC;QACpC;QACA,OAAO,IAAI,IAAI,CAAC;IAClB;IAEA;;GAEC,GACD,OAAO,MAAM,KAAK,EAAE,MAAM,EAAE;QAC1B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ;YACxB,MAAM,IAAI,uJAAA,CAAA,iBAAc,CACtB,GAAG,MAAM,iBAAiB,EAAE,OAAO,aAAa,WAAW,MAAM,EAC/D,IAAI,CAAC,UAAU,CAChB,EAAE,EAAE,KAAK,SAAS,CAAC,QAAQ;QAEhC;QAEA,KAAK,MAAM,CAAC,WAAW,KAAK,IAAI,IAAI,CAAC,OAAO,CAAE;YAC5C,MAAM,YAAY,MAAM,WAAW,CAAC,UAAU;YAC9C,KAAK,KAAK,CAAC,WAAW;QACxB;IACF;IAEA;;GAEC,GACD,OAAO,QAAQ,KAAK,EAAE;QACpB,OACE,OAAO,aAAa,eAAe,IAAI,CAAC,UAAU,IAClD,CAAA,GAAA,4JAAA,CAAA,oBAAiB,AAAD,EAAE,OAAO,IAAI;IAEjC;IAEA,OAAO,OAAO,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE;QACnC,MAAM,cAAc,cAAc;QAAQ;QAE1C,YAAY,UAAU,GAAG;QAEzB,QAAQ,OAAO,CAAC,KAAK,GAAG;QAExB,MAAM,eAAe,IAAI,MAAM,OAAO,MAAM;QAC5C,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,IAAK;YACtC,MAAM,kBAAkB,MAAM,CAAC,EAAE;YACjC,MAAM,YAAY,eAAe,CAAC,EAAE;YACpC,IAAI,QAAQ,eAAe,CAAC,EAAE;YAC9B,IAAI,iBAAiB,0JAAA,CAAA,YAAS,EAAE;gBAC9B,QAAQ,MAAM,OAAO,CAAC;YACxB;YACA,YAAY,CAAC,EAAE,GAAG;gBAAC;gBAAW;aAAM;YACpC,mBAAmB;YACnB,YAAY,SAAS,CAAC,UAAU,GAAG,qBAAqB;QAC1D;QAEA,YAAY,OAAO,GAAG;QAEtB,OAAO;IACT;AACF;AAEA,SAAS,qBAAqB,IAAI;IAChC,OAAO,SAAS,qBAAqB,KAAK;QACxC,IAAI,UAAU,WAAW;YACvB,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG;QAC3B;QACA,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK;IAC/B;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1480, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/union.js"],"sourcesContent":["import { Void } from './void';\nimport { Reference } from './reference';\nimport { XdrCompositeType, isSerializableIsh } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Union extends XdrCompositeType {\n  constructor(aSwitch, value) {\n    super();\n    this.set(aSwitch, value);\n  }\n\n  set(aSwitch, value) {\n    if (typeof aSwitch === 'string') {\n      aSwitch = this.constructor._switchOn.fromName(aSwitch);\n    }\n\n    this._switch = aSwitch;\n    const arm = this.constructor.armForSwitch(this._switch);\n    this._arm = arm;\n    this._armType = arm === Void ? Void : this.constructor._arms[arm];\n    this._value = value;\n  }\n\n  get(armName = this._arm) {\n    if (this._arm !== Void && this._arm !== armName)\n      throw new TypeError(`${armName} not set`);\n    return this._value;\n  }\n\n  switch() {\n    return this._switch;\n  }\n\n  arm() {\n    return this._arm;\n  }\n\n  armType() {\n    return this._armType;\n  }\n\n  value() {\n    return this._value;\n  }\n\n  static armForSwitch(aSwitch) {\n    const member = this._switches.get(aSwitch);\n    if (member !== undefined) {\n      return member;\n    }\n    if (this._defaultArm) {\n      return this._defaultArm;\n    }\n    throw new TypeError(`Bad union switch: ${aSwitch}`);\n  }\n\n  static armTypeForArm(arm) {\n    if (arm === Void) {\n      return Void;\n    }\n    return this._arms[arm];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const aSwitch = this._switchOn.read(reader);\n    const arm = this.armForSwitch(aSwitch);\n    const armType = arm === Void ? Void : this._arms[arm];\n    let value;\n    if (armType !== undefined) {\n      value = armType.read(reader);\n    } else {\n      value = arm.read(reader);\n    }\n    return new this(aSwitch, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (!this.isValid(value)) {\n      throw new XdrWriterError(\n        `${value} has union name ${value?.unionName}, not ${\n          this.unionName\n        }: ${JSON.stringify(value)}`\n      );\n    }\n\n    this._switchOn.write(value.switch(), writer);\n    value.armType().write(value.value(), writer);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return (\n      value?.constructor?.unionName === this.unionName ||\n      isSerializableIsh(value, this)\n    );\n  }\n\n  static create(context, name, config) {\n    const ChildUnion = class extends Union {};\n\n    ChildUnion.unionName = name;\n    context.results[name] = ChildUnion;\n\n    if (config.switchOn instanceof Reference) {\n      ChildUnion._switchOn = config.switchOn.resolve(context);\n    } else {\n      ChildUnion._switchOn = config.switchOn;\n    }\n\n    ChildUnion._switches = new Map();\n    ChildUnion._arms = {};\n\n    // resolve default arm\n    let defaultArm = config.defaultArm;\n    if (defaultArm instanceof Reference) {\n      defaultArm = defaultArm.resolve(context);\n    }\n\n    ChildUnion._defaultArm = defaultArm;\n\n    for (const [aSwitch, armName] of config.switches) {\n      const key =\n        typeof aSwitch === 'string'\n          ? ChildUnion._switchOn.fromName(aSwitch)\n          : aSwitch;\n\n      ChildUnion._switches.set(key, armName);\n    }\n\n    // add enum-based helpers\n    // NOTE: we don't have good notation for \"is a subclass of XDR.Enum\",\n    //  and so we use the following check (does _switchOn have a `values`\n    //  attribute) to approximate the intent.\n    if (ChildUnion._switchOn.values !== undefined) {\n      for (const aSwitch of ChildUnion._switchOn.values()) {\n        // Add enum-based constructors\n        ChildUnion[aSwitch.name] = function ctr(value) {\n          return new ChildUnion(aSwitch, value);\n        };\n\n        // Add enum-based \"set\" helpers\n        ChildUnion.prototype[aSwitch.name] = function set(value) {\n          return this.set(aSwitch, value);\n        };\n      }\n    }\n\n    if (config.arms) {\n      for (const [armsName, value] of Object.entries(config.arms)) {\n        ChildUnion._arms[armsName] =\n          value instanceof Reference ? value.resolve(context) : value;\n        // Add arm accessor helpers\n        if (value !== Void) {\n          ChildUnion.prototype[armsName] = function get() {\n            return this.get(armsName);\n          };\n        }\n      }\n    }\n\n    return ChildUnion;\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1624, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/types.js"],"sourcesContent":["export * from './int';\nexport * from './hyper';\nexport * from './unsigned-int';\nexport * from './unsigned-hyper';\nexport * from './large-int';\n\nexport * from './float';\nexport * from './double';\nexport * from './quadruple';\n\nexport * from './bool';\n\nexport * from './string';\n\nexport * from './opaque';\nexport * from './var-opaque';\n\nexport * from './array';\nexport * from './var-array';\n\nexport * from './option';\nexport * from './void';\n\nexport * from './enum';\nexport * from './struct';\nexport * from './union';\n"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1696, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/config.js"],"sourcesContent":["// eslint-disable-next-line max-classes-per-file\nimport * as XDRTypes from './types';\nimport { Reference } from './reference';\nimport { XdrDefinitionError } from './errors';\n\nexport * from './reference';\n\nclass SimpleReference extends Reference {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n\n  resolve(context) {\n    const defn = context.definitions[this.name];\n    return defn.resolve(context);\n  }\n}\n\nclass ArrayReference extends Reference {\n  constructor(childReference, length, variable = false) {\n    super();\n    this.childReference = childReference;\n    this.length = length;\n    this.variable = variable;\n  }\n\n  resolve(context) {\n    let resolvedChild = this.childReference;\n    let length = this.length;\n\n    if (resolvedChild instanceof Reference) {\n      resolvedChild = resolvedChild.resolve(context);\n    }\n\n    if (length instanceof Reference) {\n      length = length.resolve(context);\n    }\n\n    if (this.variable) {\n      return new XDRTypes.VarArray(resolvedChild, length);\n    }\n    return new XDRTypes.Array(resolvedChild, length);\n  }\n}\n\nclass OptionReference extends Reference {\n  constructor(childReference) {\n    super();\n    this.childReference = childReference;\n    this.name = childReference.name;\n  }\n\n  resolve(context) {\n    let resolvedChild = this.childReference;\n\n    if (resolvedChild instanceof Reference) {\n      resolvedChild = resolvedChild.resolve(context);\n    }\n\n    return new XDRTypes.Option(resolvedChild);\n  }\n}\n\nclass SizedReference extends Reference {\n  constructor(sizedType, length) {\n    super();\n    this.sizedType = sizedType;\n    this.length = length;\n  }\n\n  resolve(context) {\n    let length = this.length;\n\n    if (length instanceof Reference) {\n      length = length.resolve(context);\n    }\n\n    return new this.sizedType(length);\n  }\n}\n\nclass Definition {\n  constructor(constructor, name, cfg) {\n    this.constructor = constructor;\n    this.name = name;\n    this.config = cfg;\n  }\n\n  // resolve calls the constructor of this definition with the provided context\n  // and this definitions config values.  The definitions constructor should\n  // populate the final type on `context.results`, and may refer to other\n  // definitions through `context.definitions`\n  resolve(context) {\n    if (this.name in context.results) {\n      return context.results[this.name];\n    }\n\n    return this.constructor(context, this.name, this.config);\n  }\n}\n\n// let the reference resolution system do its thing\n// the \"constructor\" for a typedef just returns the resolved value\nfunction createTypedef(context, typeName, value) {\n  if (value instanceof Reference) {\n    value = value.resolve(context);\n  }\n  context.results[typeName] = value;\n  return value;\n}\n\nfunction createConst(context, name, value) {\n  context.results[name] = value;\n  return value;\n}\n\nclass TypeBuilder {\n  constructor(destination) {\n    this._destination = destination;\n    this._definitions = {};\n  }\n\n  enum(name, members) {\n    const result = new Definition(XDRTypes.Enum.create, name, members);\n    this.define(name, result);\n  }\n\n  struct(name, members) {\n    const result = new Definition(XDRTypes.Struct.create, name, members);\n    this.define(name, result);\n  }\n\n  union(name, cfg) {\n    const result = new Definition(XDRTypes.Union.create, name, cfg);\n    this.define(name, result);\n  }\n\n  typedef(name, cfg) {\n    const result = new Definition(createTypedef, name, cfg);\n    this.define(name, result);\n  }\n\n  const(name, cfg) {\n    const result = new Definition(createConst, name, cfg);\n    this.define(name, result);\n  }\n\n  void() {\n    return XDRTypes.Void;\n  }\n\n  bool() {\n    return XDRTypes.Bool;\n  }\n\n  int() {\n    return XDRTypes.Int;\n  }\n\n  hyper() {\n    return XDRTypes.Hyper;\n  }\n\n  uint() {\n    return XDRTypes.UnsignedInt;\n  }\n\n  uhyper() {\n    return XDRTypes.UnsignedHyper;\n  }\n\n  float() {\n    return XDRTypes.Float;\n  }\n\n  double() {\n    return XDRTypes.Double;\n  }\n\n  quadruple() {\n    return XDRTypes.Quadruple;\n  }\n\n  string(length) {\n    return new SizedReference(XDRTypes.String, length);\n  }\n\n  opaque(length) {\n    return new SizedReference(XDRTypes.Opaque, length);\n  }\n\n  varOpaque(length) {\n    return new SizedReference(XDRTypes.VarOpaque, length);\n  }\n\n  array(childType, length) {\n    return new ArrayReference(childType, length);\n  }\n\n  varArray(childType, maxLength) {\n    return new ArrayReference(childType, maxLength, true);\n  }\n\n  option(childType) {\n    return new OptionReference(childType);\n  }\n\n  define(name, definition) {\n    if (this._destination[name] === undefined) {\n      this._definitions[name] = definition;\n    } else {\n      throw new XdrDefinitionError(`${name} is already defined`);\n    }\n  }\n\n  lookup(name) {\n    return new SimpleReference(name);\n  }\n\n  resolve() {\n    for (const defn of Object.values(this._definitions)) {\n      defn.resolve({\n        definitions: this._definitions,\n        results: this._destination\n      });\n    }\n  }\n}\n\nexport function config(fn, types = {}) {\n  if (fn) {\n    const builder = new TypeBuilder(types);\n    fn(builder);\n    builder.resolve();\n  }\n\n  return types;\n}\n"],"names":[],"mappings":"AAAA,gDAAgD;;;;AAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;AAIA,MAAM,wBAAwB,0JAAA,CAAA,YAAS;IACrC,YAAY,IAAI,CAAE;QAChB,KAAK;QACL,IAAI,CAAC,IAAI,GAAG;IACd;IAEA,QAAQ,OAAO,EAAE;QACf,MAAM,OAAO,QAAQ,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;QAC3C,OAAO,KAAK,OAAO,CAAC;IACtB;AACF;AAEA,MAAM,uBAAuB,0JAAA,CAAA,YAAS;IACpC,YAAY,cAAc,EAAE,MAAM,EAAE,WAAW,KAAK,CAAE;QACpD,KAAK;QACL,IAAI,CAAC,cAAc,GAAG;QACtB,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,QAAQ,GAAG;IAClB;IAEA,QAAQ,OAAO,EAAE;QACf,IAAI,gBAAgB,IAAI,CAAC,cAAc;QACvC,IAAI,SAAS,IAAI,CAAC,MAAM;QAExB,IAAI,yBAAyB,0JAAA,CAAA,YAAS,EAAE;YACtC,gBAAgB,cAAc,OAAO,CAAC;QACxC;QAEA,IAAI,kBAAkB,0JAAA,CAAA,YAAS,EAAE;YAC/B,SAAS,OAAO,OAAO,CAAC;QAC1B;QAEA,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,IAAI,6JAAA,CAAA,WAAiB,CAAC,eAAe;QAC9C;QACA,OAAO,IAAI,sJAAA,CAAA,QAAc,CAAC,eAAe;IAC3C;AACF;AAEA,MAAM,wBAAwB,0JAAA,CAAA,YAAS;IACrC,YAAY,cAAc,CAAE;QAC1B,KAAK;QACL,IAAI,CAAC,cAAc,GAAG;QACtB,IAAI,CAAC,IAAI,GAAG,eAAe,IAAI;IACjC;IAEA,QAAQ,OAAO,EAAE;QACf,IAAI,gBAAgB,IAAI,CAAC,cAAc;QAEvC,IAAI,yBAAyB,0JAAA,CAAA,YAAS,EAAE;YACtC,gBAAgB,cAAc,OAAO,CAAC;QACxC;QAEA,OAAO,IAAI,uJAAA,CAAA,SAAe,CAAC;IAC7B;AACF;AAEA,MAAM,uBAAuB,0JAAA,CAAA,YAAS;IACpC,YAAY,SAAS,EAAE,MAAM,CAAE;QAC7B,KAAK;QACL,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,MAAM,GAAG;IAChB;IAEA,QAAQ,OAAO,EAAE;QACf,IAAI,SAAS,IAAI,CAAC,MAAM;QAExB,IAAI,kBAAkB,0JAAA,CAAA,YAAS,EAAE;YAC/B,SAAS,OAAO,OAAO,CAAC;QAC1B;QAEA,OAAO,IAAI,IAAI,CAAC,SAAS,CAAC;IAC5B;AACF;AAEA,MAAM;IACJ,YAAY,WAAW,EAAE,IAAI,EAAE,GAAG,CAAE;QAClC,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,MAAM,GAAG;IAChB;IAEA,6EAA6E;IAC7E,0EAA0E;IAC1E,uEAAuE;IACvE,4CAA4C;IAC5C,QAAQ,OAAO,EAAE;QACf,IAAI,IAAI,CAAC,IAAI,IAAI,QAAQ,OAAO,EAAE;YAChC,OAAO,QAAQ,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;QACnC;QAEA,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM;IACzD;AACF;AAEA,mDAAmD;AACnD,kEAAkE;AAClE,SAAS,cAAc,OAAO,EAAE,QAAQ,EAAE,KAAK;IAC7C,IAAI,iBAAiB,0JAAA,CAAA,YAAS,EAAE;QAC9B,QAAQ,MAAM,OAAO,CAAC;IACxB;IACA,QAAQ,OAAO,CAAC,SAAS,GAAG;IAC5B,OAAO;AACT;AAEA,SAAS,YAAY,OAAO,EAAE,IAAI,EAAE,KAAK;IACvC,QAAQ,OAAO,CAAC,KAAK,GAAG;IACxB,OAAO;AACT;AAEA,MAAM;IACJ,YAAY,WAAW,CAAE;QACvB,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,YAAY,GAAG,CAAC;IACvB;IAEA,KAAK,IAAI,EAAE,OAAO,EAAE;QAClB,MAAM,SAAS,IAAI,WAAW,qJAAA,CAAA,OAAa,CAAC,MAAM,EAAE,MAAM;QAC1D,IAAI,CAAC,MAAM,CAAC,MAAM;IACpB;IAEA,OAAO,IAAI,EAAE,OAAO,EAAE;QACpB,MAAM,SAAS,IAAI,WAAW,uJAAA,CAAA,SAAe,CAAC,MAAM,EAAE,MAAM;QAC5D,IAAI,CAAC,MAAM,CAAC,MAAM;IACpB;IAEA,MAAM,IAAI,EAAE,GAAG,EAAE;QACf,MAAM,SAAS,IAAI,WAAW,sJAAA,CAAA,QAAc,CAAC,MAAM,EAAE,MAAM;QAC3D,IAAI,CAAC,MAAM,CAAC,MAAM;IACpB;IAEA,QAAQ,IAAI,EAAE,GAAG,EAAE;QACjB,MAAM,SAAS,IAAI,WAAW,eAAe,MAAM;QACnD,IAAI,CAAC,MAAM,CAAC,MAAM;IACpB;IAEA,MAAM,IAAI,EAAE,GAAG,EAAE;QACf,MAAM,SAAS,IAAI,WAAW,aAAa,MAAM;QACjD,IAAI,CAAC,MAAM,CAAC,MAAM;IACpB;IAEA,OAAO;QACL,OAAO,qJAAA,CAAA,OAAa;IACtB;IAEA,OAAO;QACL,OAAO,qJAAA,CAAA,OAAa;IACtB;IAEA,MAAM;QACJ,OAAO,oJAAA,CAAA,MAAY;IACrB;IAEA,QAAQ;QACN,OAAO,sJAAA,CAAA,QAAc;IACvB;IAEA,OAAO;QACL,OAAO,gKAAA,CAAA,cAAoB;IAC7B;IAEA,SAAS;QACP,OAAO,kKAAA,CAAA,gBAAsB;IAC/B;IAEA,QAAQ;QACN,OAAO,sJAAA,CAAA,QAAc;IACvB;IAEA,SAAS;QACP,OAAO,uJAAA,CAAA,SAAe;IACxB;IAEA,YAAY;QACV,OAAO,0JAAA,CAAA,YAAkB;IAC3B;IAEA,OAAO,MAAM,EAAE;QACb,OAAO,IAAI,eAAe,uJAAA,CAAA,SAAe,EAAE;IAC7C;IAEA,OAAO,MAAM,EAAE;QACb,OAAO,IAAI,eAAe,uJAAA,CAAA,SAAe,EAAE;IAC7C;IAEA,UAAU,MAAM,EAAE;QAChB,OAAO,IAAI,eAAe,8JAAA,CAAA,YAAkB,EAAE;IAChD;IAEA,MAAM,SAAS,EAAE,MAAM,EAAE;QACvB,OAAO,IAAI,eAAe,WAAW;IACvC;IAEA,SAAS,SAAS,EAAE,SAAS,EAAE;QAC7B,OAAO,IAAI,eAAe,WAAW,WAAW;IAClD;IAEA,OAAO,SAAS,EAAE;QAChB,OAAO,IAAI,gBAAgB;IAC7B;IAEA,OAAO,IAAI,EAAE,UAAU,EAAE;QACvB,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,KAAK,WAAW;YACzC,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG;QAC5B,OAAO;YACL,MAAM,IAAI,uJAAA,CAAA,qBAAkB,CAAC,GAAG,KAAK,mBAAmB,CAAC;QAC3D;IACF;IAEA,OAAO,IAAI,EAAE;QACX,OAAO,IAAI,gBAAgB;IAC7B;IAEA,UAAU;QACR,KAAK,MAAM,QAAQ,OAAO,MAAM,CAAC,IAAI,CAAC,YAAY,EAAG;YACnD,KAAK,OAAO,CAAC;gBACX,aAAa,IAAI,CAAC,YAAY;gBAC9B,SAAS,IAAI,CAAC,YAAY;YAC5B;QACF;IACF;AACF;AAEO,SAAS,OAAO,EAAE,EAAE,QAAQ,CAAC,CAAC;IACnC,IAAI,IAAI;QACN,MAAM,UAAU,IAAI,YAAY;QAChC,GAAG;QACH,QAAQ,OAAO;IACjB;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1929, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Hackathons/stellar_blend/frontend/node_modules/%40stellar/js-xdr/src/index.js"],"sourcesContent":["export * from './types';\nexport * from './config';\n\nexport { XdrReader } from './serialization/xdr-reader';\nexport { XdrWriter } from './serialization/xdr-writer';\n"],"names":[],"mappings":";AAAA;AACA;AAEA;AACA","ignoreList":[0],"debugId":null}}]
}